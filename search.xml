<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>&lt;2016/&gt;&lt;2017&gt;</title>
    <url>/2016-12-31/2016-to-2017.html</url>
    <content><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=530 height=86 src="//music.163.com/outchain/player?type=2&id=32507038&auto=0&height=66"></iframe>

<blockquote>
<p>与其在上一秒中沉醉，不如努力拥抱下一秒.</p>
</blockquote>
<h2 id="匆匆而去的2016"><a href="#匆匆而去的2016" class="headerlink" title="匆匆而去的2016"></a>匆匆而去的2016</h2><p>入行前端的第二年，也是毕业的第二年。</p>
<p>短短两载却有翻天覆地的改变：从大学走入社会，从设计跨行到前端。这其中有必然也有偶然。</p>
<h3 id="年初"><a href="#年初" class="headerlink" title="年初"></a>年初</h3><p>年初换了新东家，毕业后的第二份工作，有对自身能力的底气不足而提高的渴望，也有对新东家的满怀期望，一切在有条不紊的进行着。2016年2月22日入职，从此多了一个别号二月(2ue)。座位在老大旁边，感到一丝压力。</p>
<h3 id="适应与压力"><a href="#适应与压力" class="headerlink" title="适应与压力"></a>适应与压力</h3><p>经历了最初的彷徨后，慢慢开始适应新的环境，作为新手的我，跟着大神们一起做项目是开心的，但也同时感受到更多的压力。因此在入职后的几个月进入了疯狂学习模式，逛技术社区，微博关注技术达人，微信关注相关公众号，啃书等等，连早上挤公交地铁的时候都抽时间在手机上学习，当时感觉自己已经疯魔。虽然也就仅仅疯狂了三个月，但这短暂的三个月疯狂却让我焕然一新：从最初的复制粘贴到有自己的思考、从无处可问到能独立解决问题、更加擅于利用网络解决问题、能够更快的阅读新的知识、更好的编码习惯…林林总总，这三个月是很重要的三个月。</p>
<h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>换了新房东，空间更大，也换了一台新电脑，更方便撸（打）代（游）码（戏）。总之一切还算满意。</p>
<h3 id="同事"><a href="#同事" class="headerlink" title="同事"></a>同事</h3><p>我其实是个不擅交际，怕生的人儿。因为我说话很笨，所以在新的环境想要和人混熟，总是要花更多的时间去处理这些关系。不过幸运的是遇到一群很好相处的同事，让我更容易的处理好这些问题。所以再后来遇到各种问题后我都是大胆的去问部门大神，充分发挥了死灿烂打的精神(这个三秒，市委应该深有体会)。当然作为一个胖纸，肯定也有一堆饭友，也会利用工作过的闲暇之余去腐败腐败。</p>
<h3 id="项目与加班"><a href="#项目与加班" class="headerlink" title="项目与加班"></a>项目与加班</h3><p>新东家的项目总是要得比较急，这就常常导致加班和代码的低质量产出。这是我最开始的想法，但到后来发现，诚然这两者是有一定的因果关系，但是有些东西本身就不可力抗（比如项目交付时间节点），如果一直持有因为时间导致自己加班这种心态，而不去提高自身的能力，那么不论你换到哪家公司你都会陷入无尽的加班与抱怨中。加班不可避免，那就努力提高自己，减少加班时间吧。</p>
<h3 id="技术浪潮"><a href="#技术浪潮" class="headerlink" title="技术浪潮"></a>技术浪潮</h3><p>这一年是技术浪潮爆发的一年。大数据、<code>AI</code>、人工智能、无人驾驶…各种技术名词频频见诸于头条新闻。在这喷薄的大浪中，前端领域也爆发出自己的色彩：<code>MVC</code>与<code>MVVC</code>、<code>stylus</code>，<code>less</code>与<code>sass</code>、<code>grunt</code>，<code>gulp</code>与<code>webpack</code>、<code>ng</code>，<code>react</code>与<code>vue</code>、<code>node</code>、大前端开发….等等，技术的更新换代不断地推动着前端领域的向前发展。作为一个前端开发者，深深的感受到我大前端的魅力，也越发对技术存有敬畏之心，不断的驱使我追赶它的浪潮，我愿意在它的浪潮中沉浮。</p>
<h3 id="我的Github"><a href="#我的Github" class="headerlink" title="我的Github"></a>我的Github</h3><p><code>github</code>是在2015年末注册的，期间一直不知怎么玩。在上半年，学习了<code>git</code>，喜欢使用命令行,也喜欢在<code>github</code>上提交一些东西，后面学习了<code>vue</code>后，慢慢的提交一些简单的<code>demo</code>上去，挺享受这个过程的。对了，我也通过<code>github</code>+<code>hexo</code>托管了一个静态博客，平时自己的写的东西也往上丢，不过貌似没坚持多久…..2017我会更加勤劳。</p>
<h3 id="换了个显示器"><a href="#换了个显示器" class="headerlink" title="换了个显示器"></a>换了个显示器</h3><p>这是一个不得不说的显示器：前端开发当然得用大的好的显示器，于是三秒写了一年的12Q换来一个帅气的显示器，从此以后心情舒畅，撸码不累，加班更勤。</p>
<h3 id="进步与不足"><a href="#进步与不足" class="headerlink" title="进步与不足"></a>进步与不足</h3><p>踩着2016的尾巴，我细数了2016发生在我身上的变化，虽有些许进步，但却也说不出个所以然，如果非要说，那么就是自己解决问题的能力强了，眼界开阔了，有自己的思考了，目标清晰了。<br>相对于进步，不足之处就很明显了，有很多也是我的致命伤，更是职业道路前进的致命伤。</p>
<ul>
<li>习惯<ul>
<li>有点小拖拉</li>
<li>三分钟热情</li>
<li>不仔细</li>
</ul>
</li>
<li>技术<ul>
<li>基础不够</li>
<li>没有创新</li>
<li>阅读很不够</li>
<li>至今没有代表作</li>
</ul>
</li>
</ul>
<p>有不足，能正视不足，更需要我弥补不足。</p>
<h2 id="滚滚而来的2017"><a href="#滚滚而来的2017" class="headerlink" title="滚滚而来的2017"></a>滚滚而来的2017</h2><p>2017年似乎要做的事情很多。一件件做，总有完成；一步步走，总有尽头。</p>
<h3 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h3><ul>
<li>EMAC 2016-2017</li>
<li>VUE,REACT</li>
<li>NODE</li>
<li>涨工资</li>
</ul>
<p>又是新的一年开启，新年愿有一番好景。</p>
]]></content>
      <categories>
        <category>record</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Git系列之SSH Key配置</title>
    <url>/2018-03-08/Git%E7%B3%BB%E5%88%97%E4%B9%8BSSH%20Key%E9%85%8D%E7%BD%AE.html</url>
    <content><![CDATA[<blockquote>
<p>在使用Git进行版本控制时，SSH密钥是一种常见的身份验证方式。当你需要在同一台机器上管理多个Git账户时，如何配置和使用多个SSH密钥呢？本文将为你提供一份的教程</p>
</blockquote>
<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>本篇文章以github仓库为例来进行说明</p>
<h2 id="生成新的SSH密钥"><a href="#生成新的SSH密钥" class="headerlink" title="生成新的SSH密钥"></a>生成新的SSH密钥</h2><p>首先，你需要为每个远程仓库生成一对SSH密钥。在终端中运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;your_email@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后回车:</p>
<ul>
<li>提示设置密码<ul>
<li>如果不设置，直接按回车，然后会提示你确认密码，再按一次回车</li>
<li>如果设置密码，输入你想设置的密码，并确认，这样以后每次提交需要输入密码</li>
</ul>
</li>
<li>提示生成key的文件名<ul>
<li>如果不修改，则使用默认文件名<code>id_rsa</code></li>
<li>如果你有在该电脑管理多个key或者已经有生成的key占用了该文件名，则需要重命令</li>
</ul>
</li>
</ul>
<p>然后在用户主目录（如果是windows系统一般就在：C:\Users\Administrator.ssh， Mac系统一般是在~&#x2F;.ssh目录）找到<code>.ssh</code>，其中<code>id_rsa</code>表示私钥不能泄露和<code>id_rsa.pub</code>表示公钥，用于对外。</p>
<p>可以使用不同的文件名来区分不同的密钥对，例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 工作仓库对于的ssh key</span></span><br><span class="line">~/.ssh/id_rsa_work</span><br><span class="line"><span class="comment"># github仓库对于的ssh key</span></span><br><span class="line">~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure>

<h2 id="SSH密钥的添加与代理"><a href="#SSH密钥的添加与代理" class="headerlink" title="SSH密钥的添加与代理"></a>SSH密钥的添加与代理</h2><p>生成密钥后，需要将它们添加到SSH代理中，以便Git可以使用它们。首先启动SSH代理：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(ssh-agent -s)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后，将你的SSH密钥添加到代理中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_work</span><br><span class="line">ssh-add ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure>

<h2 id="SSH配置文件的定制"><a href="#SSH配置文件的定制" class="headerlink" title="SSH配置文件的定制"></a>SSH配置文件的定制</h2><p>为了区分不同的远程仓库，编辑或创建SSH配置文件<code>~/.ssh/config</code>，为每个仓库配置一个规则：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host work.git</span><br><span class="line">    HostName work.example.com</span><br><span class="line">    User git</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_work</span><br><span class="line"></span><br><span class="line">Host github.git</span><br><span class="line">    HostName github.example.com</span><br><span class="line">    User github</span><br><span class="line">    IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure>

<h2 id="添加SSH密钥到Git账户"><a href="#添加SSH密钥到Git账户" class="headerlink" title="添加SSH密钥到Git账户"></a>添加SSH密钥到Git账户</h2><p>现在，你需要将新的公钥（例如<code>~/.ssh/id_rsa_github.pub</code>）添加到对应的Git账户。你可以使用<code>cat</code>命令查看公钥：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa_github.pub</span><br></pre></td></tr></table></figure>

<p>然后，复制输出的内容，并将其添加到你的Git账户的SSH密钥部分。</p>
<h2 id="测试你的设置"><a href="#测试你的设置" class="headerlink" title="测试你的设置"></a>测试你的设置</h2><p>最后，你可以通过SSH到你的Git账户来测试你的设置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<h2 id="SSH密钥的管理与维护"><a href="#SSH密钥的管理与维护" class="headerlink" title="SSH密钥的管理与维护"></a>SSH密钥的管理与维护</h2><p>随着时间推移，可能需要添加、删除或修改SSH密钥。使用<code>ssh-add</code>、<code>ssh-keygen</code>和<code>ssh-keyscan</code>等命令来管理你的SSH密钥。</p>
<h3 id="安全与权限"><a href="#安全与权限" class="headerlink" title="安全与权限"></a>安全与权限</h3><p>确保SSH私钥文件的权限设置正确，通常应为600（<code>chmod 600 id_rsa</code>）。不要将私钥文件泄露给未授权人员。</p>
<h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>通过上述步骤，你可以在Git中为不同的远程仓库配置多个SSH密钥，实现更高效的工作流程和更安全的代码管理。本文提供的终极指南将帮助你在多项目协作或使用多个Git服务提供商时游刃有余。</p>
<h3 id="常见问题解答"><a href="#常见问题解答" class="headerlink" title="常见问题解答"></a>常见问题解答</h3><ol>
<li><p><strong>Q:</strong> 我需要为每个远程仓库生成一个SSH密钥对吗？<br><strong>A:</strong> 是的，推荐为每个远程仓库生成一个单独的SSH密钥对，以实现更细粒度的访问控制。</p>
</li>
<li><p><strong>Q:</strong> 我可以同时添加多个SSH密钥到SSH代理吗？<br><strong>A:</strong> 可以，你可以使用<code>ssh-add</code>命令添加多个SSH密钥到SSH代理。</p>
</li>
<li><p><strong>Q:</strong> 如果我更换了计算机，如何迁移我的SSH密钥？<br><strong>A:</strong> 只需将<code>~/.ssh</code>目录下的私钥文件复制到新计算机的相应位置，并确保权限设置正确。</p>
</li>
<li><p><strong>Q:</strong> 如何确保我的SSH密钥安全？<br><strong>A:</strong> 除了设置正确的文件权限外，避免在不安全的网络环境下使用SSH密钥，并且不要将私钥文件泄露给其他人。</p>
</li>
</ol>
<p>通过这篇文章，你已经掌握了在Git中管理多个SSH密钥的关键技巧。这将帮助你在保证安全的同时，提高工作效率，更好地管理你的Git项目。</p>
]]></content>
      <categories>
        <category>工具/git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>ssh</tag>
        <tag>ssh-key</tag>
      </tags>
  </entry>
  <entry>
    <title>Git系列常用命令之放弃修改</title>
    <url>/2018-01-20/Git%E7%B3%BB%E5%88%97%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E4%B9%8B%E6%94%BE%E5%BC%83%E4%BF%AE%E6%94%B9.html</url>
    <content><![CDATA[<blockquote>
<p>Git 是一种流行的分布式版本控制系统，它允许开发者在不同的分支上进行工作，同时保持代码的完整性和历史记录。在使用 Git 进行版本控制的过程中，我们可能会遇到需要放弃当前工作进度的情况，例如，当发现当前分支的修改与主分支的代码不兼容，或者需要切换到另一个分支继续工作时。</p>
</blockquote>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>这篇文章会介绍如何在 Git 中放弃对文件的修改，包括以下几个方面：</p>
<ul>
<li>放弃对单个文件&#x2F;文件夹的修改：如果只想放弃对某个特定文件的修改，可以使用 git checkout 命令。</li>
<li>放弃所有未提交的修改：如果需要放弃对所有未提交文件的修改，可以使用 git reset 命令。</li>
<li>撤销已经提交的更改：如果需要撤销已经提交但尚未推送到远程仓库的更改，可以使用 git revert 命令。</li>
<li>清理未跟踪的文件：有时候，你可能想要删除那些被错误添加到工作目录中但未被 Git 跟踪的文件，可以使用 git clean 命令。</li>
</ul>
<p>文章可能会通过具体的命令示例和场景，帮助读者理解在不同情况下如何使用 Git 命令来放弃修改，以保持工作流程的流畅和代码的整洁。</p>
<h2 id="两个概念"><a href="#两个概念" class="headerlink" title="两个概念"></a>两个概念</h2><p>在 Git 中，<code>index</code> 和 <code>commit</code> 是两个核心概念，它们在版本控制过程中扮演着不同的角色，理解这两个概念有助于加深对git工作原理的理解：</p>
<h3 id="Index（索引）"><a href="#Index（索引）" class="headerlink" title="Index（索引）"></a>Index（索引）</h3><ul>
<li>Index 是 Git 用来准备下一次提交的暂存区。你可以将其视为一个准备提交的文件列表，这些文件已经被审查和选择，准备成为下一次提交的一部分。</li>
<li>当你对工作目录中的文件进行更改并希望将这些更改包含在下一次提交中时，你需要使用 <code>git add</code> 命令将它们添加到 index 中。</li>
<li>Index 允许你在提交之前进行多次修改，并且可以对这些修改进行排序和组织，以确保提交是有意义的。</li>
<li>Index 是一个文件，位于 <code>.git/index</code> 文件中。</li>
</ul>
<h3 id="Commit（提交）"><a href="#Commit（提交）" class="headerlink" title="Commit（提交）"></a>Commit（提交）</h3><ul>
<li><p>Commit 是项目快照的记录，它包含了项目的某个特定版本。当你执行 <code>git commit</code> 命令时，Git 会将当前 index 中的内容以及一些附加的元数据（如提交信息、作者、时间戳等）打包成一个提交对象，并存储在本地仓库中。</p>
</li>
<li><p>提交是不可变的，意味着一旦创建，其内容就不能被更改。这保证了项目历史的完整性和一致性。</p>
</li>
<li><p>提交可以看作是项目的版本号，每个提交都有一个唯一的哈希值，用于标识和引用特定的项目状态。</p>
</li>
<li><p>提交是 Git 分布式特性的基础，因为它允许开发者在本地进行提交，而不必立即与远程仓库同步。</p>
</li>
</ul>
<p>两者之间的关系可以这样理解：</p>
<ul>
<li>你首先对文件进行修改。</li>
<li>使用 <code>git add</code> 将这些修改的文件添加到 index 中，这时候修改被暂存，准备提交。</li>
<li>使用 <code>git commit</code> 将 index 中的内容以及提交信息一起打包，创建一个新的提交对象。</li>
</ul>
<p>简而言之，index 是准备提交的暂存区，而 commit 是已经提交的快照记录。在进行提交之前，你可以多次修改 index，但是一旦执行了 commit，那么这个提交就是最终的，不可更改的。</p>
<p>请深刻理解这两个概念，有助于帮助您理解后面的内容</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="Git-Checkout-切换分支或恢复工作目录树文件"><a href="#Git-Checkout-切换分支或恢复工作目录树文件" class="headerlink" title="Git Checkout - 切换分支或恢复工作目录树文件"></a>Git Checkout - 切换分支或恢复工作目录树文件</h3><blockquote>
<p>更新工作区中的文件，使其与索引或指定的树中的版本一致。 如果没有给出pathspec，’git checkout’也将更新<code>HEAD</code>，将指定的分支设为当前分支</p>
</blockquote>
<p>使用git checkout来切换分支用的很多，但是没想到还可以用来恢复工作目录，可以理解为：<br>将一个文件从另一个提交中取出，从索引中恢复，所以它不会影响到git add及之后的内容。</p>
<p>具体用法如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<p>注意这里的filename是支持通配符匹配的，比如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复hello.html</span></span><br><span class="line">git checkout -- hello.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复hello.开头的文件</span></span><br><span class="line">git checkout -- <span class="string">&quot;hello.*&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复.html结尾的文件</span></span><br><span class="line">git checkout -- *.html</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意此方法只是将本地文件恢复了，没有对git add 和git commit 产生影响</p>
</blockquote>
<h3 id="Git-reset-重置当前HEAD到指定的状态"><a href="#Git-reset-重置当前HEAD到指定的状态" class="headerlink" title="Git-reset - 重置当前HEAD到指定的状态"></a>Git-reset - 重置当前HEAD到指定的状态</h3><blockquote>
<p>复制条目到索索引或者将当前的分支头(<code>HEAD</code>)设置为某个commit</p>
</blockquote>
<h3 id="Git-revert-还原某些现有提交"><a href="#Git-revert-还原某些现有提交" class="headerlink" title="Git-revert - 还原某些现有提交"></a>Git-revert - 还原某些现有提交</h3><blockquote>
<p>给定一个或多个现有提交，还原相关补丁引入的更改，并记录一些新提交来记录这些更改。 这要求你的工作区是干净的（没有对 HEAD 提交的修改）。</p>
</blockquote>
<h3 id="Git-clean-删除工作目录树中未跟踪的文件"><a href="#Git-clean-删除工作目录树中未跟踪的文件" class="headerlink" title="Git-clean - 删除工作目录树中未跟踪的文件"></a>Git-clean - 删除工作目录树中未跟踪的文件</h3><blockquote>
<p>从当前目录开始，通过递归删除不在版本控制之下的文件来清理工作区。<br>通常情况下，只有 Git 未知的文件会被删除，但如果指定了 <code>-x</code> 选项，被忽略的文件也会被删除。例如，这对删除所有构建产品很有用。<br>如果给出任何可选的<code>&lt;路径规范&gt;…​</code>参数，只有那些与路径规范相匹配的路径会受到影响</p>
</blockquote>
<h2 id="一些常见场景"><a href="#一些常见场景" class="headerlink" title="一些常见场景"></a>一些常见场景</h2><h3 id="本地修改了一些文件-并没有使用-Git-Add-到暂存区-，想放弃修改"><a href="#本地修改了一些文件-并没有使用-Git-Add-到暂存区-，想放弃修改" class="headerlink" title="本地修改了一些文件 (并没有使用 Git Add 到暂存区)，想放弃修改"></a>本地修改了一些文件 (并没有使用 Git Add 到暂存区)，想放弃修改</h3><ul>
<li>  单个文件&#x2F;文件夹：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -- &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>  所有文件&#x2F;文件夹：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout .</span><br></pre></td></tr></table></figure>

<h3 id="本地新增了一些文件-并没有-Git-Add-到暂存区-，想放弃修改"><a href="#本地新增了一些文件-并没有-Git-Add-到暂存区-，想放弃修改" class="headerlink" title="本地新增了一些文件 (并没有 Git Add 到暂存区)，想放弃修改"></a>本地新增了一些文件 (并没有 Git Add 到暂存区)，想放弃修改</h3><ul>
<li>  单个文件&#x2F;文件夹：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">rm</span>  -rf &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>  所有文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git clean -xdf</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除新增的文件，如果文件已经已经 git add 到暂存区，并不会删除！</p>
</blockquote>
<ul>
<li>  所有文件和文件夹：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git clean -xdff</span><br></pre></td></tr></table></figure>

<blockquote>
<p>ps:谨慎操作: 本命令删除新增的文件和文件夹，如果文件已经已经 git add 到暂存区，并不会删除！</p>
</blockquote>
<h3 id="本地修改-新增了一些文件，已经-Git-Add-到暂存区，想放弃修改"><a href="#本地修改-新增了一些文件，已经-Git-Add-到暂存区，想放弃修改" class="headerlink" title="本地修改&#x2F;新增了一些文件，已经 Git Add 到暂存区，想放弃修改"></a>本地修改&#x2F;新增了一些文件，已经 Git Add 到暂存区，想放弃修改</h3><ul>
<li>  单个文件&#x2F;文件夹：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD &lt;filename&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>  所有文件&#x2F;文件夹：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset HEAD .</span><br></pre></td></tr></table></figure>

<h3 id="本地通过-Git-Add-和-Git-Commit-后，想要撤销此次-Commit"><a href="#本地通过-Git-Add-和-Git-Commit-后，想要撤销此次-Commit" class="headerlink" title="本地通过 Git Add 和 Git Commit 后，想要撤销此次 Commit"></a>本地通过 Git Add 和 Git Commit 后，想要撤销此次 Commit</h3><ul>
<li>撤销 commit, 同时保留该 commit 修改：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git reset &lt;commit_id&gt;</span><br></pre></td></tr></table></figure>

<p>这个 <code>commit_id</code> 是你想要回到的那个节点，可以通过 git log 查看，可以只选前 6 位。</p>
<blockquote>
<p>撤销之后，你所做的已经 commit 的修改还在工作区！</p>
</blockquote>
<ul>
<li>  撤销 commit, 同时本地删除该 commit 修改：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git reset --hard &lt;commit_id&gt;</span><br></pre></td></tr></table></figure>

<p>这个 <code>commit_id</code> 是你想要回到的那个节点，可以通过 git log 查看，可以只选前6位</p>
<blockquote>
<p>ps:谨慎操作: 撤销之后，你所做的已经 commit 的修改将会清除，仍在工作区&#x2F;暂存区的代码也将会清除！</p>
</blockquote>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1jaGVja291dC96aF9IQU5TLUNO">Git - git-checkout Documentation<i class="fa fa-external-link-alt"></i></span><br>2.<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1yZXNldC96aF9IQU5TLUNO">Git - git-reset Documentation<i class="fa fa-external-link-alt"></i></span><br>3.<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1yZXZlcnQvemhfSEFOUy1DTg==">Git - git-revert Documentation<i class="fa fa-external-link-alt"></i></span><br>4.<span class="exturl" data-url="aHR0cHM6Ly9naXQtc2NtLmNvbS9kb2NzL2dpdC1jbGVhbi96aF9IQU5TLUNO">Git - git-clean Documentation<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>工具/git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac提示”xxx.app已损坏，无法打开，你应该将它移到废纸篓”的解决方法</title>
    <url>/2021-09-14/Mac%E6%8F%90%E7%A4%BA%E2%80%9Dxxx.app%E5%B7%B2%E6%8D%9F%E5%9D%8F%EF%BC%8C%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80%EF%BC%8C%E4%BD%A0%E5%BA%94%E8%AF%A5%E5%B0%86%E5%AE%83%E7%A7%BB%E5%88%B0%E5%BA%9F%E7%BA%B8%E7%AF%93%E2%80%9D%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95.html</url>
    <content><![CDATA[<p>随着mac系统的升级，对app安全控制越来越严，经常遇到一些非官方渠道安装的app，安装后无法打开的情况，如提示”xxx.app已损坏，无法打开，你应该将它移到废纸篓”，一般情况下，出现该问题是因为软件没有签名，所以被MAC系统禁止运行。可以尝试以下解决方案</p>
<h2 id="老系统：设置允许任何来源下载的App"><a href="#老系统：设置允许任何来源下载的App" class="headerlink" title="老系统：设置允许任何来源下载的App"></a>老系统：设置允许任何来源下载的App</h2><p>比较老的版本系统，可以按以下步骤操作：<br>打开”系统偏好设置 -&gt; 安全与隐私 -&gt; 通用”选项卡，检查是否已经启用了”任何来源”选项。如果没有启用，先点击左下角的小黄锁图标解锁，然后选中”任何来源”。（由于作者mac系统比较新，故此图来源网络）<br><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240424125739-50d88ba9028afaa7fbbfd06d2ff6c107-1713934660.png" alt="image.png"></p>
<p>如果没有”任何来源”的选项，打开终端，输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo spctl --master-disable</span><br></pre></td></tr></table></figure>

<p><code>sudo spctl --master-disable</code> 是一个在macOS操作系统中使用的命令行指令，用于修改系统安全策略控制（System Integrity Protection，简称SIP）的设置。SIP 是一种安全特性，用于保护系统文件和目录免受未授权的修改。</p>
<p><code>sudo spctl --master-disable</code> 的作用如下：</p>
<ol>
<li><strong>禁用 SIP</strong>：这个命令会禁用 SIP 功能，允许用户对系统文件进行修改。默认情况下，macOS 会阻止对某些系统文件和目录的修改，以保护系统安全。</li>
<li><strong>需要管理员权限</strong>：由于这个命令涉及到系统级别的更改，因此需要使用 <code>sudo</code> 来获取管理员权限。</li>
<li><strong>临时禁用</strong>：这个命令的禁用效果是临时的，重启计算机后 SIP 会重新启用。</li>
<li><strong>安全性风险</strong>：禁用 SIP 会降低系统的安全性，因为它允许对系统文件进行修改。因此，只有在确实需要修改系统文件时才应该使用这个命令，并且在完成修改后应立即重新启用 SIP。</li>
<li><strong>重新启用 SIP</strong>：要重新启用 SIP，可以使用 <code>sudo spctl --master-enable</code> 命令。</li>
</ol>
<p>一般来讲到这一步就可以了，但是如果你的系统比较新，你还得继续看下去</p>
<h2 id="新系统：使用xattr-rd命令"><a href="#新系统：使用xattr-rd命令" class="headerlink" title="新系统：使用xattr -rd命令"></a>新系统：使用xattr -rd命令</h2><p>如果你的系统比较新，或者已经打开了通用 &gt; 信任任何来源安装后还是报错，那么在终端里执行以下命令：  </p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> xattr -rd com.apple.quarantine /Applications/xxxx.app</span><br><span class="line"><span class="comment"># 将xxx替换成app的名字，如果你无法准确知道app名称，可以直接将app拖到终端中</span></span><br><span class="line"><span class="comment"># 按提示输入你的电脑密码即可。</span></span><br></pre></td></tr></table></figure>

<p><code>sudo xattr -rd com.apple.quarantine /Applications/xxxx.app</code> 是一个在macOS操作系统中使用的命令行指令，它用于移除文件或应用程序的扩展属性（extended attribute），具体来说，是移除一个名为 <code>com.apple.quarantine</code> 的属性。</p>
<p>这个属性通常在文件或应用程序从互联网下载后被添加，作为macOS的一种安全机制。它提示用户，该文件可能来自不信任的来源，需要确认是否信任并运行该应用程序。这个属性有时也被称为”隔离标记”（quarantine flag）。</p>
<p>命令的各个部分含义如下：</p>
<ol>
<li><code>sudo</code>：以管理员权限执行后面的命令。由于修改文件的扩展属性需要管理员权限，所以这里使用 <code>sudo</code>。</li>
<li><code>xattr</code>：这是用于查看和修改文件扩展属性的命令行工具。</li>
<li><code>-rd</code>：<code>-r</code> 表示递归地移除属性，<code>-d</code> 表示删除指定的属性。</li>
<li><code>com.apple.quarantine</code>：这是要删除的扩展属性的名称。</li>
<li><code>/Applications/xxxx.app</code>：这是要移除隔离标记的应用程序的路径。<code>xxxx.app</code> 应该替换为实际的应用程序名称。</li>
</ol>
<p>使用这个命令后，应用程序将不再显示警告，提示它可能来自互联网。这在安装从可信来源下载的应用程序时很有用，尤其是当用户确信该应用程序是安全的，但macOS仍然显示隔离警告时。</p>
]]></content>
      <categories>
        <category>mac</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>app损坏</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端适配方案</title>
    <url>/2016-11-22/Mobile-terminal-adapter.html</url>
    <content><![CDATA[<blockquote>
<p>移动端越来越被大众所接收，那么相应的技术就越来越向它靠拢，这是一种不可阻挡的趋势，也是万物发展的规律。移动端有三大难题：兼容、调试和适配。这三大问题就好像三座无法逾越的大山阻挡者我们前进的步伐，此文将记录我在项目中关于移动端适配的一些方式，供大家参考</p>
</blockquote>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>移动端适配的根本原因</p>
<ul>
<li>屏幕窗口的大小</li>
<li>设备像素比(devicepixelratio，简称dpr)</li>
</ul>
<p>很多地方介绍设备像素比的，这里就不做具体探讨，简单总结一下：<code>devicepixelratio</code>(设备像素比,即dpr) &#x3D; <code>physicalpixel</code> (物理像素) &#x2F; <code>density-independent pixel</code>(设备独立像素,即dip)。<code>dip</code>或<code>dp</code>,（<code>device independent pixels</code>，设备独立像素）与屏幕密度有关。<code>dip</code>可以用来辅助区分视网膜设备还是非视网膜设备。<br>在<code>JavaScript</code>中，可以通过<code>window.devicePixelRatio</code>获取到当前设备的dpr，但遗憾的是并不是所有的都支持。<br>在CSS中，可以分别针对屏幕大小和设备像素比做适配：<br>针对窗口大小，一般使用媒体查询的<code>only screen</code>、<code>min-width</code>、<code>max-width</code>来适配，也是使用<code>css</code>做适配最常见的一种方式<br>针对像素比，可以使用<code>-webkit-device-pixel-ratio</code>，<code>-webkit-min-device-pixel-ratio</code>和 <code>-webkit-max-device-pixel-ratio</code>属性，同样他的支持度一样不高（其实是很低），所以几乎没有用武之地。</p>
<h2 id="适配方式"><a href="#适配方式" class="headerlink" title="适配方式"></a>适配方式</h2><p>移动端适配主要有两大不同的方向：</p>
<ul>
<li>响应式布局：它是根据屏幕大小自动的调整布局位置（非单纯的缩放），实现适配</li>
<li>自适应布局：它是根据屏幕大小自动的缩放大小，实现适配。</li>
</ul>
<p>两种方式应用的场景不同，各有优劣，本人对自适应布局使用的比较多</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>为了解决这个老大难问题，从最初开始百分比到<code>em</code>，然后到现在<code>rem</code>的使用，都一一体现着技术的滚滚向前。目前是用的最多的也就是<code>rem</code>，他们的区别和有点请自行<code>GG</code>。<br>有了<code>rem</code>这个大杀器，解决问题就变得简单起来，具体请往下看。</p>
<h2 id="纯css实现方式-–-媒体查询"><a href="#纯css实现方式-–-媒体查询" class="headerlink" title="纯css实现方式 – 媒体查询"></a>纯css实现方式 – 媒体查询</h2><p>使用原生<code>css</code>来实现媒体查询是很繁琐的，因为每个媒体查询都要去设定规则。推荐使用<code>css</code>的预编译器(sass,less,stylus)，比较方便。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 定义规则 */</span></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">401px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">24px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">428px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">28</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">481px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">30px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">569px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">35px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">641px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">40px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">751px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">50px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">1080px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">60px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//less 方式调用</span></span><br><span class="line"><span class="variable">@unit:</span> <span class="number">50rem</span>; <span class="comment">//基准单位,根据设计稿来确定。假设：设计稿尺寸为750，那么@unit设置为50rem(1rem=50px更方便下面计算)</span></span><br><span class="line"><span class="selector-class">.warp</span>&#123;with: 100 / @unit&#125; <span class="comment">// 设计稿上元素的尺寸为100px =&gt; .warp&#123;with: 2rem&#125;</span></span><br><span class="line"><span class="selector-class">.warp</span>&#123;with: 10 / @unit&#125; <span class="comment">// 设计稿上元素的尺寸为10px =&gt; .warp&#123;with: 0.2rem&#125;</span></span><br></pre></td></tr></table></figure>

<p>如果这里使用原生<code>css</code>来做，每个尺寸都需要去计算，如果使用预处理器，只需要定义一个变量，计算的事情直接交给它们就行。</p>
<p>这样当页面展示在<code>750</code>的屏幕上时，html的<code>font-size</code>为<code>50px</code>，那么当设置为2rem的元素显示的尺寸就为<code>2*50px=100px</code>。在其他尺寸的设备也会根据媒体查询设置的不同<code>font-size</code>进行自动缩放适配。<br>当然上面也提到了，在<code>css</code>中也是可以获取到<code>devicePixelRatio</code>的值，那么为了更精确在写媒体查询的时候可以把它也加上去，这里就不展开了。</p>
<h2 id="纯css实现方式-–-计算属性"><a href="#纯css实现方式-–-计算属性" class="headerlink" title="纯css实现方式 – 计算属性"></a>纯css实现方式 – 计算属性</h2><p>当然除了媒体查询，还有一种更潮的方式就是利用css3的一些新属性：计算属性和<code>vw</code>属性来实现自动设置根字体大小的目的</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;<span class="attribute">font-size</span>:<span class="built_in">calc</span>(<span class="number">100vw</span>/<span class="number">6.4</span>)&#125; //<span class="number">6.4</span>为psd设计稿尺寸/<span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>这套方案几乎是目前最简洁的方案了，并且<code>calc</code>和<code>vw</code>在移动端的支持也不错哟。</p>
<h2 id="js的实现方式"><a href="#js的实现方式" class="headerlink" title="js的实现方式"></a>js的实现方式</h2><p>js的实现方式，参考了<code>网易</code>和<code>淘宝</code>的实现方式，对他们进行了整合。并且修复了手机端<code>1px问题</code>。</p>
<ul>
<li><code>网易实现方式</code>是通过设备尺寸动态的设置DOM的根元素字体大小，没有考虑devicePixelRatio的因素;</li>
<li><code>淘宝实现方式</code>也是通过设备尺寸动态的设置DOM的根元素字体大小，并且考虑了devicePixelRatio的因素，但淘宝在设置rem时，显得较复杂(不方便写css把px转化成rem);</li>
<li><code>1px问</code>题简单点说就是因为<code>devicePixelRatio</code>的存在，css的1px不等于移动端的1px。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">doc, win, designSize</span>) &#123; <span class="comment">//designSize为设计稿的尺寸(宽)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> docEl = <span class="variable language_">document</span>.<span class="property">documentElement</span>,</span><br><span class="line">        devWidth = docEl.<span class="property">clientWidth</span> &gt; <span class="number">1080</span> ? <span class="number">1080</span> : docEl.<span class="property">clientWidth</span>,</span><br><span class="line">        dpr = devicePixelRatio || <span class="number">1</span>,</span><br><span class="line">        scale = <span class="number">1</span> / dpr,</span><br><span class="line">        width = dpr * devWidth,</span><br><span class="line">        resizeEvt = <span class="string">&#x27;orientationchange&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> ? <span class="string">&#x27;orientationchange&#x27;</span> : <span class="string">&#x27;onresize&#x27;</span>, <span class="comment">//判断横屏和窗口重置</span></span><br><span class="line">        recalc = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> clientWidth = docEl.<span class="property">clientWidth</span>;</span><br><span class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;meta[name=&quot;viewport&quot;]&#x27;</span>)</span><br><span class="line">                    .<span class="title function_">setAttribute</span>(<span class="string">&#x27;content&#x27;</span>,<span class="string">&#x27;width=&#x27;</span> + width +</span><br><span class="line">                                <span class="string">&#x27;, initial-scale=&#x27;</span> + scale +</span><br><span class="line">                                <span class="string">&#x27;, maximum-scale=&#x27;</span> + scale +</span><br><span class="line">                                <span class="string">&#x27;, minimum-scale=&#x27;</span> + scale +</span><br><span class="line">                                <span class="string">&#x27;, user-scalable=no&#x27;</span>);</span><br><span class="line">            docEl.<span class="property">style</span>.<span class="property">fontSize</span> = devWidth / (designSize / <span class="number">100</span>) * dpr + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!doc.<span class="property">addEventListener</span>) <span class="keyword">return</span>;</span><br><span class="line">    win.<span class="title function_">addEventListener</span>(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">    doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, recalc, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">&#125;)(<span class="variable language_">document</span>, <span class="variable language_">window</span>, <span class="number">750</span>);</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>以上三种方案对比，第一种媒体查询是最死板的，基本就是纯体力活。</li>
<li>利用<code>css</code>的计算属性可以很优雅的解决问题，但是在兼容方面来说，目前还不是很完美</li>
<li>并且利用纯<code>css</code>也没考虑<code>devicePixelRatio</code>（像素问题）这个因素。</li>
<li>最后的<code>javascript</code>解决方案则是考虑到了兼容和<code>devicePixelRatio</code>这些因素，但是这里有一个很大的弊端就是：页面在某些情况（性能慢）会经过两次重回（给<code>HTML</code>根设置<code>font-size</code>和设置<code>meta</code>标签时）,在网络或者终端性能不是很好的情况用户体验很不错甚至页面错乱的情况。</li>
</ul>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>rem</tag>
        <tag>mobile</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js开发必看系列之-如何在ES模块中正确使用__dirname和__filename</title>
    <url>/2024-05-26/Node.js%E5%BC%80%E5%8F%91%E5%BF%85%E7%9C%8B%E7%B3%BB%E5%88%97%E4%B9%8B-%E5%A6%82%E4%BD%95%E5%9C%A8ES%E6%A8%A1%E5%9D%97%E4%B8%AD%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8__dirname%E5%92%8C__filename.html</url>
    <content><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>在Node.js中，<code>__dirname</code>是一个非常有用的全局变量，它返回当前正在执行的脚本所在的目录名。然而，随着Node.js对ES模块（ESM）的支持，直接在ES模块中使用<code>__dirname</code>会导致“<code>__dirname is not defined in ES module scope</code>”的错误信息。本文将探讨这一问题，并提供有效的解决方案。</p>
<h2 id="理解ES模块与CommonJS"><a href="#理解ES模块与CommonJS" class="headerlink" title="理解ES模块与CommonJS"></a>理解ES模块与CommonJS</h2><ul>
<li><strong>CommonJS</strong>：主要用于服务器端编程，特别是在Node.js环境中。它通过<code>require()</code>方法加载模块，并通过<code>module.exports</code>或<code>exports</code>导出功能。</li>
<li><strong>ES模块</strong>：由ECMAScript标准定义，旨在提供一个标准化的模块化解决方案，适用于浏览器和服务器端。ES模块通过<code>import</code>和<code>export</code>关键字来管理依赖关系。</li>
</ul>
<p><strong>为什么ES模块不支持<code>__dirname</code>和<code>__filename</code>等CommonJS变量？</strong></p>
<p>ES模块的设计理念与CommonJS不同，它更注重标准化和跨平台兼容性。因此，ES模块并没有直接提供像<code>__dirname</code>这样的变量。相反，ES模块提供了<code>import.meta</code>对象来获取模块的元数据。</p>
<h2 id="在ES模块中使用-dirname和-filename的替代方案"><a href="#在ES模块中使用-dirname和-filename的替代方案" class="headerlink" title="在ES模块中使用__dirname和__filename的替代方案"></a>在ES模块中使用<code>__dirname</code>和<code>__filename</code>的替代方案</h2><p>由于ES模块的设计理念不同，它并不支持<code>__dirname</code>这样的CommonJS变量。但是，ES模块引入了<code>import.meta</code>对象，该对象包含了一些元数据，其中包括<code>url</code>属性，可以用来获取当前模块的URL地址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES模块中获取当前文件的绝对路径</span></span><br><span class="line"><span class="keyword">import</span> &#123; fileURLToPath &#125; <span class="keyword">from</span> <span class="string">&#x27;url&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> __filename = <span class="title function_">fileURLToPath</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>);</span><br><span class="line"><span class="keyword">const</span> __dirname = path.<span class="title function_">dirname</span>(__filename);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前文件所在目录: <span class="subst">$&#123;__dirname&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>这段代码首先使用<code>fileURLToPath</code>将<code>import.meta.url</code>转换成文件路径，然后利用<code>path.dirname()</code>函数获取文件所在的目录名称。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2FwaS9lc20uaHRtbA==">Node.js官方文档 - ES Modules<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9pbXBvcnQubWV0YQ==">MDN Web Docs - import.meta<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2FwaS91cmwuaHRtbA==">Node.js官方文档 - URL Module<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>前端/Nodejs</category>
      </categories>
      <tags>
        <tag>Nodejs</tag>
        <tag>__dirname</tag>
        <tag>__filename</tag>
      </tags>
  </entry>
  <entry>
    <title>Oh My Zsh 自动化：轻松管理多个 Git 用户身份信息</title>
    <url>/2024-04-23/Oh%20My%20Zsh%20%E8%87%AA%E5%8A%A8%E5%8C%96-%E8%BD%BB%E6%9D%BE%E7%AE%A1%E7%90%86%E5%A4%9A%E4%B8%AA%20Git%20%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E4%BF%A1%E6%81%AF.html</url>
    <content><![CDATA[<blockquote>
<p>在 Git 工作流中，有时需要在同一台电脑上针对不同的项目设置不同的用户身份。例如，开发人员可能需要在个人项目和公司项目之间切换，而这两个项目可能需要不同的 Git 用户名和电子邮件地址。Oh My Zsh 提供了强大的自定义功能，允许我们通过编写自定义的 shell 函数来实现这一需求。本文将展示如何使用 Oh My Zsh 的 <code>chpwd</code> 函数来自动设置特定目录及其子目录、孙目录下的 Git 用户配置。</p>
</blockquote>
<h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>假设你对git身份信息和ssh key概念有比较清晰的认识和了解其基础使用，比如git身份信息是用户名和邮箱，在你使用git commit的时候进行记录；而ssh key是一个凭证（分为公钥和私钥），用于远端身份信息验证，和git没有直接关系，也可以用于其他场景使用，比如ssh登录远程主机。</p>
<p>简单说下为什么要使用不同的git身份信息呢？<br>公司项目要求使用规定的name（比如企微名，花名或者公司内部系统的唯一标识等）和email（公司邮箱）作为git提交记录，这样方便团队协作和代码管理，这些信息有一定的敏感性。所有在提交代码到外网的时候必须考虑使用不同的git身份信息来提交。</p>
<p>当然我们可以在每次克隆一个新项目的时候，根据不同需要使用git config –local进行设置，但这明手动操作容易遗忘而且繁琐，所以想到使用脚本来自动化完成。</p>
<h2 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h2><p>本文不是解决：不同的远程仓库（比如github和gitee，公司自建的gitlab等）使用不同的ssh key凭证这个问题，而且为了解决以下问题：</p>
<ul>
<li>不同的远程仓库（比如github和gitee，公司自建的gitlab等）使用不同的git身份信息</li>
</ul>
<p>最终想达到：</p>
<ul>
<li>进入到指定目录及其子目录，孙目录，如果是git仓库，就自动设置对应的git身份信息</li>
</ul>
<h3 id="约定目录结构："><a href="#约定目录结构：" class="headerlink" title="约定目录结构："></a>约定目录结构：</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/Users/developer/teamA         # 根目录</span><br><span class="line">  └── projectA                          # 子目录，团队项目</span><br><span class="line">    └── src                               # 孙目录</span><br><span class="line"></span><br><span class="line">/Users/developer/teamB</span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解决这个问题的方案有很多，下面分享一种使用zsh脚本的方案。首先无论哪一种方案，都需要在全局设置全局git信息：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;name1&quot;</span><br><span class="line">git config --global user.email&quot;email1@email.com&quot;</span><br></pre></td></tr></table></figure>

<h3 id="安装-Oh-My-Zsh"><a href="#安装-Oh-My-Zsh" class="headerlink" title="安装 Oh My Zsh"></a>安装 Oh My Zsh</h3><p>如果尚未安装，通过以下命令安装(已经安装就跳过)：</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</span><br></pre></td></tr></table></figure>

<h3 id="编辑-zshrc-文件"><a href="#编辑-zshrc-文件" class="headerlink" title="编辑 .zshrc 文件"></a>编辑 <code>.zshrc</code> 文件</h3><p><strong>添加 <code>chpwd</code> 函数</strong>：在 <code>.zshrc</code> 最后添加以下函数</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>确保启用了plugin:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 保证这一行不被注释, 括号的内容可能不一样</span><br><span class="line">plugins=(git)</span><br></pre></td></tr></table></figure>

<p>在 <code>.zshrc</code> 最后，添加 <code>chpwd</code> 函数：</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> chpwd() &#123;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">指定目标目录</span></span><br><span class="line">     local root_dir=&quot;/Users/developer/teamA&quot;  # 指定目录</span><br><span class="line">     # 指定该目录要设置的git name信息</span><br><span class="line">     local user_name=&quot;name&quot;</span><br><span class="line">     # 指定该目录要设置的git email信息</span><br><span class="line">     local user_email=&quot;email@email.com&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取到当前目录</span></span><br><span class="line">     local current_dir=&quot;$(pwd -P)&quot;</span><br><span class="line">     # 如果当前目录是否是目标目录，或者是否其子目录，孙目录</span><br><span class="line">     if [[ &quot;$current_dir&quot; == &quot;$root_dir&quot;* ]]; then</span><br><span class="line">      # 输出当前目录，用于调试，后续可删除</span><br><span class="line">         echo &quot;chpwd: $PWD&quot;</span><br><span class="line">         </span><br><span class="line">         if [ -d &quot;$current_dir/.git&quot; ]; then</span><br><span class="line">             git -C &quot;$current_dir&quot; config --local user.name &quot;$user_name&quot;</span><br><span class="line">             git -C &quot;$current_dir&quot; config --local user.email &quot;$user_email&quot;</span><br><span class="line">             echo &quot;chpwd: 成功设置 user.name 和 user.email&quot;</span><br><span class="line">         fi</span><br><span class="line">     fi</span><br><span class="line"> &#125;</span><br><span class="line"><span class="meta prompt_"> # </span><span class="language-bash">执行 chpwd 函数</span></span><br><span class="line"> chpwd</span><br></pre></td></tr></table></figure>

<p>为了让更改生效，需要重新加载 <code>.zshrc</code> 文件。在终端中运行以下命令（或者关闭后重新打开）</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>

<p>ps: 当然你如果使用的其他命令行终端，可以参考这个脚本，根据终端的特点，自行配置</p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><h3 id="在vscode中打开控制台："><a href="#在vscode中打开控制台：" class="headerlink" title="在vscode中打开控制台："></a>在vscode中打开控制台：</h3><p>使用vscode打开项目<code>/Users/developer/teamA/projectA</code>，并且打开控制台，如果发现有成功输出信息，就表示成功了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chpwd: 成功设置 user.name 和 user.email</span><br></pre></td></tr></table></figure>

<p>保险起见，也用<code>git config --local</code>命令查看一下信息有没有正确设置。如果输出的信息是你预期的表示脚本成功了。</p>
<p>同样，使用vscode打开一个不在<code>/Users/developer/teamA</code>目录下的项目，如果没有输出该消息说明符合预期的</p>
<h3 id="测试cd命令"><a href="#测试cd命令" class="headerlink" title="测试cd命令"></a>测试cd命令</h3><p>打开zsh终端，使用cd命令进入<code>/Users/developer/teamA/projectA</code>，如果发现有成功输出信息，就表示成功了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /Users/developer/teamA/projectA</span><br><span class="line"></span><br><span class="line">chpwd: 成功设置 user.name 和 user.email</span><br></pre></td></tr></table></figure>

<p>保险起见，也用<code>git config --local</code>命令查看一下信息有没有正确设置。</p>
<p>同样，进入<code>/Users/developer/teamB/projectB</code>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /Users/developer/teamB/projectB</span><br></pre></td></tr></table></figure>

<p>如果没有输出该消息说明符合预期的</p>
<h2 id="方案限制"><a href="#方案限制" class="headerlink" title="方案限制"></a>方案限制</h2><p>必须限制不同的远程仓库放到对应的目录，如果你现在的本地项目已经分散到不同的目录了，就必须要重新移动一下本地目录或者重新clone一下远程仓库到对应目录</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>通过 Oh My Zsh 的 <code>chpwd</code> 函数，我们能够自动化 Git 用户信息的设置，这不仅提升了工作效率，也减少了配置错误的可能性。本文提供的步骤和测试验证了解决方案的有效性，展示了 Oh My Zsh 在自动化 shell 任务中的实用性。</p>
]]></content>
      <categories>
        <category>git</category>
        <category>oh-my-zsh</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>oh-my-zsh</tag>
        <tag>git多身份</tag>
      </tags>
  </entry>
  <entry>
    <title>实现数字滚动变化以及延伸</title>
    <url>/2016-06-14/animate-number.html</url>
    <content><![CDATA[<blockquote>
<p>利用jquery的插件jquery.animateNumber实现一个简单的数字滚动效果</p>
</blockquote>
<h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ol>
<li>处理数据：因为数据是后端提供，所以有可能格式不是我们想要的，所以也许需要格式化数据；</li>
<li>根据页面设计的效果图（如图），需要把数字字符串拆分成单个数字字符串<br> <img data-src="/images/posts/animateNumber_01.png" alt="animateNumber_01"></li>
<li>每一个数字进行滚动变化</li>
<li>最后，在项目中，我选取了插件<span class="exturl" data-url="aHR0cDovL2Fpc2hlay5naXRodWIuaW8vanF1ZXJ5LWFuaW1hdGVOdW1iZXIv">jquery.animateNumber<i class="fa fa-external-link-alt"></i></span>来实现滚动效果。这个插件的使用方式很简单，在官方有很详尽的文档来展示各个案例，就不一一赘述了。</li>
</ol>
<h2 id="HTML布局"><a href="#HTML布局" class="headerlink" title="HTML布局"></a>HTML布局</h2><p>其中num是后台传入的值,notChangeUint用来标记不进行单位变换的值</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;warp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;net-credit-num&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>平台累积会员人数（人）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">date-num</span>=<span class="string">&quot;123&quot;</span> <span class="attr">class</span>=<span class="string">&quot;animateNumber notChangeUint&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;net-credit-money&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>平台完成投资金额（万元）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">date-num</span>=<span class="string">&quot;91,123,456.00&quot;</span> <span class="attr">class</span>=<span class="string">&quot;animateNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;net-return-money&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>累计已还款金额（万元）<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">date-num</span>=<span class="string">&quot;8,895,678.00&quot;</span> <span class="attr">class</span>=<span class="string">&quot;animateNumber&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="撸JS"><a href="#撸JS" class="headerlink" title="撸JS"></a>撸JS</h2><h3 id="去除逗号"><a href="#去除逗号" class="headerlink" title="去除逗号(,)"></a>去除逗号(,)</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">num = num.<span class="title function_">replace</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>上面这种方法只能去除字符串中的第一个逗号，但是实际数据中可能存在多个逗号，所以需要用到正则全局匹配替换，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;g&#x27;</span>);</span><br><span class="line">num = num.<span class="title function_">replace</span>(reg,<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="转化单位-元–-万元"><a href="#转化单位-元–-万元" class="headerlink" title="转化单位(元–&gt;万元)"></a>转化单位(元–&gt;万元)</h3><p>把金额单位转化为万元，并且保留两位小数，人数不进行转化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!numWarpParent.<span class="title function_">hasClass</span>(<span class="string">&#x27;notChangeUint&#x27;</span>))&#123;</span><br><span class="line">    num = (<span class="title class_">Number</span>(num) / <span class="number">10000</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串拆分为数组"><a href="#字符串拆分为数组" class="headerlink" title="字符串拆分为数组"></a>字符串拆分为数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">numArry = num.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="把数字添加到页面并调用animateNumber的方法"><a href="#把数字添加到页面并调用animateNumber的方法" class="headerlink" title="把数字添加到页面并调用animateNumber的方法"></a>把数字添加到页面并调用animateNumber的方法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numArry.<span class="property">length</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> thisNum = <span class="built_in">parseInt</span>(numArry[i]);</span><br><span class="line">    <span class="keyword">var</span> spanNum;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(thisNum))&#123;</span><br><span class="line">        spanNum = $(<span class="string">&#x27;&lt;span class=&quot;single-num&quot;&gt;&#x27;</span> + numArry[i] +<span class="string">&#x27;&lt;/span&gt;&#x27;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        spanNum = $(<span class="string">&#x27;&lt;span class=&quot;single-point&quot;&gt;.&lt;/span&gt;&#x27;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    numWarpParent.<span class="title function_">append</span>(spanNum);</span><br><span class="line">    thisNumWarp.<span class="title function_">prop</span>(<span class="string">&#x27;number&#x27;</span>, stratNum).<span class="title function_">animateNumber</span>(&#123;</span><br><span class="line">        <span class="attr">number</span>: thisNum</span><br><span class="line">    &#125;, time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="最后代码"><a href="#最后代码" class="headerlink" title="最后代码"></a>最后代码</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;.animateNumber&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = $(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">var</span> totalNum = _this.<span class="title function_">attr</span>(<span class="string">&#x27;date-num&#x27;</span>); <span class="comment">//后台数据储存在date-num上</span></span><br><span class="line">    <span class="title function_">appendNum</span>(totalNum,_this);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">appendNum</span>(<span class="params">num,numWarpParent</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> newNum;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;,&#x27;</span>,<span class="string">&#x27;g&#x27;</span>); <span class="comment">//正则匹配所有逗号</span></span><br><span class="line">    newNum = num.<span class="title function_">replace</span>(reg,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isNaN</span>(num)) newNum = <span class="number">0</span>;  <span class="comment">//容错，当后台传入的参数错误(非数字)时，将只值置为0，以保证页面的正常渲染</span></span><br><span class="line">    <span class="keyword">if</span>(!numWarpParent.<span class="title function_">hasClass</span>(<span class="string">&#x27;notChangeUint&#x27;</span>))&#123; <span class="comment">//判断是否需要转换单位</span></span><br><span class="line">        newNum = (<span class="title class_">Number</span>(newNum) / <span class="number">10000</span>).<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    numArry = newNum.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numArry.<span class="property">length</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> thisNum = numArry[i];</span><br><span class="line">        <span class="keyword">var</span> numWarp;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isNaN</span>(thisNum))&#123; <span class="comment">//判断是否可以转化为数字</span></span><br><span class="line">            numWarp = $(<span class="string">&#x27;&lt;label class=&quot;single-num&quot;&gt;&#x27;</span> + numArry[i] +<span class="string">&#x27;&lt;/label&gt;&#x27;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            numWarp = $(<span class="string">&#x27;&lt;label class=&quot;single-point&quot;&gt;.&lt;/label&gt;&#x27;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        numWarpParent.<span class="title function_">append</span>(numWarp);</span><br><span class="line">        <span class="title function_">isAnimate</span>(thisNum,numWarpParent,i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isAnimate</span>(<span class="params">num,numWarpParent,index</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(num))<span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//调用animate.js插件方法</span></span><br><span class="line">    numWarpParent.<span class="title function_">find</span>(<span class="string">&#x27;label&#x27;</span>).<span class="title function_">eq</span>(index).<span class="title function_">prop</span>(<span class="string">&#x27;number&#x27;</span>, <span class="number">0</span>).<span class="title function_">animateNumber</span>(&#123;</span><br><span class="line">        <span class="attr">number</span>: num</span><br><span class="line">    &#125;, num * <span class="number">100</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.功能模块化，尽量一个方法(函数)只做一件事情<br>2.容错，由于涉及到DOM操作，所以为了保证页面的正常渲染必须有容错处理机制：数据出错不影响整个流程(页面渲染)的畅通</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>animation</tag>
      </tags>
  </entry>
  <entry>
    <title>Babun导致本地SSH-KEY不可用</title>
    <url>/2017-06-15/babun-casue-ssh-key-bad.html</url>
    <content><![CDATA[<blockquote>
<p>Babun是一款集颜值功能于一身的window平台下的命令行工具。它集成了zsh、Cygwin等强大的工具，支持各种配置，并且有丰富的插件支持；并且有丰富的命令和命令提示功能，以及超级棒的历史命令提示。</p>
</blockquote>
<p>ps: 前文有我记录的关于<code>Babun</code>的一些特点，以及使用，请看<span class="exturl" data-url="aHR0cHM6Ly8ydWUuZ2l0aHViLmlvLzIwMTcvMDMvMTUvQmFidW4v">windows平台下超强的cmd工具Babun使用笔记<i class="fa fa-external-link-alt"></i></span>一文</p>
<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>如果你本地先安装了git命令行工具并生成了<code>ssh-key</code>，再安装<code>Babun</code>之后，可能会导致原有的<code>ssh-key</code>不可用，原因：<br>安装<code>Babun</code>会添加全局变量<code>Home</code>，指向<code>Babun</code>安装目录下的<code>.Babun/cymwin/home</code>，因此在使用命令生成key时不会在<code>C:\Users\userName\.ssh</code>目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">Permission denied (publickey).</span><br></pre></td></tr></table></figure>

<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ul>
<li>删掉以前目录（<code>C:\Users\userName\.ssh</code>）下的ssh-key。</li>
<li>生成重新生成<code>ssh key</code>，此时生成的key在<code>.Babun\cymwin\home\userName\.ssh</code>下。</li>
<li>把生成的key映射到<code>C:\Users\userName\.ssh</code>目录。</li>
<li>获取权限</li>
<li>把key关联到相应github账户（此处以github为例）。</li>
<li>测试<code>ssh key</code>是否可用</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions 0670 <span class="keyword">for</span> <span class="string">&#x27;/home/Administrator/.ssh/id_rsa&#x27;</span> are too open.</span><br><span class="line">It is recommended that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br><span class="line">Load key <span class="string">&quot;/home/Administrator/.ssh/id_rsa&quot;</span>: bad permissions</span><br><span class="line">Permission denied (publickey).</span><br></pre></td></tr></table></figure>

<p>当生成key之后，测试是否联通，你会发现还是报错了，提示权限不够，错误信息为<code>Permissions 0670</code></p>
<h4 id="在终端切换到C-Users-userName-ssh目录，执行下面命令"><a href="#在终端切换到C-Users-userName-ssh目录，执行下面命令" class="headerlink" title="在终端切换到C:\Users\userName\.ssh目录，执行下面命令"></a>在终端切换到<code>C:\Users\userName\.ssh</code>目录，执行下面命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /c/Users/userName/.ssh /home/userName/.ssh</span><br></pre></td></tr></table></figure>

<p>此操作会把<code>.Babun\cymwin\home\userName\.ssh</code>目录下的<code>ssh key</code>映射<code>C:\Users\userName\.ssh</code></p>
<h4 id="在终端切换到根目录（-），执行以下命令-一般只执行其中一个"><a href="#在终端切换到根目录（-），执行以下命令-一般只执行其中一个" class="headerlink" title="在终端切换到根目录（~），执行以下命令(一般只执行其中一个)"></a>在终端切换到根目录（~），执行以下命令(一般只执行其中一个)</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> 400 ~/.ssh/id_rsa</span><br><span class="line"><span class="built_in">chmod</span> 600 ~/.ssh/id_rsa</span><br><span class="line"><span class="built_in">chmod</span> 700 ~/.ssh/id_rsa</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">Hi 2ue! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>

<p>参考文章：</p>
<p>1.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JhYnVuL0JhYnVuL2lzc3Vlcy8zMjc=">https://github.com/Babun/Babun/issues/327<i class="fa fa-external-link-alt"></i></span><br>2.<span class="exturl" data-url="aHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy85MjcwNzM0L3NzaC1wZXJtaXNzaW9ucy1hcmUtdG9vLW9wZW4tZXJyb3I=">http://stackoverflow.com/questions/9270734/ssh-permissions-are-too-open-error<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Babun</tag>
        <tag>cmd</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>windows平台下超强的cmd工具Babun使用笔记</title>
    <url>/2017-03-15/babun.html</url>
    <content><![CDATA[<blockquote>
<p>Babun是一款集颜值功能于一身的window平台下的命令行工具。它集成了zsh、Cygwin等强大的工具，支持各种配置，并且有丰富的插件支持；并且有丰富的命令和命令提示功能，以及超级棒的历史命令提示。</p>
</blockquote>
<h2 id="Babun"><a href="#Babun" class="headerlink" title="Babun"></a><span class="exturl" data-url="aHR0cHM6Ly9iYWJ1bi5naXRodWIuaW8v">Babun<i class="fa fa-external-link-alt"></i></span></h2><p>官方贴出了Babun的十大特性</p>
<ul>
<li>Pre-configured Cygwin with a lot of addons： 预置大量的Cygwin插件</li>
<li>Silent command-line installer, no admin rights required：静默命令行安装，不需要管理员权限</li>
<li>pact - advanced package manager (like apt-get or yum)： 支持pact高级包管理器，类似于apt-get、yum等</li>
<li>xTerm-256 compatible console： xterm-256兼容控制台</li>
<li>HTTP(s) proxying support： HTTP(s) 代理支持</li>
<li>Plugin-oriented architecture： 插件体系，可以安装丰富的插件</li>
<li>Pre-configured git and shell： 预置git和shell，支持自定义配置</li>
<li>Integrated oh-my-zsh： 集成了zsh</li>
<li>Auto update feature： 自动检测最新版本</li>
<li>“Open Babun Here” context menu entry： 支持右键菜单“此处打开Babun”</li>
</ul>
<p>当然对于上面这些特性，我不得不补充一点，那就是它强大的命令提示功能，能从根据你的输入匹配历史输入，狠棒！</p>
<h3 id="Cygwin"><a href="#Cygwin" class="headerlink" title="Cygwin"></a>Cygwin</h3><p><code>Babun</code>的核心包括一个预配置的<code>Cygwin</code>。<code>cygwin</code>是一个非常好的工具，但有很多使用技巧，使你能够节省大量的时间。<code>Babun</code>解决了很多问题，它里面包含了很多重要的软件包，是你能够第一时间能够使用它们</p>
<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p><code>Babun</code>的<code>shell</code>通过调整，已达到最佳的用户体验，<code>Babun</code>有两个配置之后马上使用的<code>shell</code>(默认使用<code>zsh</code>，可以使用<code>bash</code>或者<code>zsh</code>命令切换到对应的模式)，<code>Babun</code>的<code>shell</code>具有以下的特点:</p>
<ul>
<li>语法高亮</li>
<li>具有unix的工具</li>
<li>软件开发工具</li>
<li>git-语义提示</li>
<li>自定义脚本和别名</li>
<li>…</li>
</ul>
<h3 id="Console"><a href="#Console" class="headerlink" title="Console"></a>Console</h3><p><code>Babun</code>支持<code>HTTP</code>代理，只需添加地址和<code>HTTP</code>代理服务器的凭据。<code>Babunrc</code>文件所在文件夹执行源<code>Babunrc</code>启用HTTP代理。目前还不支持<code>SOCKS</code>代理。</p>
<h3 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h3><p>Babun提供多种方便的工具和脚本，是你的开发工作更轻松，具有的功能如下:</p>
<ul>
<li>编程语言(python,Perl, etc等)</li>
<li>git(各种各样的别名调整)</li>
<li>UNIX工具((grep, wget, curl, etc)</li>
<li>vcs (svn, git)</li>
<li>oh-my-zsh</li>
<li>自定义脚本(pbcopy, pbpaste, Babun, etc)</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="默认安装"><a href="#默认安装" class="headerlink" title="默认安装"></a>默认安装</h3><p>双击<code>install.bat</code>脚本，<code>Babun</code>使用默认安装位置<code>C:\Users\userName\.Babun</code>，安装好的<code>Babun</code>会在<code>C:\Users\userName\</code>下；<br>当然也可以指定安装位置</p>
<h3 id="自定义安装"><a href="#自定义安装" class="headerlink" title="自定义安装"></a>自定义安装</h3><p>通过<code>cmd</code>命令行在执行<code>install.bat</code>时指定参数<code>/t</code>或<code>/target</code>指定安装的目录。<br>执行：Babun.bat &#x2F;t install-dir</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Babun.bat /t c:\Babun</span><br></pre></td></tr></table></figure>

<p>安装好之后会在<code>d:\Babun</code>目录下生成一个<code>.Babun</code>的目录，<code>Babun</code>所有文件都在这个目录中。注意安装目录最好不要有空格，这是<code>cygwin</code>要求的</p>
<p>启动<code>Babun</code>默认是在’%userprofile%.Babun\cygwin\home\username’</p>
<h2 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h2><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p><code>Babun</code>内置了<code>Python</code>、<code>Perl</code>等解释器。<code>cygwin</code>自带的<code>python</code>没有<code>pip</code>，需手动安装。<br>直接执行下面这个命令就好了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/get-pip.py -O - | python</span><br></pre></td></tr></table></figure>

<p>有了pip就可以自由的安装诸如<code>ipython</code>之类的东西，还有包罗万象的类库。</p>
<h3 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h3><p><code>Babun</code>默认是安装了<code>oh-my-zsh</code>的，这里可以根据自身情况安装一些插件。具体可参考<a href="http://blog.csdn.net/czg13548930186/article/details/72858289">利用<code>oh-my-zsh</code>打造你的超级终端一文</a>;</p>
<h3 id="包管理器使用"><a href="#包管理器使用" class="headerlink" title="包管理器使用"></a>包管理器使用</h3><p><code>Babun</code>提供一个叫<code>pact</code>包管理工具，类似于<code>linux</code>上面的<code>apt-get</code>或<code>yum</code>的包管理工具</p>
<h2 id="配置别名（alias）"><a href="#配置别名（alias）" class="headerlink" title="配置别名（alias）"></a>配置别名（alias）</h2><p>可以在<code>.Babun\cygwin\home\username</code>目录下配置对应工具的别名，而并不仅限于<code>git-bash</code>。<br>当然记忆别名其实也是体力活，我的想法是对一些常用的命令、经常手滑手速过快打错的命令、复杂的命令配置一些别名，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gt = git</span><br><span class="line">gti = git</span><br><span class="line">n = npm</span><br><span class="line">nr = npm run dev</span><br><span class="line">gtlg = git <span class="built_in">log</span> --color --graph --pretty=format:<span class="string">&#x27;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#x27;</span> --abbrev-commit --<span class="built_in">date</span>=relative</span><br><span class="line">...等等</span><br></pre></td></tr></table></figure>

<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h3 id="本地SSH-KEY不可用"><a href="#本地SSH-KEY不可用" class="headerlink" title="本地SSH-KEY不可用"></a>本地SSH-KEY不可用</h3><p>查看我记录的<span class="exturl" data-url="aHR0cHM6Ly8ydWUuZ2l0aHViLmlvLzIwMTcvMDYvMTUvYmFidW4tY2FzdWUtc3NoLWtleS1iYWQv">Babun导致本地SSH-KEY不可用<i class="fa fa-external-link-alt"></i></span>一文</p>
<h3 id="中文乱码问题"><a href="#中文乱码问题" class="headerlink" title="中文乱码问题"></a>中文乱码问题</h3><p>找了很多解决方案，都不能完美的解决问题，最后还是回归原始：不解决！！！</p>
<h3 id="锁定文件夹"><a href="#锁定文件夹" class="headerlink" title="锁定文件夹"></a>锁定文件夹</h3><p>在使用<code>Babun</code>时（比如此时进入了<code>a</code>目录），它会锁定文件夹<code>a</code>目录，导致你可能无法做一些危险操作。必须关闭<code>Babun</code>后才能解锁进程</p>
<p>参考文章：</p>
<ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5tYW1pY29kZS5jb20vaW5mby1kZXRhaWwtMTY1MzM1My5odG1s">windows下的命令行工具Babun<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>Babun</tag>
        <tag>cmd</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>风继续吹</title>
    <url>/2017-11-29/blow-forever.html</url>
    <content><![CDATA[<blockquote>
<p>最近在某些比较看重的事情上，处理的很失败，感觉整个心态都发生了变化。下班独行的那段路上，突然惊醒自己也许需要做出一些改变，晚饭后静静的思考了一阵：似乎勇往前行才是我最需需要的改变。古语有云：走自己的路，让别人去说吧。是的，生活需要你不断踽踽独行，活在他人的世界里是可怕的，特别他（她）还是陌生人。随手记录一些句子，它们是我最近的心态和生活的写照，也以此鞭策自己砥砺前行。</p>
</blockquote>
<hr>
<p>时间不会因你沮丧而停滞不前<br>生活不会因你懊恼而雨过天晴</p>
<p>如风，继续吹<br>吹来往日的欢歌笑语<br>吹来远方的殷殷思念<br>化作雨露滋润心田</p>
<p>如风，继续吹<br>随风飘荡去远方<br>随风逐浪勇往前<br>风不止浪不息</p>
<p>如风，继续吹<br>时而狂乱，掠过天空大地，高山河流<br>时而低喃，轻抚绿茵花朵，平原盆谷<br>最后都消散在其它风里</p>
<p>然后<br>其它风，继续吹</p>
<p>—-&lt; 谨鼓励我砥砺前行 &gt;</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>H5的Notification特性 - Web的桌面通知功能</title>
    <url>/2017-10-16/desktop-notification.html</url>
    <content><![CDATA[<blockquote>
<p>目前，<code>web</code>网页使用桌面通知功能的越来越多，包括微博，腾讯视频等大厂站，桌面通知功能是<code>H5</code>的一个<code>API</code> - <code>Notifications</code>。它允许网页或应用程序可以发出通知，通知将被显示在页面之外的[[系统]]层面上（通常使用操作[[系统]]的标准通知机制，但是在不同的平台和浏览器上的表现会有差异），这样即使应用程序空闲或在后台也可以向用户发送信息。</p>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p><code>Notifications</code>的诞生简化了网站或者应用与用户之间的沟通成本（时间成本和开发成本），增强用户黏性（减少了用户离开应用的可能）。传统的通知方式，大多是通过站内信（消息），邮件，短信等方式，它们通常需要刷新（跳转）页面、离开应用打开其他应用或终端来查看消息；而桌面通知功能大大的简化了这个过程，消息的传递基本不消耗时间（如果不设置<code>setTimeout</code>，用时基本不会超过<code>1s</code>），并且用户不需要离开应用，这都带来了极大的方便。可以预见，<code>Notifications</code>将会在很多网页或应用中被大量使用。当然<code>Notifications</code>也具有它的局限性：无法存档、即看即毁<br>那么，这个功能到底能用在哪些场景呢？只能说能应用的场景很多：</p>
<ul>
<li>社交类网站</li>
<li>[[资讯]]类网站</li>
<li>网页版邮件服务</li>
<li>即时通知类网站</li>
<li>…</li>
</ul>
<p>举个例子，当你打开微博页面，你可能会看到（使用新版浏览器）如下图的通知：<br><img data-src="/images/posts/desktop-notification1.png" alt="desktop-notification1"></p>
<p>这就是网站使用了桌面通知功能，当你选择允许，那么当网站有推送消息或者你登陆账号有新的消息将会在桌面的右下角出现一个小弹窗通知，如下：<br><img data-src="/images/posts/desktop-notification2.png" alt="desktop-notification2"></p>
<p>感觉有点酷酷的！！！</p>
<h2 id="用户权限-Notification-permission"><a href="#用户权限-Notification-permission" class="headerlink" title="用户权限 - Notification.permission"></a>用户权限 - Notification.permission</h2><p><code>Notification.permission</code>是一个静态方法，可以获取用户当前的通知权限状态，返回一个<code>String</code>，可以根据返回值判断用户是否授予了通知权限。返回值有三种情况：</p>
<ul>
<li>default<ul>
<li>用户还未被询问是否授权，所以通知不会被显示。</li>
</ul>
</li>
<li>granted<ul>
<li>表示之前已经询问过用户，并且用户已经授予了显示通知的权限。</li>
</ul>
</li>
<li>denied<ul>
<li>用户已经明确的拒绝了显示通知的权限。</li>
</ul>
</li>
</ul>
<p>当值为<code>default</code>或者<code>denied</code>时都不会显示通知消息，只有明确的被设置成<code>granted</code>才会显示通知消息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> permission = <span class="title class_">Notification</span>.<span class="property">permission</span>;</span><br><span class="line"><span class="keyword">if</span>(permission === <span class="string">&#x27;granted&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;已经授权通知，可以进行你的通知啦！&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户还未授权，请先授权！&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="请求权限-Notification-requestPermission-CALLBACK"><a href="#请求权限-Notification-requestPermission-CALLBACK" class="headerlink" title="请求权限 - Notification.requestPermission(CALLBACK)"></a>请求权限 - Notification.requestPermission(CALLBACK)</h2><p>应用发送通知之前必须要取得发送通知的权限，才能成功进行通知。<code>Notification.requestPermission(CALLBACK)</code>是请求获取权限的方法（有点类似<code>javascript</code>的<code>confirm</code>弹窗窗），允许传入一个回调，回调会返回用户选择的何种权限，返回两个值，<code>granted</code>代表允许，<code>denied</code>代表拒绝。并且<code>Notification.requestPermission()</code>支持<code>then</code>方式的链式调用，也就意味着可以异步调用它。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Notification</span>.<span class="title function_">requestPermission</span>(<span class="keyword">function</span> (<span class="params">permission</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户是否允许通知： &#x27;</span>,permission === <span class="string">&#x27;granted&#x27;</span> ? <span class="string">&#x27;允许&#x27;</span> : <span class="string">&#x27;拒绝&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//两种方式是等价的</span></span><br><span class="line"><span class="title class_">Notification</span>.<span class="title function_">requestPermission</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">permission</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户是否允许通知： &#x27;</span>,permission === <span class="string">&#x27;granted&#x27;</span> ? <span class="string">&#x27;允许&#x27;</span> : <span class="string">&#x27;拒绝&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="创建通知-new-Notification-TITLE-OPTIONS"><a href="#创建通知-new-Notification-TITLE-OPTIONS" class="headerlink" title="创建通知 - new Notification(TITLE, OPTIONS)"></a>创建通知 - new Notification(TITLE, OPTIONS)</h2><p><code>new Notification(TITLE, OPTIONS)</code>方法创建可以创建一个通知实例，允许参入参数两个参数<code>TITLE</code>和<code>OPTIONS</code>。注意默认情况下（实际可以通过<code>OPTIONS</code>中的<code>timestamp</code>参数控制）一旦通知实例被创建出来，它会立即被显示出来。</p>
<h3 id="TITLE参数"><a href="#TITLE参数" class="headerlink" title="TITLE参数"></a>TITLE参数</h3><p><code>TITLE</code>表示通知的标题。必须参数，允许数字、字符串和空</p>
<h3 id="OPTIONS参数"><a href="#OPTIONS参数" class="headerlink" title="OPTIONS参数"></a>OPTIONS参数</h3><p><code>OPTIONS</code>是非必须参数，必须为一个对象，它包含：<br>ps: 部分参数在某些浏览器可能会不生效，建议使用最新版的谷歌浏览器。以下某些内容从<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL25vdGlmaWNhdGlvbg==">Notification-MDN-EN<i class="fa fa-external-link-alt"></i></span>结合谷歌翻译得来，很有可能翻译不准确，如有，请提出。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">//通知显示正文。非必须，默认为空</span></span><br><span class="line">    body<span class="punctuation">:</span> &#x27;你的好友XX上线了！&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//通知显示正文的图片地址。非必须，默认为空</span></span><br><span class="line">    image<span class="punctuation">:</span> &#x27;imgae url&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//通知左侧图标。非必须，默认为空</span></span><br><span class="line">    icon<span class="punctuation">:</span> &#x27;imgae url&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//通知的分类标记（ID）。非必须，默认为空</span></span><br><span class="line">    tag<span class="punctuation">:</span> &#x27;test&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//通知相关联的数据，通常用于方法的回调，传参。非必须，默认为空</span></span><br><span class="line">    data<span class="punctuation">:</span> &#x27;可以是任意数据类型&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//通知显示延迟的时间。非必须，默认通知实例创建完成就显示</span></span><br><span class="line">    timestamp<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//通知主体内容的水平展示顺序，有点类似direction属性。非必须，默认值是auto, 可以是ltr或rtl</span></span><br><span class="line">    dir<span class="punctuation">:</span> &#x27;auto&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//当没有足够的空间来显示通知本身时，用于表示通知的图像的URL。非必须，默认为空</span></span><br><span class="line">    badge<span class="punctuation">:</span> &#x27;xxx&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//通知的语言。非必须默认为空</span></span><br><span class="line">    lang<span class="punctuation">:</span> &#x27;&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//通知显示时，设备的振动模式。非必须，默认为空</span></span><br><span class="line">    vibrate<span class="punctuation">:</span> <span class="punctuation">[</span><span class="number">200</span><span class="punctuation">,</span> <span class="number">100</span><span class="punctuation">,</span> <span class="number">200</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//新通知出现是否覆盖旧的通知，覆盖（true）则永远只显示一条通知，不覆盖（false）则会多条通知重叠。非必须，默认为true</span></span><br><span class="line">    renotify<span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//通知是否静音。非必须，默认为false，表示无声</span></span><br><span class="line">    silent<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//通知声源文件地址。非必须，默认为空</span></span><br><span class="line">    sound<span class="punctuation">:</span> &#x27;mp3&#x27;<span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//是否不在屏幕上显示通知信息。非必须，默认为false表示要显示</span></span><br><span class="line">    noscreen<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//指定通知是否应该粘滞性，即不容易被用户清理。非必须，默认false表示不具粘滞性</span></span><br><span class="line">    sticky<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">//指定通知是否保持活性，知道用户点击或关闭。非必须，默认为false</span></span><br><span class="line">    requireInteraction<span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件及事件钩子"><a href="#事件及事件钩子" class="headerlink" title="事件及事件钩子"></a>事件及事件钩子</h3><p>当通知被创建成功后：</p>
<ul>
<li>通知实例具有一个静态方法可以用来关闭通知</li>
<li>通知实例具有四个事件钩子，来跟踪通知当前的状态。这些事件可以通过事件处理跟踪<code>onshow</code>、<code>onclick</code>、<code>onclose</code>和<code>onerror</code>。因为<code>Notification</code>同样继承自<code>EventTarget</code>，因此可以对它调用<code>addEventListener()</code>方法。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="keyword">new</span> <span class="title class_">Notification</span>(<span class="string">&#x27;XX网站消息通知&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;你的朋友有新状态啦，快去围观吧！&#x27;</span>,</span><br><span class="line">    <span class="attr">tag</span>: <span class="string">&#x27;2ue&#x27;</span>,</span><br><span class="line">    <span class="attr">icon</span>: <span class="string">&#x27;https://2ue.github.io/images/common/avatar.png&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">url</span>: <span class="string">&#x27;https://2ue.github.io&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">timestamp</span>: <span class="number">3000</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">n.<span class="property">onshow</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通知显示了！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">n.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="comment">//可以直接通过实例的方式获取data内自定义的数据</span></span><br><span class="line">    <span class="comment">//也可以通过访问回调参数e来获取data的数据</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">open</span>(n.<span class="property">data</span>.<span class="property">url</span>, <span class="string">&#x27;_blank&#x27;</span>);</span><br><span class="line">    n.<span class="title function_">close</span>();</span><br><span class="line">&#125;</span><br><span class="line">n.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你墙壁了我！！！&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">n.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错了，小伙子在检查一下吧&#x27;</span>);</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>写一个简单的例子，可以打开页面体验一下，建议用最新版谷歌浏览器打开~ <span class="exturl" data-url="aHR0cHM6Ly9jb2RlcGVuLmlvLzJ1ZS9wZW4vcllZendC">Notification.js<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NotificationInstance</span> = <span class="title class_">Notification</span> || <span class="variable language_">window</span>.<span class="property">Notification</span>;</span><br><span class="line"><span class="keyword">if</span> (!!<span class="title class_">NotificationInstance</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> permissionNow = <span class="title class_">NotificationInstance</span>.<span class="property">permission</span>;</span><br><span class="line">    <span class="keyword">if</span> (permissionNow === <span class="string">&#x27;granted&#x27;</span>) &#123;<span class="comment">//允许通知</span></span><br><span class="line">        <span class="title class_">CreatNotification</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (permissionNow === <span class="string">&#x27;denied&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户拒绝了你!!!&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">setPermission</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setPermission</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">//请求获取通知权限</span></span><br><span class="line">        <span class="title class_">NotificationInstance</span>.<span class="title function_">requestPermission</span>(<span class="keyword">function</span> (<span class="params">PERMISSION</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable constant_">PERMISSION</span> === <span class="string">&#x27;granted&#x27;</span>) &#123;</span><br><span class="line">                <span class="title class_">CreatNotification</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;用户无情残忍的拒绝了你!!!&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">CreatNotification</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> n = <span class="keyword">new</span> <span class="title class_">NotificationInstance</span>(<span class="string">&#x27;XX网站消息通知&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">body</span>: <span class="string">&#x27;你的朋友有新状态啦，快去围观吧！&#x27;</span>,</span><br><span class="line">            <span class="attr">tag</span>: <span class="string">&#x27;2ue&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;https://2ue.github.io/images/common/avatar.png&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">url</span>: <span class="string">&#x27;https://2ue.github.io&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        n.<span class="property">onshow</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;通知显示了！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        n.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">            <span class="comment">//可以直接通过实例的方式获取data内自定义的数据</span></span><br><span class="line">            <span class="comment">//也可以通过访问回调参数e来获取data的数据</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="title function_">open</span>(n.<span class="property">data</span>.<span class="property">url</span>, <span class="string">&#x27;_blank&#x27;</span>);</span><br><span class="line">            n.<span class="title function_">close</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        n.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;你墙壁了我！！！&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        n.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;出错了，小伙子在检查一下吧&#x27;</span>);</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            n.<span class="title function_">close</span>();</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="兼容"><a href="#兼容" class="headerlink" title="兼容"></a>兼容</h2><iframe data-feature="notifications" src="https://caniuse.bitsofco.de/embed/index.html?feat=notifications&periods=current&accessible-colours=false" frameborder="0" width="100%" height="400px"></iframe>

<h2 id="待整理-专题-模型驱动-参考-参考"><a href="#待整理-专题-模型驱动-参考-参考" class="headerlink" title="[[待整理&#x2F;专题&#x2F;模型驱动&#x2F;参考|参考]]"></a>[[待整理&#x2F;专题&#x2F;模型驱动&#x2F;参考|参考]]</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL25vdGlmaWNhdGlvbg==">Notification-MDN-EN<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL25vdGlmaWNhdGlvbg==">Notification-MDN-CN<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>H5</category>
      </categories>
      <tags>
        <tag>Notification</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>前端测试探索</title>
    <url>/2017-10-10/fed-test.html</url>
    <content><![CDATA[<blockquote>
<p>前端测试是保证代码质量以及程序稳定的一种可靠方式，同时也从代码层面解决了自测难，自测烦等前端测试综合症。当然在前端开发引入测试环节无疑会增加人力和时间成本，如果最终产生的结果和增加的成本能够两两抵消产生正面效应，那么有必要考虑把测试环节加入到团队的规划中。但是在实际开发过程中，测试用例更多的被用于开源项目中，在大部分公司的生成项目很少使用维护测试用例，其根本原因是不纯粹的生产环境导致维护测试用例变得困难，而目的性很强的开源项目则更纯粹，所以前端测试的发展任重而道远。</p>
</blockquote>
<p>Ps：本次更多的是讲述概念性的东西，代码性的具体实例不做过多实践</p>
<hr>
<h2 id="GUI-Graphical-User-Interface-软件测试"><a href="#GUI-Graphical-User-Interface-软件测试" class="headerlink" title="GUI(Graphical User Interface)软件测试"></a>GUI(Graphical User Interface)软件测试</h2><blockquote>
<p>前端测试不同于后端测试，因为除了一般的逻辑测试以外，由于存在界面交互，所以涉及到模拟用户行为达到测试的目的。由此引入了一个概念：GUI(Graphical User Interface)软件测试，也就是图形用户界面软件测试</p>
</blockquote>
<h2 id="TDD-Test-Driven-Development-BDD-Behaviour-Driven-Development"><a href="#TDD-Test-Driven-Development-BDD-Behaviour-Driven-Development" class="headerlink" title="TDD(Test Driven Development) &amp; BDD(Behaviour Driven Development)"></a>TDD(Test Driven Development) &amp; BDD(Behaviour Driven Development)</h2><p><code>TDD</code>很明显的意思是测试驱动开发，也就是说我们可以从测试的角度来检验整个项目。大概的流程是先针对每个功能点抽象出接口代码，然后编写单元测试代码，接下来实现接口，运行单元测试代码，循环此过程，直到整个单元测试都通过。<br><code>TDD</code>的好处自然不用多说，它能让你减少程序逻辑方面的错误，尽可能的减少项目中的<code>bug</code>，开始接触编程的时候我们大都有过这样的体验，可能你觉得完成得很完美，自我感觉良好，但是实际测试或者应用的时候才发现里面可能存在一堆bug，或者存在设计问题，或者更严重的逻辑问题，而<code>TDD</code>正好可以帮助我们尽量减少类似事件的发生。<br>当然，并不是所有的项目都适合<code>TDD</code>，要使用<code>TDD</code>,我认为必须至少具备以下两个条件</p>
<ul>
<li>项目的业务逻辑很清晰，并且程序员对开发逻辑很清晰</li>
<li>项目模块的复杂度和依赖度不高。如果复杂度高和依赖度高会导致在最开始拆分单元的时候造成很大的困扰，有可能根本不能顺利拆分</li>
</ul>
<p><code>BDD</code>行为驱动开发，这里的行为不是指程序员的行为，而是指业务（程序）的逻辑行为，实际上<code>BDD</code>可以看作是对<code>TDD</code>的一种补充，当然你也可以把它看作<code>TDD</code>的一个分支，因为在<code>TDD</code>中，我们并不能完全保证根据设计所编写的测试就是用户所期望的功能</p>
<h2 id="如何实现自动化"><a href="#如何实现自动化" class="headerlink" title="如何实现自动化"></a>如何实现自动化</h2><p>说一千道一万，新环节的引入必然带来成本的增加，那么我们如何控制增加的成本在合理范围内？很自然的我们想到了使用工具来实现自动化的测试，让机器帮我完成复杂的交互和测试，并自动监控返回错误报警，为我们手动排除问题提供参考</p>
<h2 id="可覆盖的测试"><a href="#可覆盖的测试" class="headerlink" title="可覆盖的测试"></a>可覆盖的测试</h2><blockquote>
<p>那到底前端在开发中需要测试哪些东西？在目前技术又可以实现那些测试？</p>
</blockquote>
<ul>
<li>函数功能测试<ul>
<li>全局变量</li>
<li>公共方法</li>
</ul>
</li>
<li>界面&amp;交互测试<ul>
<li>事件交互</li>
<li>数据输入交互</li>
<li>特征检测<ul>
<li>设计图还原度</li>
<li>图片大小</li>
<li>…</li>
</ul>
</li>
<li>特殊情况<ul>
<li>自适应和响应式测试</li>
<li>浏览器兼容</li>
<li>多端测试</li>
<li>…</li>
</ul>
</li>
</ul>
</li>
<li>网络请求测试<ul>
<li>数据库访问</li>
<li>模拟用户登陆等</li>
<li>ajax请求</li>
</ul>
</li>
<li>直观的错误信息展示<ul>
<li>网页表格</li>
<li>截图</li>
</ul>
</li>
<li>性能测试</li>
<li>回归测试</li>
<li>自动化<ul>
<li>测试用例数据自动化 - 结合mockjs打造假数据</li>
<li>测试用例自动化创建 - 通过读取源码中的注释来自动生成测试用例？</li>
</ul>
</li>
</ul>
<h2 id="业务逻辑-业务代码-测试用例的关系"><a href="#业务逻辑-业务代码-测试用例的关系" class="headerlink" title="业务逻辑&#x2F;业务代码&#x2F;测试用例的关系"></a>业务逻辑&#x2F;业务代码&#x2F;测试用例的关系</h2><p>业务代码的颗粒度与测试用例的复杂度成反比：颗粒度划分越多（细），复杂度越低<br>业务代码的量与测试用例的量成正比</p>
<h2 id="Good"><a href="#Good" class="headerlink" title="Good"></a>Good</h2><ul>
<li>相对于等待问题产生，更倾向于避免可能的问题</li>
<li>有利于形成团队代码规范，对团队未来成员的扩充是一个很好的约束规范</li>
<li>对输出的产品有进一步的质量保证</li>
</ul>
<h2 id="Bad"><a href="#Bad" class="headerlink" title="Bad"></a>Bad</h2><ul>
<li>增加维护测试用例本（时间和人力）</li>
<li>增加编码复杂度（需要靠如何更友好的进行测试），对团队人员的编码要求提高了</li>
<li>也许会增加学习成本（并不一定所有人都会写测试用例）</li>
<li>需要把控测试用例的合理性、覆盖率、通过率</li>
</ul>
<h2 id="测试框架"><a href="#测试框架" class="headerlink" title="测试框架"></a>测试框架</h2><h3 id="PhantomJS-CasperJS"><a href="#PhantomJS-CasperJS" class="headerlink" title="PhantomJS&#x2F;CasperJS"></a><span class="exturl" data-url="aHR0cDovL3BoYW50b21qcy5vcmcv">PhantomJS<i class="fa fa-external-link-alt"></i></span>&#x2F;<span class="exturl" data-url="aHR0cDovL2Nhc3BlcmpzLm9yZy8=">CasperJS<i class="fa fa-external-link-alt"></i></span></h3><p><code>PhantomJS</code>是一个服务器端的支持<code>JavaScript API</code>的<code>WebKit</code>。其支持各种Web标准：<code>DOM</code>处理, <code>CSS</code>选择器, <code>JSON</code>, <code>Canvas</code>和<code>SVG</code>。对于<code>web</code>测试、界面、网络捕获、页面自动化访问等等方面。当启动的时候会在内存在开启一个无界面浏览器，以此模拟用户各种操作，可以对界面截图<br><code>Casperjs</code>是对<code>PhantomJS</code>的封装，提供了更加易用的<code>API</code>, 增强了测试等方面的支持</p>
<h3 id="PhantomCSS"><a href="#PhantomCSS" class="headerlink" title="PhantomCSS"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0h1ZGRsZS9QaGFudG9tQ1NT">PhantomCSS<i class="fa fa-external-link-alt"></i></span></h3><p>像素对比工具，基于<code>PhantomJs</code>开发，结合了<code>Casperjs</code>截图和<code>ResembleJs</code>图像对比分析</p>
<h3 id="Page-monitor"><a href="#Page-monitor" class="headerlink" title="Page-monitor"></a><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2ZvdWJlci9wYWdlLW1vbml0b3I=">Page-monitor<i class="fa fa-external-link-alt"></i></span></h3><p><code>DOM</code>结构对比工具，基于<code>PhantomJS</code>开发，根据<code>DOM</code>结构与样式的对比来对比整个页面的变动部分</p>
<h3 id="BackstopJS"><a href="#BackstopJS" class="headerlink" title="BackstopJS"></a><span class="exturl" data-url="aHR0cHM6Ly9nYXJyaXMuZ2l0aHViLmlvL0JhY2tzdG9wSlM=">BackstopJS<i class="fa fa-external-link-alt"></i></span></h3><p>主要通过<code>PhantomJS</code>、<code>capserJS</code>等工具在不同尺寸下截图，然后根据<code>resemberJS</code>进行像素比对判断是否正常，以实现响应式测试</p>
<h3 id="Mocha-Chai"><a href="#Mocha-Chai" class="headerlink" title="Mocha + Chai"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuenlidWx1by5jb20vbWRlZGl0b3IjOTExNzE0LWZ1bGwtcmVhZGVy">Mocha + Chai<i class="fa fa-external-link-alt"></i></span></h3><p><code>mocha+chai</code>是一个经典的组合主要用来测试函数功能，也能测试异步操作。也有常用<code>chai</code>的超集（拓展库）<code>sion-chai</code>来加强<code>chai</code></p>
<h3 id="Selenium2"><a href="#Selenium2" class="headerlink" title="Selenium2"></a><span class="exturl" data-url="aHR0cDovL3d3dy5zZWxlbml1bWhxLm9yZy9kb2Nz">Selenium2<i class="fa fa-external-link-alt"></i></span></h3><p><code>Selenium2</code>，它的主要新功能是集成了<code>Selenium1.0</code>以及<code>WebDriver</code>。<br>也就是说<code>Selenium2</code>是<code>Selenium</code>和<code>WebDriver</code>两个项目的合并，即<code>Selenium2</code>兼容<code>Selenium</code>，它既支持<code>Selenium API</code>也支持<code>WebDriver API</code>。<code>WebDriver</code>是一个用来进行复杂重复的<code>web</code>自动化测试的工具,意在提供一种比<code>Selenium1.0</code>更简单易学，有利于维护的<code>API</code>。它没有和任何测试框架进行绑定，所以他可以很好的在单元测试中调用。当启动<code>Selenium2</code>时通常会调起一个可见的界面，但也可以通过设置，让它以<code>PhantomJS</code>的形式进行无界面的测试<br>当然使用<code>Selenium2</code>必须额外的安装每种浏览器的<code>WebDriver</code><br><code>Selenium2</code>上手难度大于<code>PhantomJS</code></p>
<h3 id="NightwatchJs"><a href="#NightwatchJs" class="headerlink" title="NightwatchJs"></a><span class="exturl" data-url="aHR0cDovL25pZ2h0d2F0Y2hqcy5vcmcvZ3VpZGU=">NightwatchJs<i class="fa fa-external-link-alt"></i></span></h3><p>推特出品，基于<code>Selenium WebDriver API</code>开发，意味着支持浏览器自动化测试，内部集成了<code>mocha+chai</code>并将它加强，同时支持分组测试和单个测试，对语法进行了简化，归纳有以下特点:</p>
<ul>
<li>简单但强大的语法（更符合<code>js</code>书写习惯），只需要使用<code>JavaScript</code>和<code>CSS</code>选择器，开发者就能够非常迅捷地撰写测试。</li>
<li>开发者也不必初始化其他对象和类，只需要编写测试规范即可。</li>
<li>使用<code>CSS</code>选择器或<code>Xpath</code>，定位并验证页面中的元素或是执行命令。</li>
<li>易于扩展，便于开发者根据需要，实现与自己应用相关的命令。</li>
<li>…</li>
</ul>
<p>目前，<code>Selenium</code>是<code>JavaScript</code>的验收测试方面最流行的工具之一，同类的还有<code>PhantomJS</code>。二者都有其独到的方法：<code>Selenium</code>使用<code>WebDriver API</code>，而<code>PhantomJS</code>使用无界面的<code>WebKit</code>浏览器。它们都是非常成熟的工具，都具有强大的社区支持。它们与<code>Nightwatch</code>之间最大的不同，主要是在于语法的简易度以及对持续集成的支持。与<code>Nightwatch</code>相比，<code>Selenium</code>和<code>PhantomJS</code>都拥有更加冗长的语法，这会让编码变得更庞大</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">demoTestGoogle</span> = <span class="keyword">function</span> (<span class="params">browser</span>) &#123;</span><br><span class="line">   browser</span><br><span class="line">     .<span class="title function_">url</span>(“<span class="attr">http</span>:<span class="comment">//www.google.com”)</span></span><br><span class="line">     .<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;body&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">     .<span class="title function_">setValue</span>(<span class="string">&#x27;input[type=text]&#x27;</span>, <span class="string">&#x27;nightwatch&#x27;</span>)</span><br><span class="line">     .<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;button[name=btnG]&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">     .<span class="title function_">click</span>(<span class="string">&#x27;button[name=btnG]&#x27;</span>)</span><br><span class="line">     .<span class="title function_">pause</span>(<span class="number">1000</span>)</span><br><span class="line">     .<span class="property">assert</span>.<span class="title function_">containsText</span>(<span class="string">&#x27;#main&#x27;</span>, <span class="string">&#x27;The Night Watch&#x27;</span>)</span><br><span class="line">     .<span class="title function_">end</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="string">&#x27;step one&#x27;</span> : <span class="keyword">function</span> (<span class="params">browser</span>) &#123;</span><br><span class="line">    browser</span><br><span class="line">      .<span class="title function_">url</span>(<span class="string">&#x27;http://www.google.com&#x27;</span>)</span><br><span class="line">      .<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;body&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">      .<span class="title function_">setValue</span>(<span class="string">&#x27;input[type=text]&#x27;</span>, <span class="string">&#x27;nightwatch&#x27;</span>)</span><br><span class="line">      .<span class="title function_">waitForElementVisible</span>(<span class="string">&#x27;button[name=btnG]&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;step two&#x27;</span> : <span class="keyword">function</span> (<span class="params">browser</span>) &#123;</span><br><span class="line">    browser</span><br><span class="line">      .<span class="title function_">click</span>(<span class="string">&#x27;button[name=btnG]&#x27;</span>)</span><br><span class="line">      .<span class="title function_">pause</span>(<span class="number">1000</span>)</span><br><span class="line">      .<span class="property">assert</span>.<span class="title function_">containsText</span>(<span class="string">&#x27;#main&#x27;</span>, <span class="string">&#x27;Night Watch&#x27;</span>)</span><br><span class="line">      .<span class="title function_">end</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="对前端框架的支持"><a href="#对前端框架的支持" class="headerlink" title="对前端框架的支持"></a>对前端框架的支持</h2><p>在实际开发中，我们可能是用了不同的框架。虽然我们完全可以在把源码编译成普通的<code>HTML/CSS/JS</code>代码然后测试，但是此种方法的弊端也显而易见：不易于自动化，必须等到所有模块开发完成才能测试…为此我们必须寻找某种方式使得测试不收框架的限制</p>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><p>本身可以通过<code>new</code>一个<code>Vue</code>的方式挂载节点达到效果。<br>下面是一个简单的测试用例，测试<code>.hello h1</code>标签内容是否符合预期</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">HelloWorld</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;HelloWorld.vue&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;should render correct contents&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Constructor</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(<span class="title class_">HelloWorld</span>)</span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Constructor</span>().$mount()</span><br><span class="line">    <span class="title function_">expect</span>(vm.<span class="property">$el</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.hello h1&#x27;</span>).<span class="property">textContent</span>)</span><br><span class="line">      .<span class="property">to</span>.<span class="title function_">equal</span>(<span class="string">&#x27;Welcome to Your Vue.js App&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>1.官方提供了两种方法：</p>
<ul>
<li>渲染虚拟<code>DOM</code>（<code>Shallow Rendering</code>）</li>
</ul>
<p>只渲染第一层，不渲染子组件，速度快，返回一个浅渲染的虚拟<code>DOM</code>对象。然后拿到节点的各种信息，进行测试</p>
<ul>
<li>渲染真实<code>DOM</code>节点（<code>renderIntoDocument</code>）</li>
</ul>
<p><code>renderIntoDocument</code> 方法要求存在一个真实的<code>DOM</code>环境，否则会报错。因此，测试用例之中，<code>DOM</code>环境（即<code>window</code>, <code>document</code> 和 <code>navigator</code> 对象）必须是存在的。<code>jsdom</code>库提供这项功能</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import jsdom from &#x27;jsdom&#x27;;</span><br><span class="line"></span><br><span class="line">if (typeof document === &#x27;undefined&#x27;) &#123;</span><br><span class="line">  global.document = jsdom.jsdom(&#x27;&lt;!doctype html&gt;&lt;html&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;&#x27;);</span><br><span class="line">  global.window = document.defaultView;</span><br><span class="line">  global.navigator = global.window.navigator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.<code>Enzyme</code><br><code>Enzyme</code>是官方测试工具库的封装，它模拟了<code>jQuery</code>的<code>API</code>，非常直观，易于使用和学习，主要提供三种方法：</p>
<ul>
<li>shallow</li>
</ul>
<p><code>shallow</code>方法就是官方的<code>shallow rendering</code>的封装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123;shallow&#125; from &#x27;enzyme&#x27;;</span><br><span class="line"></span><br><span class="line">describe(&#x27;Enzyme Shallow&#x27;, function () &#123;</span><br><span class="line">  it(&#x27;App\&#x27;s title should be Todos&#x27;, function () &#123;</span><br><span class="line">    let app = shallow(&lt;App/&gt;);</span><br><span class="line">    expect(app.find(&#x27;h1&#x27;).text()).to.equal(&#x27;Todos&#x27;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>render</li>
</ul>
<p><code>render</code>方法将<code>React</code>组件渲染成静态的<code>HTML</code>字符串，然后分析这段<code>HTML</code>代码的结构，返回一个对象。它跟<code>shallow</code>方法非常像，主要的不同是采用了第三方HTML解析库<code>Cheerio</code>，它返回的是一个<code>Cheerio</code>实例对象。</p>
<ul>
<li>mount</li>
</ul>
<p><code>mount</code>方法用于将<code>React</code>组件加载为真实<code>DOM</code>节点</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>回到开始，个人认为不要滥用测试，需要合理评估测试用例对团队项目的积极作用和消极作用。不合理或者不恰当的使用测试只会增加工作复杂度和成本。<br>并且测试用例只是检查代码的工具，所以不要本末倒置以测试用例强行约束业务代码</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS91c3Rid3V5aS9hcmNoaXZlLzIwMTIvMTAvMjYvMjc0MTIyMy5odG1s">关于TDD、BDD和DDD的一些看法<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5pbmZvcS5jb20vY24vYXJ0aWNsZXMvdmlydHVhbC1wYW5lbC0lNjBUREQlNjAtJTYwQkREJTYw">虚拟座谈会：代码测试比率、测试驱动开发及行为驱动开发<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5ydWFueWlmZW5nLmNvbS9ibG9nLzIwMTUvMTIvYS1tb2NoYS10dXRvcmlhbC1vZi1leGFtcGxlcy5odG1s">Mocha<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAwOTMzMzE1Nw==">PhantomJS<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL3d3dy5pbmZvcS5jb20vY24vbmV3cy8yMDE0LzAyL25pZ2h0d2F0Y2g=">NightwatchJs<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cDovL2ZleC5iYWlkdS5jb20vYmxvZy8yMDE1LzA3L2Zyb250LWVuZC10ZXN0Lw==">前端自动化测试探索<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>test</category>
      </categories>
      <tags>
        <tag>自动化测试</tag>
        <tag>前端测试</tag>
      </tags>
  </entry>
  <entry>
    <title>慎重用for...in与for...of</title>
    <url>/2017-10-27/for-in-and-for-of.html</url>
    <content><![CDATA[<blockquote>
<p><code>for...in</code>和<code>for...of</code>都是用于数据的遍历。<code>for...in</code>是<code>ES5</code>标准，用于遍历对象属性（键），而<code>for...of</code>是<code>ES6</code>标准，是对<code>for...in</code>的修正，用于遍历对象元素（值），<code>for...of</code>兼容性不是很好（除了PC端老顽固<code>IE</code>之外，移动端某些安卓机和浏览器也是不支持它，具体可以<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9mb3IuLi5vZg==">查看MDN<i class="fa fa-external-link-alt"></i></span>）。</p>
</blockquote>
<h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">objMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">arrMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>], obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;2ue&#x27;</span>, <span class="attr">w</span>: <span class="number">130</span> &#125;;</span><br><span class="line">arr.<span class="property">msg</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">obj.<span class="property">msg</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;msg&quot;, &quot;arrCustom&quot;, &quot;objCustom&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.<span class="title function_">hasOwnProperty</span>(i)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;msg&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// &quot;name&quot;, &quot;w&quot;, &quot;msg&quot;, &quot;objCustom&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(i)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// &quot;name&quot;, &quot;w&quot;, &quot;msg&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由上面的例子可以看出，<code>for...in</code>的一些特性：</p>
<ul>
<li>可以对<code>JSON</code>对象（数组和对象）进行遍历</li>
<li><code>for...in</code>会遍历对象的所有可枚举属性，包括原型，例如一些我们挂载到原型链上的一些<code>method</code>和<code>name</code></li>
<li>遍历很有可能不是按照对象的内部顺序（我们预期的）进行</li>
<li>对数组遍历时index索引为字符串型，在某些时候直接进行几何运算可能达不到预期结果</li>
</ul>
<h2 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h2><p><code>for...in</code>貌似强大的同时也带来很多副作用，想要达到预期的记过需要额外的代码来处理，所以<code>for...of</code>应运而生</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">objMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">arrMethod</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">5</span>], obj = &#123; <span class="attr">name</span>: <span class="string">&#x27;2ue&#x27;</span>, <span class="attr">w</span>: <span class="number">130</span> &#125;;</span><br><span class="line">arr.<span class="property">msg</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">obj.<span class="property">msg</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i); <span class="comment">// 2, 9, 5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果用for...of循环对象，会报错`obj is not iterable`</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，<code>for...of</code>方法在<code>for...in</code>上做了优化，并且限制了只能遍历数组。当然在<code>ES5</code>中，具有遍历数组功能的还有<code>map</code>、<code>filter</code>、<code>some</code>、<code>every</code>、<code>reduce</code>、<code>reduceRight</code>等，但是需要注意的是，有些方法不能被<code>break</code>句柄打断循环，使用<code>retun</code>也不能返回到外层，如<code>forEach</code></p>
<p>其实不难看出<code>for...in</code>是属于鸡肋属性了，而<code>for...of</code>由于兼容性原因，在某些地方也应该慎用，即使是移动端也要慎用，应该它并不兼容所有内核。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9mb3IuLi5pbg==">for…in<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvU3RhdGVtZW50cy9mb3IuLi5vZg==">for…of<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cDovL2VzNi5ydWFueWlmZW5nLmNvbS8jZG9jcy9pdGVyYXRvcg==">for-of循环是遍历实现iterator接口的成员<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>遍历</tag>
        <tag>for...in</tag>
        <tag>for...of</tag>
      </tags>
  </entry>
  <entry>
    <title>利用javascrit获取url传递的参数</title>
    <url>/2016-06-15/get-url-values.html</url>
    <content><![CDATA[<h2 id="神奇的url"><a href="#神奇的url" class="headerlink" title="神奇的url"></a>神奇的url</h2><p>一条url包含了很丰富的信息，那么我们如何来获取这些信息并有效的加以利用呢?<br>随便举个例子：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NlYXJjaD91dGY4PSVFMiU5QyU5MyZxPWphdmFzY3JpcHQ=">https://github.com/search?utf8=%E2%9C%93&amp;q=javascript<i class="fa fa-external-link-alt"></i></span><br>这条url就是在github上搜索javascript后跳转页面对应的url。我们要做的就是获取’?’后面的参数，以及获取后可以用来做什么。</p>
<h2 id="获取参数"><a href="#获取参数" class="headerlink" title="获取参数"></a>获取参数</h2><h3 id="window-location的对象方法"><a href="#window-location的对象方法" class="headerlink" title="window.location的对象方法"></a>window.location的对象方法</h3><p><img data-src="/images/posts/windowLocation.png" alt="window.location的参数"></p>
<h3 id="获取url所有的参数"><a href="#获取url所有的参数" class="headerlink" title="获取url所有的参数"></a>获取url所有的参数</h3><p>我们可以直接通过<code>window.location.search</code>来取得这部分，也就是我们需要的url参数。</p>
<p>当<code>url</code>没有包含<code>?</code>时，<code>window.location.search</code>会返回<code>undefined</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUrlVal</span>(<span class="params">str</span>)&#123;</span><br><span class="line">  	<span class="keyword">if</span>(!str || str.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> urlValArry = str.<span class="title function_">replace</span>(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> urlValObject = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> urlValArry)&#123;</span><br><span class="line">        urlValObject[urlValArry[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">0</span>]] = urlValArry[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> urlValObject;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  https://github.com/search?utf8=%E2%9C%93&amp;q=javascript</span></span><br><span class="line"><span class="keyword">var</span> urlStr = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">replace</span>(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getUrlVal</span>(urlStr));  <span class="comment">//输出 Object &#123;utf8: &quot;%E2%9C%93&quot;, q: &quot;javascript&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="获取url中指定键名-name-的键值-val"><a href="#获取url中指定键名-name-的键值-val" class="headerlink" title="获取url中指定键名(name)的键值(val)"></a>获取url中指定键名(name)的键值(val)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getOneVal</span>(<span class="params">str,name</span>)&#123;</span><br><span class="line">  	<span class="keyword">if</span>(!str || str.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> afterNameStr = str.<span class="title function_">replace</span>(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(name)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> strFirstSite = afterNameStr.<span class="title function_">indexOf</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">  	<span class="comment">// 返回第一个&amp;位置，如果没有&#x27;&amp;&#x27;则返回字符串长度</span></span><br><span class="line">    strFirstSite = (strFirstSite == -<span class="number">1</span>) ? afterNameStr.<span class="property">length</span> : strFirstSite</span><br><span class="line">    <span class="keyword">var</span> reslt = afterNameStr.<span class="title function_">slice</span>(<span class="number">1</span>,strFirstSite);</span><br><span class="line">    <span class="keyword">return</span> reslt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  &#x27;http://www.gotoplay.com/active?itemtype=sport&amp;active=basketball&amp;time=20160614&amp;place=N230&amp;peopleNum=657&#x27;</span></span><br><span class="line"><span class="keyword">var</span> urlStr = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getOneVal</span>(urlStr,<span class="string">&#x27;time&#x27;</span>))  <span class="comment">//输出20160614</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getOneVal</span>(urlStr,<span class="string">&#x27;peopleNum&#x27;</span>))  <span class="comment">//657</span></span><br></pre></td></tr></table></figure>

<h2 id="将方法绑定到原型链上"><a href="#将方法绑定到原型链上" class="headerlink" title="将方法绑定到原型链上"></a>将方法绑定到原型链上</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toObj</span> = <span class="keyword">function</span>(<span class="params">key</span>)&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">  		如果有传入key，那么就只返回key对应的Val(找不到则返回undefined)</span></span><br><span class="line"><span class="comment">		如果没有传入key,那么就返回一个object对象</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">  <span class="keyword">var</span> str = <span class="variable language_">this</span>;</span><br><span class="line">  <span class="keyword">if</span>(str.<span class="title function_">indexOf</span>(<span class="string">&#x27;?&#x27;</span>) != <span class="number">0</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  <span class="keyword">if</span>(str.<span class="title function_">indexOf</span>(key) == -<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">  <span class="keyword">var</span> tmpArry = str.<span class="title function_">replace</span>(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> reslt = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> tmpArry)&#123;</span><br><span class="line">    <span class="keyword">var</span> tempKeyVal = tmpArry[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!!key) &#123;</span><br><span class="line">      <span class="keyword">if</span>(tempKeyVal[<span class="number">0</span>] != key) reslt = <span class="literal">undefined</span>;</span><br><span class="line">      reslt = tempKeyVal[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      reslt[tempKeyVal[<span class="number">0</span>]] = tempKeyVal[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> reslt;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// http://www.gotoplay.com/active?itemtype=sport&amp;active=basketball&amp;time=20160614</span></span><br><span class="line"><span class="keyword">var</span> urlStr = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(urlStr.<span class="title function_">toObj</span>()) <span class="comment">//&#123;itemtype:&#x27;sport&#x27;,active:&#x27;basketball&#x27;,time:&#x27;20160614&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(urlStr.<span class="title function_">toObj</span>(<span class="string">&#x27;active&#x27;</span>))  <span class="comment">//basketball</span></span><br></pre></td></tr></table></figure>

<h2 id="利用正则表达式来获取参数"><a href="#利用正则表达式来获取参数" class="headerlink" title="利用正则表达式来获取参数"></a>利用正则表达式来获取参数</h2><p>强大的正则总是让人心生向往，利用正则无疑是最简洁优雅的一种方法</p>
<h3 id="获取指定某个参数"><a href="#获取指定某个参数" class="headerlink" title="获取指定某个参数"></a>获取指定某个参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getUrlParam</span>(<span class="params">url,name</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!name) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;(^|&amp;)&#x27;</span> + name + <span class="string">&#x27;=([^&amp;]*)(&amp;|$)&#x27;</span>, <span class="string">&#x27;i&#x27;</span>),</span><br><span class="line">        r = url.<span class="title function_">substr</span>(<span class="number">1</span>).<span class="title function_">match</span>(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (r[<span class="number">2</span>]);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取所有的参数"><a href="#获取所有的参数" class="headerlink" title="获取所有的参数"></a>获取所有的参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parse_url</span>(<span class="params">url</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!url) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> pattern = <span class="regexp">/(\w+)=(\w+)/ig</span>;</span><br><span class="line">    <span class="keyword">var</span> parames = &#123;&#125;;</span><br><span class="line">    url.<span class="title function_">replace</span>(pattern, <span class="keyword">function</span>(<span class="params">a, b, c</span>)&#123;</span><br><span class="line">        parames[b] = c;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> parames;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参数的利用"><a href="#参数的利用" class="headerlink" title="参数的利用"></a>参数的利用</h2><p>在项目中这些参数有哪些用处呢，下面列举几个比较常用的用处</p>
<ul>
<li>传递数据</li>
<li>导航定位</li>
<li>更改状态</li>
<li>…</li>
</ul>
<h3 id="导航定位"><a href="#导航定位" class="headerlink" title="导航定位"></a>导航定位</h3><p>什么是导航定位？就是点击导航栏的标签，页面跳转后，对应的标签相应的会突出变化。如下图：<br><img data-src="/images/posts/navLocation.png" alt="navLocation"></p>
<p>跳转后有两种情况：<br>一种ajax异步刷新，只是局部页面发生变化，因为可以直接用点击事件来控制。<br>另外一种比较常见的方式就是整个页面刷新，这种情况下，点击事件就没用了，就必须另辟蹊径：<br>    1.比较传统的方法就是每个页面里面写一段CSS样式来控制<br>    2.那么另外一种不用说就是通过url的参数来定位咯<br>假如用每个页面写CSS样式来控制，可以明显感受到的弊端是：每次新的页面都需要修改对应的CSS<br>那么利用url来控制又需要做哪些事呢？<br>    1.首先需要约定参数，并且后台来传递这些参数<br>    2.然后在导航栏部分，对应的地方加上参数值，这一步，导航栏都是公用模板，并且规则都一样，所以只需要一次添加<br>    3.跳转后定位</p>
<h2 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/index.htm?nav=index&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/layout/post.htm?nav=post&quot;</span>&gt;</span>文章<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/layout/tag.htm?nav=tags&quot;</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/layout/about.htm?nav=aboutUs&quot;</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="js代码"><a href="#js代码" class="headerlink" title="js代码"></a>js代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getOneVal</span>(<span class="params">name,urlValStr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> afterNameStr = urlValStr.<span class="title function_">split</span>(name)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> strFirstSite = afterNameStr.<span class="title function_">indexOf</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">    strFirstSite = (strFirstSite == -<span class="number">1</span>) ? afterNameStr.<span class="property">length</span> : strFirstSit;</span><br><span class="line">    <span class="keyword">var</span> val = afterNameStr.<span class="title function_">slice</span>(<span class="number">1</span>,strFirstSite);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> thisUrlVal = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">replace</span>(<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> thisNVal = <span class="title function_">getOneVal</span>(<span class="string">&#x27;nav&#x27;</span>,urlValStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定位</span></span><br><span class="line">$(<span class="string">&#x27;.nav a&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = $(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">var</span> urlValStr = _this.<span class="title function_">attr</span>(<span class="string">&#x27;href&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> nVal = <span class="title function_">getOneVal</span>(<span class="string">&#x27;nav&#x27;</span>,urlValStr);</span><br><span class="line">    <span class="keyword">if</span>(nVal == thisNVal) &#123;</span><br><span class="line">        _this.<span class="title function_">addClass</span>(<span class="string">&#x27;on&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>url</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决“cannot remove directory not empty”</title>
    <url>/2019-05-29/how%20to%20solve%20cannot%20remove%20directory%20not%20empty.html</url>
    <content><![CDATA[<blockquote>
<p>在windows系统下，删除文件或者文件夹，出现”Cannot remove xxx: Directory not empty”，如果在使用各种删除方法（比如使用命令行删除，解除占用，kill相关进程等）都得到相同的提示后，那么一般是磁盘存在问题，可以尝试使用<code>CHKDSK</code>命令来修复磁盘解决问题</p>
</blockquote>
<h2 id="CHKDSK"><a href="#CHKDSK" class="headerlink" title="CHKDSK"></a>CHKDSK</h2><p><code>CHKDSK</code>的全称是check disk，就是磁盘检查的意思。该工具基于被检测的分区所用的<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS8lRTYlOTYlODclRTQlQkIlQjYlRTclQjMlQkIlRTclQkIlOUYvNDgyNzIxNT9mcm9tTW9kdWxlPWxlbW1hX2lubGluaw==">文件系统<i class="fa fa-external-link-alt"></i></span>，可以检查硬盘文件系统的完整性，并可以修复FAT16、FAT32和NTFS硬盘上的各种文件系统错误，创建和显示磁盘的状态报告。CHKDSK 还会列出并纠正磁盘上的错误。</p>
<h2 id="解决方案及步骤"><a href="#解决方案及步骤" class="headerlink" title="解决方案及步骤"></a>解决方案及步骤</h2><p>1、以管理员身份打开<code>CMD</code>命令行工具</p>
<p>2、输入<code>CHKDSK E:/F</code>，并回车。其中<code>E:</code>为出问题的磁盘，在使用时需要换成出问题的磁盘</p>
<p>3、等待检查完毕，最好重启电脑后再去删除对应目录，此时就能成功删除了</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvQ0hLRFNL">CHKDSK - 维基百科，自由的百科全书<i class="fa fa-external-link-alt"></i></span></p>
<p><span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9jaGtkc2s=">chkdsk_百度百科<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>/</category>
      </categories>
      <tags>
        <tag>Windows</tag>
      </tags>
  </entry>
  <entry>
    <title>如何写一个日历组件</title>
    <url>/2017-11-02/how-to-make-a-kalendar.html</url>
    <content><![CDATA[<blockquote>
<p>众所周知，虽然<code>javascript</code>中关于时间的API有不少，我们可以通过方法单独的获取年、月、日、时、分、秒、毫秒…貌似很多，最近写了一个日历（以前写的，但写得很烂，最近优化一下），所以下面简单的记录一下如何写一个日历，列出了一些我在写日历过程中自己封装的一些方法</p>
</blockquote>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p>先来一张效果图，由于没有UI设计，所以就自己简单的设计了一个样式（好歹我也是设计专业的，虽然已不做设计很多年），虽然略丑，但重要的是功能！！！</p>
<p><img data-src="/images/posts/datepicker.gif" alt="datepicker"></p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>一个日历到底是怎样用代码生成的？其实观察一下现有的日历展现形式，可以很快的形成思路，就是：根据计算把日期号数对应到正确的星期几上，并按照顺序逐一输出。<br>以下是我的思路:</p>
<ul>
<li>取得月份的天数</li>
<li>取得月份第一天是星期几</li>
<li>循环对应号数和星期几返回一个数组对象<ul>
<li>返回数组对象的每一个子项至少包含：号数，星期几，然后根据情况添加：是否高亮，是否当前月，是否节日…等属性</li>
</ul>
</li>
</ul>
<h2 id="方法封装"><a href="#方法封装" class="headerlink" title="方法封装"></a>方法封装</h2><p>注意，为了保持方便调用<code>javascript</code>的方法，以及保持输出结果符合实际，所有的方法都有如下约定：</p>
<ul>
<li>在计算过程中<ul>
<li>所有的关于月份都是0~11的数字</li>
<li>所有的关于星期都是0~6的数字</li>
</ul>
</li>
<li>在输出的结果中<ul>
<li>所有关于月份的输出默认都是1-12的数字</li>
<li>所有关于星期的输出默认都是1-7的数字</li>
</ul>
</li>
</ul>
<p>所以在向调用方法传递参数过程中，月份以及星期几统统都需要按照实际月份减一</p>
<h3 id="获取月份天数"><a href="#获取月份天数" class="headerlink" title="获取月份天数"></a>获取月份天数</h3><p>在<code>javascript</code>中没有直接获取月份天数的方法，但是它提供了一个<code>getDate</code>方法可以获取日期的某一天。那我们只需要获取月份的最后一天（下一个月的第0天）就可以得知这个月的天数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// year是要获取的年份，闰年不一样</span></span><br><span class="line"><span class="comment">// month是要获取的月份</span></span><br><span class="line"><span class="comment">// 返回当前月天数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getMonthDays</span>(<span class="params">year, month</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(year, month + <span class="number">1</span>, <span class="number">0</span>).<span class="title function_">getDate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getMonthDays</span>(<span class="number">2016</span>,<span class="number">2</span>) <span class="comment">//29</span></span><br><span class="line"><span class="title function_">getMonthDays</span>(<span class="number">2017</span>,<span class="number">2</span>) <span class="comment">//28</span></span><br></pre></td></tr></table></figure>

<h3 id="获取星期几"><a href="#获取星期几" class="headerlink" title="获取星期几"></a>获取星期几</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// year是要获取的年份</span></span><br><span class="line"><span class="comment">// month是要获取的月份</span></span><br><span class="line"><span class="comment">// 返回数字几则是星期几</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getWeekday</span>(<span class="params">year, month, day</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Date</span>(year, month, day).<span class="title function_">getDate</span>() + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getWeekday</span>(<span class="number">2016</span>,<span class="number">10</span>,<span class="number">9</span>) <span class="comment">//输出4，表示2016年11月9是星期4</span></span><br><span class="line"><span class="title function_">getWeekday</span>(<span class="number">2017</span>,<span class="number">10</span>,<span class="number">9</span>) <span class="comment">//输出5，表示2017年11月9是星期5</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="获取月份有几个星期"><a href="#获取月份有几个星期" class="headerlink" title="获取月份有几个星期"></a>获取月份有几个星期</h3><p>要计算月份包含几个星期，需要两个数据：月份天数和月份第一天是星期几，就能得到想要的结果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// year是要获取的年份</span></span><br><span class="line"><span class="comment">// month是要获取的月份</span></span><br><span class="line"><span class="comment">// 返回当前月包含几个星期</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getweeksInMonth</span>(<span class="params">year, month</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> days = <span class="title function_">getMonthDays</span>(year, month);</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">FirstDayWeekday</span> = <span class="title function_">getWeekday</span>(year, month, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(days + <span class="title class_">FirstDayWeekday</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="循环生成月份对象"><a href="#循环生成月份对象" class="headerlink" title="循环生成月份对象"></a>循环生成月份对象</h3><p>有了以上方法之后，就可以通过循环生成一个简单的月份对象了。<br>在这里需要注意，日历的排序有两种：</p>
<ul>
<li>每一行以星期日开头</li>
<li>每一行以星期开头</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// year是要获取的年份</span></span><br><span class="line"><span class="comment">// month是要获取的月份</span></span><br><span class="line"><span class="comment">// day天，用来判断是否是当前天</span></span><br><span class="line"><span class="comment">// type表明要星期几开头，0为星期一开头，1为星期日开头，默认为0</span></span><br><span class="line"><span class="comment">// 返回当前月包含几个星期</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WEEKTABLE</span> = [&#123;</span><br><span class="line">    <span class="attr">cn</span>: [<span class="string">&#x27;星期日&#x27;</span>, <span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>],</span><br><span class="line">    <span class="attr">cns</span>: [<span class="string">&#x27;日&#x27;</span>, <span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;四&#x27;</span>, <span class="string">&#x27;五&#x27;</span>, <span class="string">&#x27;六&#x27;</span>],</span><br><span class="line">    <span class="attr">en</span>: [<span class="string">&#x27;Sun&#x27;</span>, <span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>]</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">cn</span>: [<span class="string">&#x27;星期一&#x27;</span>, <span class="string">&#x27;星期二&#x27;</span>, <span class="string">&#x27;星期三&#x27;</span>, <span class="string">&#x27;星期四&#x27;</span>, <span class="string">&#x27;星期五&#x27;</span>, <span class="string">&#x27;星期六&#x27;</span>, <span class="string">&#x27;星期日&#x27;</span>],</span><br><span class="line">    <span class="attr">cns</span>: [<span class="string">&#x27;一&#x27;</span>, <span class="string">&#x27;二&#x27;</span>, <span class="string">&#x27;三&#x27;</span>, <span class="string">&#x27;四&#x27;</span>, <span class="string">&#x27;五&#x27;</span>, <span class="string">&#x27;六&#x27;</span>, <span class="string">&#x27;日&#x27;</span>],</span><br><span class="line">    <span class="attr">en</span>: [<span class="string">&#x27;Mon&#x27;</span>, <span class="string">&#x27;Tue&#x27;</span>, <span class="string">&#x27;Wed&#x27;</span>, <span class="string">&#x27;Thu&#x27;</span>, <span class="string">&#x27;Fri&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>, <span class="string">&#x27;Sun&#x27;</span>]</span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="title function_">getMonthDaysArray</span>(<span class="params">year, month, day， type</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> day === <span class="string">&#x27;undefined&#x27;</span> &amp;&amp; year === <span class="variable constant_">YEAR</span> &amp;&amp; month === <span class="variable constant_">MONTH</span>) day = <span class="variable constant_">DAY</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> dayArrays = [];</span><br><span class="line">    <span class="keyword">var</span> days = <span class="variable language_">this</span>.<span class="title function_">getMonthDays</span>(year, month), preDays = <span class="variable language_">this</span>.<span class="title function_">getMonthDays</span>(year, month - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> thisMonthFirstDayInWeek = <span class="variable language_">this</span>.<span class="title function_">getWeekday</span>(year, month, <span class="number">1</span>), thisMonthLastDayInWeek = <span class="variable language_">this</span>.<span class="title function_">getWeekday</span>(year, month, days);</span><br><span class="line"></span><br><span class="line">    type = !type || type !== <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上月在当月日历面板中的排列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; thisMonthFirstDayInWeek; i++) &#123;</span><br><span class="line">        dayArrays.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">dayNum</span>: (preDays - thisMonthFirstDayInWeek + i + <span class="number">1</span>),</span><br><span class="line">            <span class="attr">weekDay</span>: <span class="variable constant_">WEEKTABLE</span>[type].<span class="property">cn</span>[i]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当月日历面板中的排列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= days; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> weekDayFlag = (thisMonthFirstDayInWeek + i - <span class="number">1</span>) % <span class="number">7</span></span><br><span class="line">        dayArrays.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">dayNum</span>: i,</span><br><span class="line">            <span class="attr">weekDay</span>: <span class="variable constant_">WEEKTABLE</span>[type].<span class="property">cn</span>[weekDayFlag],</span><br><span class="line">            <span class="attr">selected</span>: i === +day,</span><br><span class="line">            <span class="attr">isThisMonth</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//下月在当月日历面板中的排列</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= (<span class="number">6</span> - thisMonthLastDayInWeek); i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> weekDayFlag = (thisMonthFirstDayInWeek + days + i - <span class="number">1</span>) % <span class="number">7</span></span><br><span class="line">        dayArrays.<span class="title function_">push</span>(&#123;</span><br><span class="line">            <span class="attr">dayNum</span>: i,</span><br><span class="line">            <span class="attr">weekDay</span>: <span class="variable constant_">WEEKTABLE</span>[type].<span class="property">cn</span>[weekDayFlag]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> dayArrays;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h3><p>涉及到时间时，常常需要把时间格式进行转换，为了应对多中需求，所以自己封装了一个</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数fmt必须</span></span><br><span class="line"><span class="comment">// date参数不必须，允许字符串和时间对象，不传或者传无法转换成合法时间对象的字符串则默认当前时间,</span></span><br><span class="line"><span class="comment">// 年(YYYY/yyyy)固定四个占位符</span></span><br><span class="line"><span class="comment">// 月(M)、日(d)、小时(h)、分(m)、秒(s)可以用 1-2个占位符,严格区分大小写，</span></span><br><span class="line"><span class="comment">// 毫秒（ms/mss）最多三个占位符，分别对应56，056这种类型</span></span><br><span class="line"><span class="comment">// 例子：</span></span><br><span class="line"><span class="comment">// (Format(&quot;yyyy-MM-dd hh:mm:ss:ms&quot;) ==&gt; 2006-07-02 08:09:04:23</span></span><br><span class="line"><span class="comment">// (Format(&quot;yyyy-MM-dd hh:mm:ss:mss&quot;) ==&gt; 2006-07-02 08:09:04:023</span></span><br><span class="line"><span class="comment">// (Format(&quot;yyyy-M-d h:m:s:ms&quot;)      ==&gt; 2006-7-2 8:9:4.180</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formate</span>(<span class="params">fmt, date</span>)&#123;</span><br><span class="line">    date = <span class="keyword">new</span> <span class="title class_">Date</span>(date).<span class="title function_">toString</span>() === <span class="string">&#x27;Invalid Date&#x27;</span> ? <span class="keyword">new</span> <span class="title class_">Date</span>() : <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    <span class="keyword">var</span> _rules = [&#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;[yY]&#123;4&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: _date.<span class="title function_">getFullYear</span>()</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;M+&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: _date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;[dD]+&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: _date.<span class="title function_">getDate</span>()</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;h+&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: _date.<span class="title function_">getHours</span>()</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;m+&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: _date.<span class="title function_">getMinutes</span>()</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;s+&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: _date.<span class="title function_">getSeconds</span>()</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;ms&#123;1,2&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: _date.<span class="title function_">getMilliseconds</span>()</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    _rules.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">_r</span>)&#123;</span><br><span class="line">        <span class="keyword">const</span> rule = _r.<span class="property">rule</span>, val = _r.<span class="property">value</span>;</span><br><span class="line">        fmt = fmt.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(rule), <span class="keyword">function</span> (<span class="params">$1</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> rLen = val.<span class="title function_">toString</span>().<span class="property">length</span>, fLen = $1.<span class="property">length</span>;</span><br><span class="line">            <span class="keyword">return</span> (fLen !== <span class="number">2</span> || rLen &gt;= fLen) ? val : [<span class="string">&#x27;00&#x27;</span>, val].<span class="title function_">join</span>().<span class="title function_">substr</span>(rLen);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用：</span></span><br><span class="line"><span class="keyword">var</span> time1 = <span class="title function_">formate</span>(<span class="string">&quot;YYYY/MM/DD hh:mm:ss&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>()); <span class="comment">//2017/11/2 11:09:20</span></span><br><span class="line"><span class="keyword">var</span> time2 = <span class="title function_">formate</span>(<span class="string">&quot;YYYY-MM-DD&quot;</span>, time1); <span class="comment">//2017-11-2</span></span><br><span class="line"><span class="keyword">var</span> time3 = <span class="title function_">formate</span>(<span class="string">&quot;MM-DD-YYYY&quot;</span>, time2); <span class="comment">//11-2-2017</span></span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>附上这些方法的源码<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzJ1ZS92dWkvYmxvYi9tYXN0ZXIvc3JjL3V0aWxzL2RhdGVwaWNrZXIuanM=">datepicker<i class="fa fa-external-link-alt"></i></span><br>基于vue实现的一个日历：</p>
<ul>
<li>demo<span class="exturl" data-url="aHR0cHM6Ly8ydWUuZ2l0aHViLmlvL3Z1aS8jL0RhdGVQaWNrZXI=">vue-datepicker<i class="fa fa-external-link-alt"></i></span></li>
<li>源码<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzJ1ZS92dWkvYmxvYi9tYXN0ZXIvc3JjL2NvbXBvbmVudHMvZGF0ZVBpY2tlci9kYXRlUGlja2VyUGFuZWwudnVl">datePickerPanel.vue<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>当然这只是最简单的日历输出，思路也是超级简单（感觉有点Low），如果有大神愿意分享它的经验欢迎，来邮~</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>日历</tag>
        <tag>kalendar</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript系列 - Javascript数组方法</title>
    <url>/2016-08-11/javascript-array-method.html</url>
    <content><![CDATA[<blockquote>
<p>Javascript的Array(数组对象)方法整理，对比他们的功能，返回值，分析他们的参数，以及具体的作用。</p>
</blockquote>
<h2 id="length：获取数组长度"><a href="#length：获取数组长度" class="headerlink" title="length：获取数组长度"></a>length：获取数组长度</h2><blockquote>
<ul>
<li>Method:  Arry.length</li>
<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>
<li>Arguments:  无</li>
<li>Return:  返回被引用数组长度</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="string">&#x27;2ue&#x27;</span>,<span class="string">&#x27;o90&#x27;</span>]</span><br><span class="line">arry.<span class="property">length</span> <span class="comment">//返回5，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="join：连接数组内各元素组成一个字符串"><a href="#join：连接数组内各元素组成一个字符串" class="headerlink" title="join：连接数组内各元素组成一个字符串"></a>join：连接数组内各元素组成一个字符串</h2><blockquote>
<ul>
<li>Method:  Arry.join(str)</li>
<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>
<li>Arguments:  <code>str</code>非必需<ul>
<li><code>str</code>不存在时(不传递str)以默认逗号连接元素</li>
<li><code>str</code>可以为任意字符串，也可以为空(‘’)（字符串为空时，各元素之间无连接符号）</li>
</ul>
</li>
<li>Return:  返回连接后的字符串</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="string">&#x27;2ue&#x27;</span>,<span class="string">&#x27;o90&#x27;</span>]</span><br><span class="line">arry.<span class="title function_">join</span>() <span class="comment">//返回字符串1,6,8,2ue,o90，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;]</span></span><br><span class="line">arry.<span class="title function_">join</span>(<span class="string">&#x27;-&#x27;</span>) <span class="comment">//返回字符串1-6-8-2ue-o90，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;]</span></span><br><span class="line">arry.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">//返回字符串1682ueo90，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>注意如果需要加数组arry以逗号形式展示到页面，则不需要<code>.join()</code>方法，因为javascript的赋值操作会自动调用<code>.toString()</code>方法</strong>，如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JS</span></span><br><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="string">&#x27;2ue&#x27;</span>,<span class="string">&#x27;o90&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> divBox = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">divBox.<span class="property">innerHTML</span> = arry;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前面赋值的操作将会调用toString方法，因此</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divBox) <span class="comment">//&lt;div id=&quot;div&quot;&gt;1,6,8,2ue,o90&lt;/div&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="push：在数组尾部添加一个元素"><a href="#push：在数组尾部添加一个元素" class="headerlink" title="push：在数组尾部添加一个元素"></a>push：在数组尾部添加一个元素</h2><blockquote>
<ul>
<li>Method:  Arry.push(value,…)</li>
<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>
<li>Arguments:  <code>value</code>非必需。<ul>
<li><code>value</code>不存在(不传递str)返回被引用数组长度，无实际意义</li>
<li><code>value</code>可以为<code>合法的</code>布尔值，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空</li>
<li>其中，也可以接收多个参数</li>
</ul>
</li>
<li>Return:  返回被引用数组长度</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="string">&#x27;2ue&#x27;</span>,<span class="string">&#x27;o90&#x27;</span>]</span><br><span class="line">arry.<span class="title function_">push</span>() <span class="comment">//返回5，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;]  实际没有任何意义</span></span><br><span class="line">arry.<span class="title function_">push</span>(<span class="literal">true</span>) <span class="comment">//返回6，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,true]</span></span><br><span class="line">arry.<span class="title function_">push</span>(<span class="string">&#x27;dmw&#x27;</span>) <span class="comment">//返回7，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,true,&#x27;dmw&#x27;]</span></span><br><span class="line">arry.<span class="title function_">push</span>(<span class="string">&#x27;&#x27;</span>) <span class="comment">//返回8，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,true,&#x27;dmw&#x27;,&#x27;&#x27;]</span></span><br><span class="line">arry.<span class="title function_">push</span>(<span class="number">3</span>) <span class="comment">//返回9，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,true,&#x27;dmw&#x27;,&#x27;&#x27;,3]</span></span><br><span class="line">arry.<span class="title function_">push</span>(<span class="literal">undefined</span>) <span class="comment">//返回10，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,true,&#x27;dmw&#x27;,&#x27;&#x27;,3,undefined]</span></span><br><span class="line">arry.<span class="title function_">push</span>(<span class="literal">null</span>) <span class="comment">//返回11，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,true,&#x27;dmw&#x27;,&#x27;&#x27;,3,undefined,null]</span></span><br><span class="line">arry.<span class="title function_">push</span>([<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;8&#x27;</span>]) <span class="comment">//返回12，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,true,&#x27;dmw&#x27;,&#x27;&#x27;,3,undefined,null,[&#x27;9&#x27;,&#x27;8&#x27;]]</span></span><br><span class="line">arry.<span class="title function_">push</span>(&#123;<span class="attr">key</span>:<span class="string">&#x27;hah&#x27;</span>&#125;) <span class="comment">//返回13，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,true,&#x27;dmw&#x27;,&#x27;&#x27;,3,undefined,null,[&#x27;9&#x27;,&#x27;8&#x27;],&#123;key:&#x27;hah&#x27;&#125;]</span></span><br><span class="line"><span class="comment">//接收多个参数</span></span><br><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="string">&#x27;2ue&#x27;</span>,<span class="string">&#x27;o90&#x27;</span>]</span><br><span class="line">arry.<span class="title function_">push</span>(<span class="literal">true</span>,<span class="string">&#x27;dmw&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="number">3</span>,<span class="literal">undefined</span>,<span class="literal">null</span>,[<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;8&#x27;</span>],&#123;<span class="attr">key</span>:<span class="string">&#x27;hah&#x27;</span>&#125;)</span><br><span class="line"><span class="comment">//返回13，arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,true,&#x27;dmw&#x27;,&#x27;&#x27;,3,undefined,null,[&#x27;9&#x27;,&#x27;8&#x27;],&#123;key:&#x27;hah&#x27;&#125;]</span></span><br></pre></td></tr></table></figure>

<h2 id="unshift：在数组尾部添加一个元素"><a href="#unshift：在数组尾部添加一个元素" class="headerlink" title="unshift：在数组尾部添加一个元素"></a>unshift：在数组尾部添加一个元素</h2><blockquote>
<ul>
<li>Method:  Arry.unshift(value,…)</li>
<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>
<li>Arguments:  <code>value</code>非必需。<ul>
<li><code>value</code>不存在(不传递str)返回被引用数组长度，无实际意</li>
<li><code>value</code>可以为<code>合法的</code>布尔，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空</li>
<li>其中也可以接收多个参数。</li>
</ul>
</li>
<li>Return:  返回被引用数组长度</li>
</ul>
</blockquote>
<p>同<code>.push()</code>方法</p>
<h2 id="concat：在尾部添加元素到数组"><a href="#concat：在尾部添加元素到数组" class="headerlink" title="concat：在尾部添加元素到数组"></a>concat：在尾部添加元素到数组</h2><blockquote>
<ul>
<li>Method:  Arry.concat(value,…)</li>
<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>
<li>Arguments:  <code>value</code>非必需。<ul>
<li><code>value</code>不存在(不传递str)返回组成的新数组，无实际意</li>
<li><code>value</code>可以为<code>合法的</code>布尔，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空，也可以接收多个参数。</li>
<li>其中当<code>value</code>为数组时，那么添加的是数组中的元素，而不是数组，所以可以用<code>.concat()</code>来连接数组</li>
</ul>
</li>
<li>Return:  返回组成的新数组</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回值为一个新的数组，不改变原数组</span></span><br><span class="line"><span class="comment">//参数为数组时</span></span><br><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="string">&#x27;2ue&#x27;</span>,<span class="string">&#x27;o90&#x27;</span>]</span><br><span class="line"><span class="keyword">var</span> newArry = arry.<span class="title function_">concat</span>([<span class="string">&#x27;lalal&#x27;</span>,<span class="string">&#x27;mof&#x27;</span>])</span><br><span class="line"><span class="comment">//返回值 newArry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,&#x27;lalal&#x27;,&#x27;mof&#x27;]</span></span><br><span class="line"><span class="comment">//原数组 arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;]</span></span><br><span class="line"><span class="comment">//其它情况同push方法一致</span></span><br></pre></td></tr></table></figure>

<h2 id="pop：删除最后一个元素"><a href="#pop：删除最后一个元素" class="headerlink" title="pop：删除最后一个元素"></a>pop：删除最后一个元素</h2><blockquote>
<ul>
<li>Method:  Arry.pop()</li>
<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>
<li>Arguments:  无</li>
<li>Return:  返回被删除(最后一个)元素，被引用数组为空，不改变数组，返回<code>undefined</code></li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>]</span><br><span class="line">arry.<span class="title function_">pop</span>() <span class="comment">//返回1，arry = []</span></span><br><span class="line">arry.<span class="title function_">pop</span>() <span class="comment">//返回undefined，arry = []</span></span><br></pre></td></tr></table></figure>

<h2 id="shift：删除第一个元素"><a href="#shift：删除第一个元素" class="headerlink" title="shift：删除第一个元素"></a>shift：删除第一个元素</h2><blockquote>
<ul>
<li>Method:  Arry.shift()</li>
<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>
<li>Arguments:  无</li>
<li>Return:  返回被删除(第一个)元素，被引用数组为空，不改变数组，返回<code>undefined</code></li>
</ul>
</blockquote>
<p>同<code>.pop()</code></p>
<h2 id="reverse：颠倒数组元素顺序"><a href="#reverse：颠倒数组元素顺序" class="headerlink" title="reverse：颠倒数组元素顺序"></a>reverse：颠倒数组元素顺序</h2><blockquote>
<ul>
<li>Method:  Arry.reverse()</li>
<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>
<li>Arguments:  无</li>
<li>Return:  返回对数组的引用，返回值为数组类型</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="string">&#x27;2ue&#x27;</span>,<span class="string">&#x27;o90&#x27;</span>]</span><br><span class="line">arry.<span class="title function_">reverse</span>() <span class="comment">//返回[&#x27;o90&#x27;,&#x27;2ue&#x27;,8,6,1] arry = [&#x27;o90&#x27;,&#x27;2ue&#x27;,8,6,1]</span></span><br></pre></td></tr></table></figure>

<h2 id="sort：数组元素排序"><a href="#sort：数组元素排序" class="headerlink" title="sort：数组元素排序"></a>sort：数组元素排序</h2><blockquote>
<ul>
<li>Method:  Arry.sort(fun)</li>
<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>
<li>Arguments:  fun非必需<ul>
<li><strong>fun如果为空，那么默认安装字符编码的顺序进行排序</strong></li>
<li><strong>如不为空，那么fun必须为函数类型</strong>。</li>
<li>Arry.sort(fun(value1,value2){})，fun函数参数<code>value1</code> 的值为<code>Arry[i]</code>，<code>value2</code> 的值为<code>Arry[i+1]</code>，其中<code>0&lt; = i &lt; Arry.length - 1</code>。所以请注意，<code>.sort()</code>方法排序会对被引用数组进行遍历，遍历的次数为<code>Arry.length - 1</code>，而非<code>Arry.length</code>。因为在<code>Arry.length - 1</code>次时，排序其实就已经完成了。</li>
</ul>
</li>
<li>Return:  返回对数组的引用，返回值为数组类型</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="string">&#x27;2ue&#x27;</span>,<span class="string">&#x27;o90&#x27;</span>,<span class="number">6</span>,<span class="number">890</span>,<span class="number">9</span>,<span class="number">7990</span>]</span><br><span class="line">arry.<span class="title function_">sort</span>()<span class="comment">//返回[1, &quot;2ue&quot;, 6, 7990, 890, 9, &quot;o90&quot;] arry = [1, &quot;2ue&quot;, 6, 7990, 890, 9, &quot;o90&quot;]</span></span><br><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">65443</span>,<span class="number">6</span>,<span class="number">890</span>,<span class="number">9</span>,<span class="number">7990</span>]</span><br><span class="line">arry.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">value1,value2</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> value2-value1</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//返回[65443, 7990, 890, 9, 6, 1] arry = [65443, 7990, 890, 9, 6, 1]</span></span><br></pre></td></tr></table></figure>

<h2 id="slice：根据索引返回数组的一部分"><a href="#slice：根据索引返回数组的一部分" class="headerlink" title="slice：根据索引返回数组的一部分"></a>slice：根据索引返回数组的一部分</h2><blockquote>
<ul>
<li>Method:  Arry.slice(satrtIndex,endIndex)</li>
<li><strong>被引用数组(Arry)是否改变:  NO</strong></li>
<li>Arguments:<ul>
<li><code>satrtIndex</code>开始索引(<strong>不包含开始索引</strong>)，必须，且必须为<code>nubmer</code>类型，正负皆可。为正或者<code>0(0,+0,-0)</code>表示从数组正向开始索引，为负表示从方向开始索引(<strong>-1表示倒数的0</strong>)。</li>
<li><code>endIndex</code>结束索引(<strong>不包含结束索引</strong>)，必须，且必须为<code>nubmer</code>类型，正负皆可。为正或者<code>0(0,+0,-0)</code>表示从数组正向开始索引，为负表示从方向开始索引(<strong>-1表示倒数的0</strong>)。</li>
<li>最终<code>satrtIndex</code>的实际值必须小于<code>endIndex</code>，且他们所在的那段索引必须与被引用数组的索引有交集，否则返回空数组。</li>
</ul>
</li>
<li>Return:  根据索引返回数组的一部分，返回值为数组类型</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被引用数组值不会改变</span></span><br><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="string">&#x27;2ue&#x27;</span>,<span class="string">&#x27;o90&#x27;</span>]</span><br><span class="line">arry.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">3</span>) <span class="comment">//返回[6,8,&#x27;2ue&#x27;]</span></span><br><span class="line">arry.<span class="title function_">slice</span>(<span class="number">3</span>,<span class="number">1</span>) <span class="comment">//返回[]</span></span><br><span class="line">arry.<span class="title function_">slice</span>(-<span class="number">1</span>,<span class="number">2</span>) <span class="comment">//返回[]</span></span><br><span class="line">arry.<span class="title function_">slice</span>(<span class="number">1</span>,-<span class="number">2</span>) <span class="comment">//返回[6,8]</span></span><br><span class="line">arry.<span class="title function_">slice</span>(<span class="number">1</span>,-<span class="number">4</span>) <span class="comment">//返回[]</span></span><br><span class="line">arry.<span class="title function_">slice</span>(-<span class="number">3</span>,-<span class="number">1</span>) <span class="comment">//返回[6,8,&#x27;2ue&#x27;]</span></span><br><span class="line">arry.<span class="title function_">slice</span>(-<span class="number">1</span>,-<span class="number">3</span>) <span class="comment">//返回[]</span></span><br></pre></td></tr></table></figure>

<h2 id="splice：移除元素"><a href="#splice：移除元素" class="headerlink" title="splice：移除元素"></a>splice：移除元素</h2><blockquote>
<ul>
<li>Method:  Arry.splice(satrtIndex, deleteCount, value, …)</li>
<li><strong>被引用数组(Arry)是否改变:  YES</strong></li>
<li>Arguments:<ul>
<li><code>satrtIndex</code>开始索引，必须，且必须为<code>nubmer</code>类型，正负皆可。为正或者<code>0(0,+0,-0)</code>表示从数组正向开始索引，为负表示从方向开始索引(<strong>-1表示倒数的0</strong>)。</li>
<li><code>deleteCount</code>将删除的个数，非必须，且必须为<code>nubmer</code>类型。从start开始，包括start所指的元素在内要删除的元素个数。这个参数是可选的，如果没有指定它，splice()将删除从start开始到原数组结尾的所有元素，小于等于0将不会删除。</li>
<li><code>value</code>要插入数组的零个或多个值，从start所指的下标处开始插入。可以为<code>合法的</code>布尔，字符串，数组，对象，数字，<code>null</code>，<code>undefined</code>，空，可接收多个参数。</li>
</ul>
</li>
<li>Return:  被移除元素组成的数组</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arry = [<span class="number">1</span>,<span class="number">6</span>,<span class="number">8</span>,<span class="string">&#x27;2ue&#x27;</span>,<span class="string">&#x27;o90&#x27;</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">arry.<span class="title function_">splice</span>(<span class="number">7</span>)  <span class="comment">// 返回 [6,7]; arry = [1,6,8,&#x27;2ue&#x27;,&#x27;o90&#x27;,4,5]</span></span><br><span class="line">arry.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">2</span>)  <span class="comment">// 返回 [6,8]; arry = [1,&#x27;2ue&#x27;,&#x27;o90&#x27;,4,5]</span></span><br><span class="line">arry.<span class="title function_">splice</span>(-<span class="number">1</span>,<span class="number">1</span>)  <span class="comment">//返回 [5]; arry = [1,&#x27;o90&#x27;,4]</span></span><br><span class="line">arry.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">8</span>,<span class="number">9</span>])  <span class="comment">// 返回 []; arry = [2,3,[8,9],1,&#x27;o90&#x27;,4]</span></span><br></pre></td></tr></table></figure>

<h2 id="来一张表"><a href="#来一张表" class="headerlink" title="来一张表"></a>来一张表</h2><table>
<thead>
<tr>
<th align="center">方法名</th>
<th align="center">功能</th>
<th align="center">原数组是否改变</th>
<th align="center">返回</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>length</strong></td>
<td align="center">获取数组长度</td>
<td align="center">NO</td>
<td align="center">被引用数组长度</td>
</tr>
<tr>
<td align="center"><strong>join</strong></td>
<td align="center">将数组元素连接起来以构建一个字符串</td>
<td align="center">NO</td>
<td align="center">转换后的字符串</td>
</tr>
<tr>
<td align="center"><strong>push</strong></td>
<td align="center">在尾部添加元素</td>
<td align="center"><strong>YES</strong></td>
<td align="center">新数组长度</td>
</tr>
<tr>
<td align="center"><strong>unshift</strong></td>
<td align="center">在头部添加元素</td>
<td align="center"><strong>YES</strong></td>
<td align="center">新数组长度</td>
</tr>
<tr>
<td align="center"><strong>concat</strong></td>
<td align="center">在尾部添加元素</td>
<td align="center">NO</td>
<td align="center">新数组</td>
</tr>
<tr>
<td align="center"><strong>pop</strong></td>
<td align="center">删除最后一个元素</td>
<td align="center"><strong>YES</strong></td>
<td align="center">被删除元素</td>
</tr>
<tr>
<td align="center"><strong>shift</strong></td>
<td align="center">删除第一个元素</td>
<td align="center"><strong>YES</strong></td>
<td align="center">被删除元素</td>
</tr>
<tr>
<td align="center"><strong>reverse</strong></td>
<td align="center">颠倒数组元素顺序</td>
<td align="center"><strong>YES</strong></td>
<td align="center">对数组的引用</td>
</tr>
<tr>
<td align="center"><strong>sort</strong></td>
<td align="center">数组元素排序</td>
<td align="center"><strong>YES</strong></td>
<td align="center">对数组的引用</td>
</tr>
<tr>
<td align="center"><strong>slice</strong></td>
<td align="center">根据索引返回数组的一部分</td>
<td align="center">NO</td>
<td align="center">根据索引返回数组的一部分</td>
</tr>
<tr>
<td align="center"><strong>splice</strong></td>
<td align="center">插入、删除或替换数组的元素</td>
<td align="center"><strong>YES</strong></td>
<td align="center">被移除元素组成的数组</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>Array</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>常用javascript代码片段</title>
    <url>/2017-11-26/javascript-sinpats.html</url>
    <content><![CDATA[<blockquote>
<p>下面记录的主要是本人在项目中遇到的一些问题的解决方案或者个人觉得精妙的代码，方案也许来自于自己的想法，也有可能来自于网络（我尽量给出出处，以便大家追源溯流），也许干脆就是一个插件库（实际在项目中对于一些小的功能个人是拒绝引入不纯粹的三方库的）。肯定，这其中有些方案也不是尽善尽美，我会一一列出。如果对于某个问题在你看来有更好的解决方案，请不吝指出！</p>
</blockquote>
<h2 id="placeholder属性支持"><a href="#placeholder属性支持" class="headerlink" title="placeholder属性支持"></a>placeholder属性支持</h2><p>有时候项目中placeholder也许要兼容某些特殊的浏览器，所以才有了下面这段代码。这种方案有一个缺点就是：如果你恰好要对这个输入框绑定focus事件并操作它的值，必须要小心处理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修复不支持placeholder属性 start</span></span><br><span class="line"><span class="keyword">const</span> isSurportPlder = <span class="string">&quot;placeholder&quot;</span> <span class="keyword">in</span> <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;input&quot;</span>); <span class="comment">// 判断浏览器是否支持 placeholder</span></span><br><span class="line"><span class="keyword">if</span> (!isSurportPlder) &#123;</span><br><span class="line">  $(<span class="string">&quot;[placeholder]&quot;</span>).<span class="title function_">focus</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _this = $(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (_this.<span class="title function_">val</span>() == _this.<span class="title function_">attr</span>(<span class="string">&quot;placeholder&quot;</span>)) &#123;</span><br><span class="line">      _this.<span class="title function_">val</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">blur</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _this = $(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (_this.<span class="title function_">val</span>() == <span class="string">&#x27;&#x27;</span> || _this.<span class="title function_">val</span>() == _this.<span class="title function_">attr</span>(<span class="string">&quot;placeholder&quot;</span>)) &#123;</span><br><span class="line">      _this.<span class="title function_">val</span>(_this.<span class="title function_">attr</span>(<span class="string">&quot;placeholder&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">blur</span>();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h2><p>关于格式化时间有很多插件，其中比较有名的就可以列很大一堆出来，比如老牌的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9tb21lbnQ=">moment.js<i class="fa fa-external-link-alt"></i></span>，最近比较多star的<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21vbWVudC9sdXhvbg==">luxon.js<i class="fa fa-external-link-alt"></i></span>; 对于为什么不选择他么，上面已经说了原因了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">formate</span>(<span class="params">fmt, date</span>) &#123;</span><br><span class="line">    date = <span class="keyword">new</span> <span class="title class_">Date</span>(date).<span class="title function_">toString</span>() === <span class="string">&#x27;Invalid Date&#x27;</span> ? <span class="keyword">new</span> <span class="title class_">Date</span>() : <span class="keyword">new</span> <span class="title class_">Date</span>(date);</span><br><span class="line">    <span class="keyword">const</span> _rules = [&#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;[yY]&#123;4&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: date.<span class="title function_">getFullYear</span>()</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;M+&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: date.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;[dD]+&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: date.<span class="title function_">getDate</span>()</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;h+&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: date.<span class="title function_">getHours</span>()</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;m+&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: date.<span class="title function_">getMinutes</span>()</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;s+&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: date.<span class="title function_">getSeconds</span>()</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        <span class="attr">rule</span>: <span class="string">&#x27;ms&#123;1,2&#125;&#x27;</span>,</span><br><span class="line">        <span class="attr">value</span>: date.<span class="title function_">getMilliseconds</span>()</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    _rules.<span class="title function_">forEach</span>(<span class="function">(<span class="params">_r</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> rule = _r.<span class="property">rule</span>, val = _r.<span class="property">value</span>;</span><br><span class="line">        fmt = fmt.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(rule), <span class="keyword">function</span> (<span class="params">$1</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> rLen = val.<span class="title function_">toString</span>().<span class="property">length</span>, fLen = $1.<span class="property">length</span>;</span><br><span class="line">            <span class="keyword">return</span> (fLen !== <span class="number">2</span> || rLen &gt;= fLen) ? val : [<span class="string">&#x27;00&#x27;</span>, val].<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">substr</span>(rLen);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解析浏览器的版本等详细信息"><a href="#解析浏览器的版本等详细信息" class="headerlink" title="解析浏览器的版本等详细信息"></a>解析浏览器的版本等详细信息</h2><p>浏览器的判断涉及到很多复杂的变量和参数，所以偷懒选取了一个比较好的库，这个库它唯一的功能就是识别浏览器的版本等详细信息。<br>如果大家有更好的库，请推荐过来！</p>
<p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL211bXV5L2Jyb3dzZXI=">browser.js<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="数字转换成千分位格式-如：123-456-9-89"><a href="#数字转换成千分位格式-如：123-456-9-89" class="headerlink" title="数字转换成千分位格式(如：123,456,9.89)"></a>数字转换成千分位格式(如：123,456,9.89)</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">translateThree</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/(\d&#123;3&#125;(?=\d)(?!\d+\.|$))/g</span>, <span class="string">&#x27;$1,&#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断任意数据的类型"><a href="#判断任意数据的类型" class="headerlink" title="判断任意数据的类型"></a>判断任意数据的类型</h2><p>精准的判断类型，<code>&#39;2&#39;</code>会识别成<code>string</code>类型，<code>2</code>会识别成<code>number</code>类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tryType</span>(<span class="params">para</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> type = <span class="keyword">typeof</span> para;</span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&quot;number&quot;</span> &amp;&amp; <span class="built_in">isNaN</span>(para)) <span class="keyword">return</span> <span class="string">&quot;NaN&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (type !== <span class="string">&quot;object&quot;</span>) <span class="keyword">return</span> type;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span></span><br><span class="line">        .<span class="title function_">call</span>(para)</span><br><span class="line">        .<span class="title function_">replace</span>(<span class="regexp">/[\[\]]/g</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        .<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)[<span class="number">1</span>]</span><br><span class="line">        .<span class="title function_">toLowerCase</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="判断是不是一个可计算的数字"><a href="#判断是不是一个可计算的数字" class="headerlink" title="判断是不是一个可计算的数字"></a>判断是不是一个可计算的数字</h2><p>上面的<code>tryType</code>方法会将<code>&#39;2&#39;</code>和<code>2</code>区别成两种类型，而这个方法将忽略这种区别</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isNumber</span>(<span class="params">para</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">isNumber</span>) <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">isNumber</span>(para);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Number</span>.<span class="property">isNumber</span>) <span class="keyword">return</span> <span class="title class_">Number</span>.<span class="title function_">isNumber</span>(para);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> para !== <span class="string">&quot;undefined&quot;</span> &amp;&amp; !<span class="built_in">isNaN</span>(para);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="深度取值防止代码挂掉"><a href="#深度取值防止代码挂掉" class="headerlink" title="深度取值防止代码挂掉"></a>深度取值防止代码挂掉</h2><p>在项目中经常会遇到层级很深的<code>json</code>数据，这时候可能就会写类似这样的代码<code>a[2].list[3].name</code>，这种代码很不可靠，很容易由于数据的一点小错误，导致整段js代码挂掉。出的问题多了自然就会思考问题的解决方案，正当我苦思不得其解时，看到一篇文章<span class="exturl" data-url="aHR0cDovL3d3dy5qaWFuc2h1LmNvbS9wLzExZmM3NWYyODMwMg==">如何优雅安全地在深层数据结构中取值<i class="fa fa-external-link-alt"></i></span>，他详细的分析了深层取值如何避免报错的情况。<br>我阅读了博主的文章，整理了一下思路，没有像原博主那样使用<code>xs &amp;&amp; xs[x]</code>判断来打断取值，是因为这种情况可能会把<code>0</code>这种类型的值误伤</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getValueFromDeepData</span> (<span class="params">props, target</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!props || !target) <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    <span class="keyword">return</span> props.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, nxt</span>) =&gt;</span> (<span class="keyword">typeof</span> pre === <span class="string">&#x27;undefined&#x27;</span> || <span class="keyword">typeof</span> pre[nxt] === <span class="string">&#x27;undefined&#x27;</span> ? <span class="literal">undefined</span> : pre[nxt]), target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="反转义字符串"><a href="#反转义字符串" class="headerlink" title="反转义字符串"></a>反转义字符串</h2><p>何谓反转义字符串？就是后端在传输HTML代码的时候往往会对字符串处理：把一些特殊符号转义了；当我们拿到HTML渲染到页面希望他按照HTML代码的格式来显示，而不是按照转义的字符串显示成文本，所以我们需要对这段字符串反转义！<br>网上看到很多解决方案是通过正则的方式一一替换过来，但是个人觉得这样不好维护。后面发现一种浏览器自动转换的办法，利用这一特性，可以通过js创建一个虚拟的DOM节点，然后把需要转义的字符串使用innerHTML方法放进去，再通过nodeValue方法取出来。<br>但这种方法需要注意的是：<code>e.childNodes</code>是一个数组，它将<code>_html</code>分段（每65536字符分一段）存储到<code>e.childNodes[i]</code>中，使用<code>e.childNodes</code>方法取得反转义后的字符串需要循环<code>e.childNodes</code>数组。我看到网上很多方法都是直接取的<code>e.childNodes[0].nodeValue</code>，这样在内容过多的时候，是无法把数据取完整的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">htmlDecode</span>(<span class="params">str</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> e = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>), _html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    e.<span class="property">innerHTML</span> = str;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; e.<span class="property">childNodes</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        _html += e.<span class="property">childNodes</span>[i].<span class="property">nodeValue</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> _html;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="未完"><a href="#未完" class="headerlink" title="未完"></a>未完</h2>]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>sinpats</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript常用见问题之变量类型判断终极篇</title>
    <url>/2017-03-31/javascript-type.html</url>
    <content><![CDATA[<blockquote>
<p>类型判断是我们在编程中常遇到的棘手问题，严格的变量类型约束会为代码减少很多致命的BUG。本文是对常用到的类型判断的一个整理，以求以最简洁的方式来判断变量的类型。<br/>本文所有的如果没特指，都是基于ES5的原生javascript</p>
</blockquote>
<h2 id="变量的基本类型"><a href="#变量的基本类型" class="headerlink" title="变量的基本类型"></a>变量的基本类型</h2><p><code>JavaScript</code>变量包含两种不同的数据类型的值：<strong>基本类型</strong>和<strong>引用类型</strong>。基本类型是指简单的数据，有<code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code>(null可以算作是一个特殊的基本数据类型)，而引用类型指那些可能包含多个值的对象，有<code>Object</code>、<code>Array</code>、<code>Date</code>、<code>RegExp</code>、<code>Function</code>等。在<code>JavaScript</code>中，我们通过<code>var</code>来声明变量，由于<code>JavaScript</code>弱语言类型，我们无法在申明的时候规定他的类型，<code>JavaScript</code>变量的类型是随变量的值改变而改变的。为了代码的安全性，在有些情况下我们要判断变量值的类型，如何正确的判断变量的类型就成了一个比较有深度的问题。下图列举一些常见的类型：</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">举例</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Null</strong></td>
<td align="center">null</td>
</tr>
<tr>
<td align="center"><strong>Undefined</strong></td>
<td align="center">undefined、未赋值的变量</td>
</tr>
<tr>
<td align="center"><strong>Boolean</strong></td>
<td align="center">true、false</td>
</tr>
<tr>
<td align="center"><strong>Number</strong></td>
<td align="center">-1、0 、 1、 NaN</td>
</tr>
<tr>
<td align="center"><strong>String</strong></td>
<td align="center">‘1’、’a’</td>
</tr>
<tr>
<td align="center"><strong>Array</strong></td>
<td align="center">[]、new Array()</td>
</tr>
<tr>
<td align="center"><strong>Object</strong></td>
<td align="center">{}、new Object()</td>
</tr>
<tr>
<td align="center"><strong>Function</strong></td>
<td align="center">function(){}</td>
</tr>
</tbody></table>
<p>判断他们的类型，第一时间可能你会想到用<code>typeof</code>去检测它们的类型，然后你就崩溃了：明明是<code>Null</code>为什么结果却是<code>oject</code>，明明是<code>Array</code>为什么还是<code>obejct</code>？…因此可以看出<code>typeof</code>方法不是很可靠，我们必须寻找一种行之有效的方法来解决这个问题？请继续往下读(为了方便阅读，下文中所有的<code>para</code>表示要判断的变量)：</p>
<ul>
<li>isNaN(para)</li>
<li>!para</li>
<li>typeof para</li>
<li>Object.prototype.toString.call(para);</li>
</ul>
<p>除了上面这些方法，未来可能会有更多方法来增强变量的约束和判断，比如<code>isNumber</code>等</p>
<h2 id="isNaN-para"><a href="#isNaN-para" class="headerlink" title="isNaN(para)"></a>isNaN(para)</h2><p>用来判断是否为<code>number</code>类型的专有方法。但是需要注意的是，如果使用<code>typeof</code>判断那么结果会是<code>number</code>。</p>
<h2 id="para"><a href="#para" class="headerlink" title="!para"></a>!para</h2><p>常用来判断一个变量是否存在，面对<code>Arry</code>、<code>Object</code>等<strong>引用类型变量</strong>时无论是否为空都会被转换成<code>true</code></p>
<h2 id="typeof-para"><a href="#typeof-para" class="headerlink" title="typeof para"></a>typeof para</h2><p>事实证明<code>typeof</code>并不是万能的，在对除<code>Null</code>以外的<strong>基本类型</strong>变量是相当有威力的，但是对<strong>引用类型变量</strong>和<code>Null</code>时都会被识别成<code>object</code>，但是请注意：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> &#123;&#125;; <span class="comment">//object</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="title class_">Object</span>; <span class="comment">//Function</span></span><br></pre></td></tr></table></figure>
<p>为什么会出现这样的情况呢？因为<code>Object</code>是一个构造函数，而不是<code>object</code>数据类型对象，同理<code>Array</code>，<code>Date</code>，<code>Function</code>等都是属于构造函数</p>
<h2 id="Object-prototype-toString-call-para"><a href="#Object-prototype-toString-call-para" class="headerlink" title="Object.prototype.toString.call(para)"></a>Object.prototype.toString.call(para)</h2><p>前面的<code>typeof</code>死在半路，无法打探到<strong>引用类型变量</strong>和<code>null</code>的真实情报，但是我们得出了另一个情报：**他们都是<code>obejct</code>**。别慌，我们另外一个强大的武器，可以直指要害，<code>Object.prototype.toString.call(para)</code></p>
<h2 id="判断结果比较表"><a href="#判断结果比较表" class="headerlink" title="判断结果比较表"></a>判断结果比较表</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">值</th>
<th align="center">isNaN(para)</th>
<th align="center">!para</th>
<th align="center">typeof para</th>
<th align="center">toString(para)</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>Null</strong></td>
<td align="center">null</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">obejct</td>
<td align="center">[obejct Null]</td>
</tr>
<tr>
<td align="center"><strong>Undefined</strong></td>
<td align="center">undefined</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">undefined</td>
<td align="center">[obejct Undefined]</td>
</tr>
<tr>
<td align="center"><strong>Boolean</strong></td>
<td align="center">true&#x2F;false</td>
<td align="center">true</td>
<td align="center">false&#x2F;true</td>
<td align="center">true</td>
<td align="center">[obejct Boolean]</td>
</tr>
<tr>
<td align="center"><strong>Number</strong></td>
<td align="center">-1</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">number</td>
<td align="center">[obejct Number]</td>
</tr>
<tr>
<td align="center"><strong>Number</strong></td>
<td align="center">0</td>
<td align="center">false</td>
<td align="center">true</td>
<td align="center">number</td>
<td align="center">[obejct Number]</td>
</tr>
<tr>
<td align="center"><strong>Number</strong></td>
<td align="center">1</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">number</td>
<td align="center">[obejct Number]</td>
</tr>
<tr>
<td align="center"><strong>Number</strong></td>
<td align="center">NaN</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">number</td>
<td align="center">[obejct  Number]</td>
</tr>
<tr>
<td align="center"><strong>String</strong></td>
<td align="center">‘1’</td>
<td align="center">false</td>
<td align="center">false</td>
<td align="center">string</td>
<td align="center">[obejct String]</td>
</tr>
<tr>
<td align="center"><strong>String</strong></td>
<td align="center">‘a’</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">string</td>
<td align="center">[obejct String]</td>
</tr>
<tr>
<td align="center"><strong>String</strong></td>
<td align="center">‘’</td>
<td align="center">true</td>
<td align="center">true</td>
<td align="center">string</td>
<td align="center">[obejct String]</td>
</tr>
<tr>
<td align="center"><strong>String</strong></td>
<td align="center">‘ ‘(中间包含空格)</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">string</td>
<td align="center">[obejct String]</td>
</tr>
<tr>
<td align="center"><strong>Array</strong></td>
<td align="center">[]&#x2F;[4]</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">obejct</td>
<td align="center">[obejct Array]</td>
</tr>
<tr>
<td align="center"><strong>Object</strong></td>
<td align="center">{}&#x2F;{n:4}</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">obejct</td>
<td align="center">[obejct Object]</td>
</tr>
<tr>
<td align="center"><strong>Function</strong></td>
<td align="center">function(){}</td>
<td align="center">true</td>
<td align="center">false</td>
<td align="center">obejct</td>
<td align="center">[obejct Function]</td>
</tr>
</tbody></table>
<h2 id="总结方法"><a href="#总结方法" class="headerlink" title="总结方法"></a>总结方法</h2><p>根据上面的表格对比，我整理了一些常见的方法。并且再比较结果精准的情况下尽可能的简化比较过程.</p>
<h4 id="判断数字-非严格"><a href="#判断数字-非严格" class="headerlink" title="判断数字(非严格)"></a>判断数字(非严格)</h4><p>字符串’<code>1</code>‘会被识别成<code>number</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isNumber</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">isNaN</span>(para);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断数字-严格"><a href="#判断数字-严格" class="headerlink" title="判断数字(严格)"></a>判断数字(严格)</h4><p>在必要的情况下使用：此方法会把字符串’<code>1</code>‘识别成<code>string</code>类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isStrictNumber</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !<span class="built_in">isNaN</span>(para) &amp;&amp; <span class="keyword">typeof</span> para === <span class="string">&#x27;number&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断字符串（非严格）"><a href="#判断字符串（非严格）" class="headerlink" title="判断字符串（非严格）"></a>判断字符串（非严格）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isString</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> para === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断字符串（严格）"><a href="#判断字符串（严格）" class="headerlink" title="判断字符串（严格）"></a>判断字符串（严格）</h4><p>在必要的情况下使用：此种方法会把字符串’<code>1</code>‘识别成<code>number</code>类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isStrictString</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">isNaN</span>(para) &amp;&amp; <span class="keyword">typeof</span> para === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断一般数据类型-即非引用类型"><a href="#判断一般数据类型-即非引用类型" class="headerlink" title="判断一般数据类型(即非引用类型)"></a>判断一般数据类型(即非引用类型)</h4><p>注意：使用typeof判断<code>null</code>结果为<code>object</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isBasicType</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> para !== <span class="string">&#x27;obejct&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为null-不能识别’’"><a href="#判断是否为null-不能识别’’" class="headerlink" title="判断是否为null(不能识别’’)"></a>判断是否为null(不能识别’’)</h4><p>此方法只能识别<code>null</code>，如果要包含’’，请结合方法<code>isStringNull()</code>一起使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isNull</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !para &amp;&amp; <span class="keyword">typeof</span> para === <span class="string">&#x27;object&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为空字符串-不包含空格"><a href="#判断是否为空字符串-不包含空格" class="headerlink" title="判断是否为空字符串(不包含空格)"></a>判断是否为空字符串(不包含空格)</h4><p>此方法只能识别<code>&#39;&#39;</code>，如果要包含<code>null</code>，请结合方法<code>isNull()</code>一起使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isStringtNull</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !para &amp;&amp; <span class="keyword">typeof</span> para === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为undefined"><a href="#判断是否为undefined" class="headerlink" title="判断是否为undefined"></a>判断是否为<code>undefined</code></h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isUndefined</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> para === <span class="string">&#x27;undefined&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断是否为false"><a href="#判断是否为false" class="headerlink" title="判断是否为false"></a>判断是否为<code>false</code></h4><p>当为<code>null</code>,<code>undefined</code>,<code>&#39;&#39;</code>,<code>0</code>,<code>-0</code>,<code>false</code>,<code>NaN</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isFalse</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !para;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断对象（非严格1–所有的obejct对象）"><a href="#判断对象（非严格1–所有的obejct对象）" class="headerlink" title="判断对象（非严格1–所有的obejct对象）"></a>判断对象（非严格1–所有的obejct对象）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isAllObject</span>(<span class="params">_v</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> _v === <span class="string">&#x27;obejct&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断对象（非严格2–除去null的所有object对象）-判断引用类型"><a href="#判断对象（非严格2–除去null的所有object对象）-判断引用类型" class="headerlink" title="判断对象（非严格2–除去null的所有object对象）&lt;–&gt; 判断引用类型"></a>判断对象（非严格2–除去null的所有object对象）&lt;–&gt; 判断引用类型</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">_v</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> !!v &amp;&amp; <span class="keyword">typeof</span> _v === <span class="string">&#x27;obejct&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断对象（严格–只识别-JSON对象）"><a href="#判断对象（严格–只识别-JSON对象）" class="headerlink" title="判断对象（严格–只识别{}JSON对象）"></a>判断对象（严格–只识别{}JSON对象）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isStrictObject</span>(<span class="params">_v</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(_v) === <span class="string">&#x27;[object Object]&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断数组"><a href="#判断数组" class="headerlink" title="判断数组"></a>判断数组</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(para) === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断对象"><a href="#判断对象" class="headerlink" title="判断对象"></a>判断对象</h4><p>这里特指{}类<code>JSON</code>对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(para) === <span class="string">&#x27;[object Object]&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="判断可执行函数"><a href="#判断可执行函数" class="headerlink" title="判断可执行函数"></a>判断可执行函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isFunction</span>(<span class="params">para</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> para === <span class="string">&#x27;function&#x27;</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当我们需要判断其他类型时，完全可以参照上面的表来写出自己的方法哦。<br>当然现在前端各种流行库不断推陈出新，我们完全可以直接使用别人封装好的库来实现这些功能，比如<code>underscore.js</code>、<code>lodash.js</code>等，但是编码的乐趣不就是在于自己解决最本质的问题么。所以即使有这么多的流行库大行其道，也不妨碍我们了解这些知识的初心，说不定哪天你自己也写出一个很火的库呢~<br>当然随着ES6标准的不断被各大浏览器厂商支持，ES6的普及度越来越广，这些方法都会被内置到原生<code>javascript</code>内部吧(有些方法已经加进去了~)。</p>
]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>typeof</tag>
        <tag>object</tag>
      </tags>
  </entry>
  <entry>
    <title>Git系列之新手入门</title>
    <url>/2016-06-20/learn-git-1.html</url>
    <content><![CDATA[<blockquote>
<p>工欲善其事，必先利其器。git一个不可或缺的利器，其魅力值得我们慢慢品尝！</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官网下载最新版本安装，然后查看是否安装成功</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git -v</span><br><span class="line">git version 2.7.3.windows.1  //2.7.3为当前版本</span><br></pre></td></tr></table></figure>

<h2 id="全局个人信息配置"><a href="#全局个人信息配置" class="headerlink" title="全局个人信息配置"></a>全局个人信息配置</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;username&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;email&quot;</span></span><br></pre></td></tr></table></figure>

<p>windows环境也可以打开计算机用户文件夹下的.gitconfig编辑</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = username</span><br><span class="line">    email = email</span><br></pre></td></tr></table></figure>

<h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> storage</span><br><span class="line">$ git init //初始化当前目录为本地仓库</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> D:/storages/.git/  //初始化了一个空的目录为本地仓库</span><br></pre></td></tr></table></figure>

<h3 id="第一次提交-提交到本地"><a href="#第一次提交-提交到本地" class="headerlink" title="第一次提交(提交到本地)"></a>第一次提交(提交到本地)</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&quot;添加项目文档简介&quot;</span>  //-m 参数后面跟表示对当前提交的一个简单说明</span><br></pre></td></tr></table></figure>

<h3 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h3><p>查看当前文件处于何种状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br></pre></td></tr></table></figure>

<h3 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h3><p>当你<code>add</code>或<code>commit</code>了错误的文件时，可以使用以下命令来撤回<code>add</code>或者<code>commit</code>;<br>那么你必须首先明白工作区和暂存区是什么？<br>直白的说.git文件夹所在的目录(即<code>git init</code>初始化的目录)为当前工作区<br>当<code>add</code>之后，<code>add</code>的文件就会进入暂存区<br>当<code>commit</code>之后，暂存区就会清空，<code>commit</code>的文件就会进入本地当前的分支(如master分支)</p>
<p>PS：关于工作区和暂存区更详细的解释可以去看廖雪峰<span class="exturl" data-url="aHR0cDovL3d3dy5saWFveHVlZmVuZy5jb20vd2lraS8wMDEzNzM5NTE2MzA1OTI5NjA2ZGQxODM2MTI0ODU3OGM2N2I4MDY3YzhjMDE3YjAwMC8wMDEzNzQ1Mzc0MTUxNzgyZWI2NThjNWE1Y2E0NTRlYWE0NTE2NjEyNzU4ODZjNjAwMA==">工作区和暂存区<i class="fa fa-external-link-alt"></i></span></p>
<h3 id="丢弃工区的修改"><a href="#丢弃工区的修改" class="headerlink" title="丢弃工区的修改"></a>丢弃工区的修改</h3><p>命令<code>git checkout -- filename</code>可以把<code>filename</code>文件在工作区的修改全部撤销</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout -- README.md</span><br></pre></td></tr></table></figure>

<h3 id="撤销暂存区的修改"><a href="#撤销暂存区的修改" class="headerlink" title="撤销暂存区的修改"></a>撤销暂存区的修改</h3><p>命令<code>git reset HEAD filename</code>可以把<code>filename</code>文件在暂存区的修改全部撤销</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD README.md</span><br><span class="line">$ git checkout -- README.md //--参数不能省</span><br><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with <span class="string">&#x27;origin/master&#x27;</span>.</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>

<p>当然<code>reset</code> 命令,不仅能够撤销暂存区的内容，还能回退版本，即使你错误提交，也可以用<code>reset</code>回滚到之前的版本<br>如果你提交了错误文件，可以使用以下命令来回退;</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<p><code>git reset --hard HEAD^</code>表示回退到上一个版本，<code>HEAD</code>后面的参数可以跟<code>commit ID</code>，这个ID可以通过以下命令获得</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 97c8460bc1cda8233866686d9cae270e0e0113f1</span><br><span class="line">Author: 2ue &lt;jie746635835@163.com&gt;</span><br><span class="line">Date:   Mon Jun 20 15:44:01 2016 +0800</span><br><span class="line"></span><br><span class="line">    update README.md</span><br><span class="line"></span><br><span class="line">.....(中间有10条日志)</span><br><span class="line"></span><br><span class="line">commit 2d936223341333384dd41533dd44ba8e0640493c</span><br><span class="line">Author: 2ue &lt;jie746635835@163.com&gt;</span><br><span class="line">Date:   Mon Jun 01 13:16:22 2016 +0800</span><br><span class="line"></span><br><span class="line">    README.md</span><br></pre></td></tr></table></figure>

<p><code>commit 97c8460bc1cda8233866686d9cae270e0e0113f1</code>，这一长串就是我们所需的ID,一般情况下，只需要前7位就够了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard HEAD 2d93622 //回退到commit 2d936223341333384dd41533dd44ba8e0640493c</span><br><span class="line">$ git reset --hard HEAD~12 //回退到往上第12个版本，也是2d93622这个版本</span><br></pre></td></tr></table></figure>

<h3 id="提交到服务器"><a href="#提交到服务器" class="headerlink" title="提交到服务器"></a>提交到服务器</h3><p>当<code>commit</code>后，你做出的修改只是提交到了暂存区，下一步就需要把代码提交到服务器。这里的服务器，可以自己搭建，也可以是公司的，或者第三方的。这里我们将代码提交到<code>github</code>上(假设你是已经有一个<code>github</code>账户，并创建了一个仓库)。</p>
<h3 id="本地生成SSH-KEY"><a href="#本地生成SSH-KEY" class="headerlink" title="本地生成SSH KEY"></a>本地生成SSH KEY</h3><p><code>SSH KEY</code>就是连通本地与<code>github</code>的桥梁，钥匙，使用以下命令来生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后回车:</p>
<ul>
<li>提示设置密码<ul>
<li>如果不设置，直接按回车，然后会提示你确认密码，再按一次回车</li>
<li>如果设置密码，输入你想设置的密码，并确认，这样以后每次提交需要输入密码</li>
</ul>
</li>
<li>提示生成key的文件名<ul>
<li>如果不修改，则使用默认文件名<code>id_rsa</code></li>
<li>如果你有在该电脑管理多个key或者已经有生成的key占用了该文件名，则需要重命令</li>
</ul>
</li>
</ul>
<p>这里简单起见，先不设置密码，并保持文件名默认</p>
<p>然后在用户主目录（例如如果是windows系统一般就在：C:\Users\Administrator）找到<code>.ssh</code>，其中<code>id_rsa</code>表示私钥不能泄露和<code>id_rsa.pub</code>表示公钥，用于对外。</p>
<h3 id="github设置本地公钥"><a href="#github设置本地公钥" class="headerlink" title="github设置本地公钥"></a>github设置本地公钥</h3><p>打开<code>id_rsa.pub</code>，复制里面的全部内容；<br>进入<code>github</code>账户；<br>找到 <code>setting</code>；<br>打开<code>SSH KEYS</code>新建一个<code>SSH KEY</code>，名字随便取，然后粘贴<code>id_rsa.pub</code>的内容，保存；</p>
<h3 id="测试是否连通"><a href="#测试是否连通" class="headerlink" title="测试是否连通"></a>测试是否连通</h3><p>理论上讲，上一步操作无特殊错误，就已经和<code>github</code>连通的，为了放心，我们可以测试一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;/c/Users/Administrator/.ssh/id_rsa&#x27;</span>:  //如果设置了密码，此处将会提示你输入密码</span><br><span class="line">Hi 2ue! You<span class="string">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure>
<p>上面就是成功的提示</p>
<h3 id="github仓库和本地仓库关联"><a href="#github仓库和本地仓库关联" class="headerlink" title="github仓库和本地仓库关联"></a>github仓库和本地仓库关联</h3><p>有两种方式把本地仓库和<code>github</code>仓库关联起来</p>
<h4 id="方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样"><a href="#方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样" class="headerlink" title="方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样"></a>方法一：clone自己的仓库，简单，并且本地文件目录和github上名字一样</h4><p>登陆账号，新建仓库(new repository)；<br>进入仓库主页，找到按钮<code>clone or download</code>按钮，复制里面的<code>git@github.com:userName/repositoryName.git</code>;<br>打开<code>git bash</code>，clone；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:userName/repositoryName.git</span><br></pre></td></tr></table></figure>

<p>就会把这个项目克隆到你当前目录下。此时你就可以顺畅的像<code>github</code>推送你的东西了。</p>
<h4 id="方法二：利用命令关联仓库，本地仓库名可以和github的仓库名不一样"><a href="#方法二：利用命令关联仓库，本地仓库名可以和github的仓库名不一样" class="headerlink" title="方法二：利用命令关联仓库，本地仓库名可以和github的仓库名不一样"></a>方法二：利用命令关联仓库，本地仓库名可以和<code>github</code>的仓库名不一样</h4><p>假设你github上有一个项目，<code>git@github.com:userName/repositoryName.git</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> testRepository  //新建目录testRepository</span><br><span class="line">$ <span class="built_in">cd</span> testRepository  //切换到这个目录</span><br><span class="line">$ git init  //初始化当前目录</span><br><span class="line">$ git remote add origin git@github.com:userName/repositoryName.git</span><br><span class="line">// origin为本地暂存区的名字，为了语义化，建议默认为它</span><br><span class="line">// 注意github上的repositoryName与本地的testRepository可以不一样</span><br></pre></td></tr></table></figure>

<h2 id="提交-push"><a href="#提交-push" class="headerlink" title="提交(push)"></a>提交(push)</h2><h3 id="第一次提交"><a href="#第一次提交" class="headerlink" title="第一次提交"></a>第一次提交</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push -u origin master</span><br></pre></td></tr></table></figure>

<h3 id="第二次及以后"><a href="#第二次及以后" class="headerlink" title="第二次及以后"></a>第二次及以后</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>

<p>第一次提交带参数<code>-u</code>是为了让你本地和<code>github</code>的仓库保持同步。</p>
<h3 id="更新代码-pull"><a href="#更新代码-pull" class="headerlink" title="更新代码(pull)"></a>更新代码(pull)</h3><p>当我们在一台设备上对<code>github</code>提交(push)代码之后，在另外的设备上修改这个项目时就必须先从<code>github</code>更新代码，以保持代码的同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git pull</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。"><a href="#至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。" class="headerlink" title="至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。"></a>至此一个比较完整的流程走通了，当然在这些过程中也许还会遇到其它的问题，如，代码冲突，分支，分支合并等等。</h3><p><code>github</code>上创建一个新的项目<br><code>github repositoryName</code>：testGit<br><code>github userName</code>：2ue</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ makdir testGit   //创建一个空文件夹testGit(名字任意取)，做仓库</span><br><span class="line">$ <span class="built_in">cd</span> testGit    //切换到目录testGit</span><br><span class="line">$ git init    //初始化testGit为本地仓库</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;this repository is localhost&#x27;</span> &gt; README.md</span><br><span class="line">//创建文件README.md，并写入<span class="string">&#x27;this repository is localhost&#x27;</span></span><br><span class="line">//在window下以上操作的第一步和第四步可以在图形化界面中完成</span><br><span class="line">$ git add README.md</span><br><span class="line">$ git commit -m <span class="string">&#x27;add README.md&#x27;</span>//提交更新，并注释信息“add README.md”</span><br><span class="line">$ git remote add origin git@github.com:2ue/testGit.git   //关联github上的项目</span><br><span class="line">$ git push -u origin master   //提交到github</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git系列之常用命令（一）</title>
    <url>/2017-07-01/learn-git-2.html</url>
    <content><![CDATA[<blockquote>
<p>虽然有了git的图形化工具，但个人还是喜欢命令行，并且结合alias功能，也能非常快速的完成很多功能。记录一些项目中常用的git命令，方便查阅</p>
</blockquote>
<h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><p>可以查看工作区(edit即add之前)和暂存区(add之后，commit之前)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure>

<h2 id="提交到暂存区"><a href="#提交到暂存区" class="headerlink" title="提交到暂存区"></a>提交到暂存区</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//提交某个文件</span><br><span class="line">git add fileName</span><br><span class="line">//提交所有修改文件的三种写法</span><br><span class="line">git add *</span><br><span class="line">git add .</span><br><span class="line">git add --all</span><br></pre></td></tr></table></figure>
<h2 id="保存在本地仓库"><a href="#保存在本地仓库" class="headerlink" title="保存在本地仓库"></a>保存在本地仓库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;note text&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="提交到远程仓库"><a href="#提交到远程仓库" class="headerlink" title="提交到远程仓库"></a>提交到远程仓库</h2><p>其中origin是本地仓库名，remote是远程仓库分支名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push &lt;origin&gt; &lt;remote&gt;</span><br><span class="line">//如提交本覅origin到远程master分支</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><h3 id="查看分支"><a href="#查看分支" class="headerlink" title="查看分支"></a>查看分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//查看本地分支</span><br><span class="line">git branch</span><br><span class="line">//查看远程分支</span><br><span class="line">git branch -r</span><br><span class="line">//查看所有分支</span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

<h3 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch name</span><br></pre></td></tr></table></figure>

<h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//删除本地分支</span><br><span class="line">git branch -d name</span><br><span class="line">//删除远程分支两种方法</span><br><span class="line">git push origin :name //冒号不能省</span><br><span class="line">git branch -r -d origin/name</span><br></pre></td></tr></table></figure>

<h3 id="切换分支"><a href="#切换分支" class="headerlink" title="切换分支"></a>切换分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout name //如果分支不存在则创建一个名为name的新分支</span><br></pre></td></tr></table></figure>

<h3 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//例如：合并分支dev到master</span><br><span class="line">//首先保持dev和master分支最新，即在本地切换到对应分支，各pull一次</span><br><span class="line">//然后切换分支到最终要合并的分支上（此处为master）</span><br><span class="line">git checkout master</span><br><span class="line">//执行本地合并（合并dev到master）</span><br><span class="line">git merge dev</span><br><span class="line">//推送合并到远程</span><br><span class="line">git push origin master</span><br></pre></td></tr></table></figure>

<h3 id="放弃本地修改强制更新"><a href="#放弃本地修改强制更新" class="headerlink" title="放弃本地修改强制更新"></a>放弃本地修改强制更新</h3><blockquote>
<p>git fetch只是下载远程的库的内容，不做任何的合并；git reset把HEAD指向刚刚下载的最新的版本</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>

<h3 id="回退到某个历史版本"><a href="#回退到某个历史版本" class="headerlink" title="回退到某个历史版本"></a>回退到某个历史版本</h3><blockquote>
<p>首先使用git log命令获取某个历史版本的ID，假设ID是c3470ee7edf566cc359b666d3e27a38220abaf66</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//在本地回退到c3470ee7edf566cc359b666d3e27a38220abaf66版本</span><br><span class="line">git reset --hard c3470ee7edf566cc359b666d3e27a38220abaf66</span><br><span class="line">//推送到远程分支，注意：由于本地版本旧于远程仓库版本，这里需要使用-f参数，强制推送</span><br><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>mocha+chai使用记录</title>
    <url>/2017-10-10/mocha+chai.html</url>
    <content><![CDATA[<blockquote>
<p><code>mocha+chai</code>是比较流行的测试框架‘套装’，能实现一些基本的前端测试如函数功能测试，模拟登陆，异步测试,流程测试等</p>
</blockquote>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><h3 id="mocha"><a href="#mocha" class="headerlink" title="mocha"></a><span class="exturl" data-url="aHR0cDovL21vY2hhanMub3JnLw==">mocha<i class="fa fa-external-link-alt"></i></span></h3><h3 id="chai"><a href="#chai" class="headerlink" title="chai"></a><span class="exturl" data-url="aHR0cDovL2NoYWlqcy5jb20v">chai<i class="fa fa-external-link-alt"></i></span></h3><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><blockquote>
<p><code>mocha</code>是一个测试工具库，它只纯粹对测试行为(过程)进行描述；而<code>chai</code>是一个断言（推断）库，它可以将测试结果进行各种判断，以此推断是否符合预期，因此两者常常进行组合使用</p>
</blockquote>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//全局安装</span><br><span class="line">$ npm install -g mocha</span><br></pre></td></tr></table></figure>

<p>ps: 全局安装之后，<code>mocha</code>命令将会在全局注册，可以在任何地方使用<code>mocha</code>命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//安装项目依赖</span><br><span class="line">$ npm install mocha chai</span><br></pre></td></tr></table></figure>

<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">├── <span class="built_in">test</span> //测试用例</span><br><span class="line">│   ├── hooks.js //生命钩子</span><br><span class="line">│   ├── test.js //入口文件</span><br><span class="line">│   └── unit //测试单例</span><br><span class="line">│       ├── add.js</span><br><span class="line">│       └── ...</span><br><span class="line">└── src //业务代码</span><br><span class="line">    ├── add.js</span><br><span class="line">    └── ...</span><br></pre></td></tr></table></figure>

<p>所有测试代码都在test目录，所有的业务代码都在src目录</p>
<h3 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//src/add.js</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = add;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//test/unit/add.js</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">&#x27;../../src/add.js&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> expect = <span class="built_in">require</span>(<span class="string">&#x27;chai&#x27;</span>).<span class="property">expect</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;加法函数&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;1 + 3 = 4&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">expect</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">3</span>)).<span class="property">to</span>.<span class="property">be</span>.<span class="title function_">equal</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha mocha/unit/add</span><br><span class="line">  加法函数</span><br><span class="line">    √ 1 + 3 = 4</span><br><span class="line">  1 passing (16ms)</span><br></pre></td></tr></table></figure>

<h2 id="Expect-Should-Assert"><a href="#Expect-Should-Assert" class="headerlink" title="Expect&#x2F;Should&#x2F;Assert"></a>Expect&#x2F;Should&#x2F;Assert</h2><pre><code>The Expect / Should API covers the BDD assertion styles.
The Assert API covers the TDD assertion style.
</code></pre>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><ul>
<li>非<code>promise</code>异步一定要带上<code>done()</code>，用于通知<code>mocha</code>该测试已经完成</li>
<li>异步通常和参数<code>-t</code>结合一起用</li>
</ul>
<h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//test/unit目录下add.js和minus.js</span><br><span class="line">$ mocha <span class="built_in">test</span>/unit/&#123;add,minus&#125;.js</span><br><span class="line">//test/unit目录下所有js后缀的文件</span><br><span class="line">$ mocha <span class="built_in">test</span>/unit/*.js</span><br></pre></td></tr></table></figure>

<p><code>mocha</code>支持<code>shell</code>和<code>node</code>的通配符匹配规则，更多通配符规则可以查看各自的文档</p>
<h2 id="命令行参数与配置文件mocha-opts"><a href="#命令行参数与配置文件mocha-opts" class="headerlink" title="命令行参数与配置文件mocha.opts"></a>命令行参数与配置文件mocha.opts</h2><h3 id="常用的命令行"><a href="#常用的命令行" class="headerlink" title="常用的命令行"></a>常用的命令行</h3><ul>
<li>–recursive</li>
</ul>
<p><code>Mocha</code>默认不对指定目录的子级目录匹配，如果需要使自己目录的测试用例运行，则需要加上<code>--recursive</code></p>
<ul>
<li>–reporter</li>
</ul>
<p>输出报告的格式，默认是<code>--reporter spec</code>,可以用<code>--reporters</code>命令查看有哪些输出格式</p>
<ul>
<li>–watch</li>
</ul>
<p>监听变化，每次修改自动执行test</p>
<ul>
<li>–timeout -t</li>
</ul>
<p><code>Mocha</code>默认每个测试用例最多执行<code>2000</code>毫秒，如果到时没有得到结果，就报错。对于涉及异步操作的测试用例，这个时间往往是不够的，需要用<code>-t</code>或<code>--timeout</code>参数指定超时门槛</p>
<ul>
<li>–hlep,-h</li>
</ul>
<p>查看有哪些命令<br><code>mocha.opts</code>放在<code>test</code>目录下，执行<code>mocha</code>命令时回去读取里面的配置<br>命令行参数可以写在<code>mocha.opts</code>文件内,如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha --reporter tap --recursive -t 3000</span><br></pre></td></tr></table></figure>

<p>等价于<br><code>test/mocha.opts</code>文件内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--reporter tap</span><br><span class="line">--recursive</span><br><span class="line">-t 13000</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mocha</span><br></pre></td></tr></table></figure>

<h2 id="hooks（钩子）"><a href="#hooks（钩子）" class="headerlink" title="hooks（钩子）"></a>hooks（钩子）</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;hooks&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">before</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在本区块的所有测试用例之前执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">after</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在本区块的所有测试用例之后执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeEach</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在本区块的每个测试用例之前执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">afterEach</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 在本区块的每个测试用例之后执行</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// test cases</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>可以写在测试用例内（每个<code>describe</code>块内），此时只对当前测试用例有效<br>也可以写在外部，此时对所有的测试用例有效</p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>内置<code>promise</code>对象</li>
<li><code>ES6</code>需要转码</li>
</ul>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js版本神器之nvm</title>
    <url>/2018-07-21/node.js-version-management-artifact-nvm.html</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Node Version Manager (nvm) 是一个易于使用的工具，可以帮助您在不同Node.js版本之间进行切换，以满足不同项目的需求。</p>
<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在软件开发过程中，因项目依赖和兼容性考虑，可能需要使用不同版本的Node.js。通过nvm，可以方便地管理多个Node.js版本，而无需担心全局安装的冲突问题。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="通用安装"><a href="#通用安装" class="headerlink" title="通用安装"></a>通用安装</h3><p>如果你在你的机器(无论是windows，macOs还是linux)上已经安装了node，则可以直接使用npm命令进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g nvm</span><br></pre></td></tr></table></figure>

<p>安装成功后，你可以跳过后续安装部分，进行阅读<a href="#%E4%BD%BF%E7%94%A8">使用</a>部分。<br>如果你没有办法通过以上方式进行安装，请接着进行阅读后续安装部分。</p>
<h3 id="在Windows上安装"><a href="#在Windows上安装" class="headerlink" title="在Windows上安装"></a>在Windows上安装</h3><p>下载Windows安装程序：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz">nvm-windows releases<i class="fa fa-external-link-alt"></i></span>，然后一路回车安装</p>
<p>有时候安装完成后，会出现等nvm命令无法识别类似情况：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm --verison</span><br><span class="line"></span><br><span class="line">nvm not fund</span><br></pre></td></tr></table></figure>

<p>请检查环境变量，如果不存在，则添加nvm到环境变量PATH中</p>
<h3 id="在Mac上安装"><a href="#在Mac上安装" class="headerlink" title="在Mac上安装"></a>在Mac上安装</h3><h4 id="使用Homebrew安装"><a href="#使用Homebrew安装" class="headerlink" title="使用Homebrew安装"></a>使用Homebrew安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install nvm</span><br></pre></td></tr></table></figure>

<h4 id="使用命令行安装"><a href="#使用命令行安装" class="headerlink" title="使用命令行安装"></a>使用命令行安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>安装完毕后，需要将nvm写入到环境变量中， <code>~/.bash_profile</code>, <code>~/.zshrc</code> 或 <code>~/.profile</code> 文件中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">&quot;<span class="variable">$HOME</span>/.nvm&quot;</span></span><br><span class="line">[ -s <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span> ] &amp;&amp; \. <span class="string">&quot;<span class="variable">$NVM_DIR</span>/nvm.sh&quot;</span></span><br></pre></td></tr></table></figure>

<p>修改完毕后，执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure>

<h3 id="在Linux上安装"><a href="#在Linux上安装" class="headerlink" title="在Linux上安装"></a>在Linux上安装</h3><p>和macos上安装一样，参照<a href="#%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%89%E8%A3%85">mac上安装-使用命令行安装</a></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="查看所有可用版本"><a href="#查看所有可用版本" class="headerlink" title="查看所有可用版本"></a>查看所有可用版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm ls-remote</span><br></pre></td></tr></table></figure>

<h3 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm install &lt;version&gt;</span><br></pre></td></tr></table></figure>

<h3 id="选择使用版本"><a href="#选择使用版本" class="headerlink" title="选择使用版本"></a>选择使用版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm use &lt;version&gt;</span><br></pre></td></tr></table></figure>

<h3 id="设置默认版本"><a href="#设置默认版本" class="headerlink" title="设置默认版本"></a>设置默认版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm <span class="built_in">alias</span> default &lt;version&gt;</span><br></pre></td></tr></table></figure>

<h3 id="卸载特定版本"><a href="#卸载特定版本" class="headerlink" title="卸载特定版本"></a>卸载特定版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nvm uninstall &lt;version&gt;</span><br></pre></td></tr></table></figure>

<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>切换Node.js版本时，请确保项目的依赖支持所选版本。</li>
<li>避免在生产环境频繁更改Node.js版本，以避免潜在的稳定性问题。</li>
</ul>
<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL252bS1zaC9udm0=">Node Version Manager (GitHub)<i class="fa fa-external-link-alt"></i></span></li>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2l0ZXBvaW50LmNvbS9xdWljay10aXAtbXVsdGlwbGUtdmVyc2lvbnMtbm9kZS1udm0v">How to Use Node Version Manager (nvm) for Node.js<i class="fa fa-external-link-alt"></i></span></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
        <category>nvm</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>nvm</tag>
        <tag>版本管理</tag>
      </tags>
  </entry>
  <entry>
    <title>node和npm版本管理器nvm的安装和使用</title>
    <url>/2017-08-21/nvm-node-version-manager.html</url>
    <content><![CDATA[<blockquote>
<p>nvm：一个node和npm的版本管理器（node&amp;npm version manager），能让你快速的在不同版本间切换。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2NvcmV5YnV0bGVyL252bS13aW5kb3dzL3JlbGVhc2Vz">官网下载<i class="fa fa-external-link-alt"></i></span><br>有两种版本<code>nvm-noinstall.zip</code>(便携版)和<code>nvm-setup.zip</code>(exe安装版)<br>两者唯一区别就是便携版需要手动配置全局变量，而安装版只需要在安装时选定安装目录则会自动配置好。</p>
<blockquote>
<p>注意：安装之前最好先卸载之前的<code>node</code></p>
</blockquote>
<h3 id="便携版安装"><a href="#便携版安装" class="headerlink" title="便携版安装"></a>便携版安装</h3><ul>
<li>下载最新版的<code>nvm-noinstall.zip</code>后解压放到<code>D:\devTools</code>(可以放到任意位置，此处是我安装的目录，注意文件夹名不能存在空格);  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">elevate.cmd</span><br><span class="line">elevate.vbs</span><br><span class="line">install.cmd</span><br><span class="line">LICENSE</span><br><span class="line">nvm.exe</span><br></pre></td></tr></table></figure></li>
<li>配置<code>nvm</code>，生成<code>settings.txt</code>，填写配置<br>  方法一：双击<code>install.cmd</code>，会生成<code>settings.txt</code>文件（生成位置就是你输入的地址，一般是在<code>nvm</code>目录下，如果不是，需要拷贝过来）<br>  方法二：直接在nvm目录下新建<code>settings.txt</code>文件  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root: D:\devTools\nvm</span><br><span class="line">path: D:\devTools\nodejsv</span><br><span class="line"><span class="built_in">arch</span>: 64</span><br><span class="line">proxy: none</span><br><span class="line">node_mirror: http://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure>
<ul>
<li>root ： nvm的存放地址</li>
<li>path ： 存放指向node版本的快捷方式，使用nvm的过程中会自动生成。一般写的时候与nvm同级。</li>
<li>arch ： 电脑系统是64位就写64,32位就写32</li>
<li>proxy ： 代理</li>
<li>node_mirror: node镜像源，安装node时会从此镜像源下载。</li>
<li>npm_mirror: 同上，npm镜像源</li>
</ul>
</li>
<li>全局变量配置<br>  1.添加变量<code>NVM_HOME</code>，值为<code>D:\devTools\nvm</code><br>  2.添加变量<code>NVM_SYMLINK</code>，值为<code>D:\devTools\nodejsv</code><br>  3.添加变量<code>NVM_HOME</code>和<code>NVM_SYMLINK</code>到全局变量<code>path</code>: 修改<code>path</code>的值最后加上<code>;%NVM_HOME%;%NVM_SYMLINK%;</code><br>到此便携版nvm安装完成</li>
</ul>
<h3 id="exe安装版"><a href="#exe安装版" class="headerlink" title="exe安装版"></a>exe安装版</h3><p>直接双击安装，可以使用默认的选项。也可以自己选择安装地址。然后安装过程中会自动把路径写入到全局变量。</p>
<blockquote>
<p>注意： 如果安装了杀毒软件，应该先关闭杀毒软件，因为写入全局变量是一个敏感操作，某些杀毒软件会报警（不关闭，报警时需要选择允许操作）</p>
</blockquote>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="版本检测"><a href="#版本检测" class="headerlink" title="版本检测"></a>版本检测</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm version</span><br><span class="line">1.1.6</span><br><span class="line">// or</span><br><span class="line">$ nvm v</span><br><span class="line">1.1.6</span><br></pre></td></tr></table></figure>

<h3 id="安装node-npm"><a href="#安装node-npm" class="headerlink" title="安装node&amp;npm"></a>安装node&amp;npm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm install [version]</span><br><span class="line">// 如果安装最新版的，直接使用</span><br><span class="line">$ nvm install latest</span><br></pre></td></tr></table></figure>

<h3 id="查看安装的node-npm"><a href="#查看安装的node-npm" class="headerlink" title="查看安装的node&amp;npm"></a>查看安装的node&amp;npm</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm list</span><br><span class="line">* 8.4.0 (Currently using 64-bit executable)</span><br><span class="line">6.9.0</span><br></pre></td></tr></table></figure>

<h3 id="切换node版本"><a href="#切换node版本" class="headerlink" title="切换node版本"></a>切换node版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm use [version]</span><br><span class="line">Now using node v8.4.0 (64-bit)</span><br></pre></td></tr></table></figure>

<h3 id="卸载某个版本node"><a href="#卸载某个版本node" class="headerlink" title="卸载某个版本node"></a>卸载某个版本node</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm uninstall [version]</span><br></pre></td></tr></table></figure>

<h3 id="nvm命令查看"><a href="#nvm命令查看" class="headerlink" title="nvm命令查看"></a>nvm命令查看</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm</span><br><span class="line">Running version 1.1.6.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">  nvm <span class="built_in">arch</span>                     : Show <span class="keyword">if</span> node is running <span class="keyword">in</span> 32 or 64 bit mode.</span><br><span class="line">  nvm install &lt;version&gt; [<span class="built_in">arch</span>] : The version can be a node.js version or <span class="string">&quot;latest&quot;</span> <span class="keyword">for</span> the latest stable version.</span><br><span class="line">                                 Optionally specify whether to install the 32 or 64 bit version (defaults to system <span class="built_in">arch</span>).</span><br><span class="line">                                 Set [<span class="built_in">arch</span>] to <span class="string">&quot;all&quot;</span> to install 32 AND 64 bit versions.</span><br><span class="line">                                 Add --insecure to the end of this <span class="built_in">command</span> to bypass SSL validation of the remote download server.</span><br><span class="line">  nvm list [available]         : List the node.js installations. Type <span class="string">&quot;available&quot;</span> at the end to see what can be installed. Aliased as <span class="built_in">ls</span>.</span><br><span class="line">  nvm on                       : Enable node.js version management.</span><br><span class="line">  nvm off                      : Disable node.js version management.</span><br><span class="line">  nvm proxy [url]              : Set a proxy to use <span class="keyword">for</span> downloads. Leave [url] blank to see the current proxy.</span><br><span class="line">                                 Set [url] to <span class="string">&quot;none&quot;</span> to remove the proxy.</span><br><span class="line">  nvm node_mirror [url]        : Set the node mirror. Defaults to https://nodejs.org/dist/. Leave [url] blank to use default url.</span><br><span class="line">  nvm npm_mirror [url]         : Set the npm mirror. Defaults to https://github.com/npm/npm/archive/. Leave [url] blank to default url.</span><br><span class="line">  nvm uninstall &lt;version&gt;      : The version must be a specific version.</span><br><span class="line">  nvm use [version] [<span class="built_in">arch</span>]     : Switch to use the specified version. Optionally specify 32/64bit architecture.</span><br><span class="line">                                 nvm use &lt;<span class="built_in">arch</span>&gt; will <span class="built_in">continue</span> using the selected version, but switch to 32/64 bit mode.</span><br><span class="line">  nvm root [path]              : Set the directory <span class="built_in">where</span> nvm should store different versions of node.js.</span><br><span class="line">                                 If &lt;path&gt; is not <span class="built_in">set</span>, the current root will be displayed.</span><br><span class="line">  nvm version                  : Displays the current running version of nvm <span class="keyword">for</span> Windows. Aliased as v.</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><code>settings.txt</code>中<code>root</code>和<code>path</code>文件路径中不能存在空格，否则在使用<code>nvm use</code>命令时会报错</li>
<li>在使用<code>nvm use</code>命令时，貌似无法再<code>git-bash</code>中使用，暂时不知道原因，在自带的<code>cmd</code>中可以</li>
</ul>
<h2 id="最后的最后"><a href="#最后的最后" class="headerlink" title="最后的最后"></a>最后的最后</h2><blockquote>
<p>安装nvm比较简单，喜欢折腾的可以使用便携版，反之这直接使用安装版一键安装。最后大家愉快的玩耍吧</p>
</blockquote>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>npm</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title>一道小小的题目引发对javascript支持正则表达式相关方法的探讨</title>
    <url>/2017-11-24/regex-to-something.html</url>
    <content><![CDATA[<blockquote>
<p>以前对于正则是非常惧怕的，因为看不懂和学不会。但最近项目中频繁的使用到了正则，因此强迫自己去学习了解，慢慢的体会到了他的魅力与强大。当然学习正则初入门的时候有些枯燥难懂，但越学越觉得轻松。本文不准备说关于正则本身的事儿，而是说一说关于javascript中关于正则的几个方法中被很多人忽略的地方。</p>
</blockquote>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>说到正则，很多人都是从抄到改到自己写，这个过程可能有时候很漫长。如一些工具能帮助你快速分析和学习正则，那么学习的过程你肯定要轻松得多。下面我推荐两个我经常使用的正则在线可视化工具，正则可视化工具图解符合铁路图规律（其实不明白什么是铁路一样很容易看懂，只是一些细微的地方和我们的常规思维有点差别）。</p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly9yZWdleHBlci5jb20v">regexper<i class="fa fa-external-link-alt"></i></span> 我最常用的一个，个人觉得UI做得比其他好</li>
<li><span class="exturl" data-url="aHR0cHM6Ly9qZXguaW0vcmVndWxleC8=">regulex<i class="fa fa-external-link-alt"></i></span> 备选，他有一个很舒心的功能，可以提供一段js，嵌套到你的网站，生成正则可视化图</li>
</ul>
<h2 id="一道小小的题目"><a href="#一道小小的题目" class="headerlink" title="一道小小的题目"></a>一道小小的题目</h2><p>这道题目是在群里日常闲聊时，公司同事抛出来的，具体是出自哪里本人没去考察。先先说说题目：</p>
<blockquote>
<p>写一个方法使得数字末尾的连续0变成9，如1230000变成1239999</p>
</blockquote>
<p>一道很简单的题目，直接正则就能搞定，也许你会写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">zoreToNine</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (num + <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/0/g</span>,<span class="number">9</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">zoreToNine</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (num + <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/[1-9]0+$/</span>,<span class="number">9</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这也是此题的陷阱所在，按照上面的方法，1023000就会被转化成1923999，这样是不符合要求的，所以改进一下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">zoreToNine</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> (num + <span class="string">&#x27;&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/[1-9]0+$/</span>,<span class="keyword">function</span>(<span class="params">$1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> $1.<span class="title function_">replace</span>(<span class="regexp">/0/g</span>,<span class="number">9</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">zoreToNine</span>(<span class="number">1223000</span>); <span class="comment">//1223999</span></span><br><span class="line"><span class="title function_">zoreToNine</span>(<span class="number">1023000</span>); <span class="comment">//1023999</span></span><br></pre></td></tr></table></figure>

<p>关于这个问题的解决方案<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3UvamF3aWw=">@微醺岁月<i class="fa fa-external-link-alt"></i></span>同学提供了一种，位置匹配的方法，简单了很多，厉害！</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;12300100000&quot;</span>.<span class="title function_">replace</span>(<span class="regexp">/0(?=(0+$)|\b)/g</span>,<span class="number">9</span>); <span class="comment">//12300199999</span></span><br></pre></td></tr></table></figure>

<p>当然解决问题的方法很多，不一定非要用正则，还完全可以使用纯算术的方法实现，大家有兴趣可以尝试，闲话少说进入这次的主题：<code>javascript</code>支持正则表达式相关方法，注意并不是正则对象的方法。<br>上述方法使用了正则，有趣的是在回调函数里有一个$1，这个$1到底是什么？所有的匹配规则匹配后都有$1这个变量么？…一连串的问题，以前我从来没有去追探过，趁着昨个比较空闲，去追探了一番，并在今天整理了一下，写下此文记录。</p>
<h2 id="主角"><a href="#主角" class="headerlink" title="主角"></a>主角</h2><p><code>javascript</code>中正则对象有三个方法：<code>test</code>、<code>exec</code>和<code>compile</code>，但是此次的主角并不是它们！我们讨论的是能够使用正则表示的相关方法：<code>search</code>、<code>match</code>、<code>replace</code>和<code>split</code>，注意它们都是<code>String</code>对象的方法，使用它们必须要是<code>String</code>类型.</p>
<h2 id="replace-rule-regexp-substr-replacement"><a href="#replace-rule-regexp-substr-replacement" class="headerlink" title="replace(rule[regexp&#x2F;substr], replacement)"></a>replace(rule[regexp&#x2F;substr], replacement)</h2><p><code>replace</code>是一个用于替换字符串的方法，虽然看似简单，但是它隐藏的机关也是常常被人忽略。具体分析一下它的特点:<br>    它接收两个参数<br>    无副作用不影响原始变量<br>    返回被改变的字符串(一定是字符串类型)</p>
<p>定义一些变量，方便全文取用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="string">&#x27;12309800&#x27;</span>, b = <span class="string">&#x27;12309800[object Object]&#x27;</span>, b = <span class="string">&#x27;12309800&#123;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="参数rule"><a href="#参数rule" class="headerlink" title="参数rule"></a>参数rule</h3><p>在一般情况，rule参数一般是正则、字符串、数字。<br>如果是字符串，将会在匹配到第一个符合条件的目标，结束方法；<br>如果是正则，则按照正则的规则进行匹配</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匹配第一个0替换成5</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="number">0</span>,<span class="number">5</span>); <span class="comment">//&#x27;12359800&#x27;</span></span><br><span class="line"><span class="comment">//匹配所有的0替换成5</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="regexp">/0/g</span>,<span class="number">5</span>); <span class="comment">//&#x27;12359855&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="参数replacement"><a href="#参数replacement" class="headerlink" title="参数replacement"></a>参数replacement</h3><p>在一般情况，replacement参数是字符串、数字、者回调。</p>
<h4 id="包含-的字符串"><a href="#包含-的字符串" class="headerlink" title="包含$的字符串"></a>包含$的字符串</h4><p>当参数rule为正则，并且正则至少包含有一对完整的<code>()</code>时，如果<code>replacement</code>包含有$的字符串，那么对于<code>$n</code>(n为大于0的整数，n的长度取决于正则中括号的对数)，会被解析成一个变量。但是也仅仅只是作为一个变量，无法在字符串中进行计算，此时更类似特别的字符串模板变量。</p>
<p>一般情况下，<code>$n</code>中n的长度取决于正则中括号的对数，$1表示第1对括号匹配的结果，$2表示第2对匹配的结果…在正则所有的括号对中，左括号出现在第几个位置（或者说从左往右），则它就是第几对括号，以此类推。姑且我们把这种规则成为<code>正则匹配分割规则</code>（ps:这完全是我自己取的一个名字，方便文章后面使用和记忆）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">replace</span>(<span class="number">0</span>,<span class="string">&#x27;$0&#x27;</span>); <span class="comment">//&#x27;123$09800&#x27;</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="regexp">/00/g</span>,<span class="string">&#x27;$0&#x27;</span>); <span class="comment">//&#x27;123098$0&#x27;</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="regexp">/[1-9]0+$/</span>,<span class="string">&#x27;$1&#x27;</span>); <span class="comment">//&#x27;12309$1&#x27;</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="regexp">/([1-9](0+$))/</span>,<span class="string">&#x27;$1&#x27;</span>); <span class="comment">//&#x27;12309800&#x27;，此时$1为[1-9](0+$)匹配到的内容，$2为0+$匹配到的内容</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="regexp">/([1-9])(0+$)/</span>,<span class="string">&#x27;$1&#x27;</span>); <span class="comment">//&#x27;123098&#x27;，此时$1为[1-9]匹配到的内容，$2为0+$匹配到的内容</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="regexp">/([1-9])(0+$)/</span>,<span class="string">&#x27;$1*$2&#x27;</span>); <span class="comment">//&#x27;123098*00&#x27;，此处的$1和$2不会安照期待的情况进行乘法计算，要进行计算可以用回调</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>请注意：虽然目前参数replacement中携带有$n仍然能正常使用，但是这种方式已经不被<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvRGVwcmVjYXRlZF9hbmRfb2Jzb2xldGVfZmVhdHVyZXMjUmVnRXhwX1Byb3BlcnRpZXM=">规范<i class="fa fa-external-link-alt"></i></span>所推荐，更应该使用回调来完成这个操作。这一点谢谢<span class="exturl" data-url="aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL3UvbHVja3k0">@lucky4<i class="fa fa-external-link-alt"></i></span>同学的指出</p>
</blockquote>
<p>如果正则中包含有全局匹配标志(g)，那么每次匹配的都符合上述规则</p>
<h4 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h4><p>先看例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">replace</span>(<span class="regexp">/[1-9]0+$/</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">//[&quot;800&quot;,5,&quot;12309800&quot;]、</span></span><br><span class="line">&#125;);</span><br><span class="line">a.<span class="title function_">replace</span>(<span class="regexp">/([1-9])0+$/</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">//[&quot;800&quot;,&quot;8&quot;,5,&quot;12309800&quot;]</span></span><br><span class="line">&#125;);</span><br><span class="line">a.<span class="title function_">replace</span>(<span class="regexp">/([1-9])(0+$)/</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">//[&quot;800&quot;,&quot;8&quot;,&quot;00&quot;,5,&quot;12309800&quot;]</span></span><br><span class="line">&#125;);</span><br><span class="line">a.<span class="title function_">replace</span>(<span class="regexp">/(([1-9])(0+$))/</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>); <span class="comment">//[&quot;800&quot;,&quot;800&quot;,&quot;8&quot;,&quot;00&quot;,5,&quot;12309800&quot;]</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>回调函数的<code>arguments</code>数组部分组成：[完整匹配的字符串,$1,$2,…,$n,匹配的开始位置,原始字符串],<code>$1...$n</code>表示每个括号对的匹配，规则和前面的相同。<br>所以有一下规律：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [...<span class="variable language_">arguments</span>], len = arr.<span class="property">length</span>;</span><br><span class="line">(len &gt;= <span class="number">3</span>) === <span class="literal">true</span>;</span><br><span class="line">arr[<span class="number">0</span>] = 完整匹配的字符串;</span><br><span class="line">arr[len-<span class="number">2</span>] = 匹配的开始位置;</span><br><span class="line">arr[len-<span class="number">1</span>] = 原始字符串;</span><br></pre></td></tr></table></figure>

<p>注意：除了匹配的开始位置是<code>Number</code>类型外，其余的都是<code>String</code>类型</p>
<h3 id="非常规类型参数"><a href="#非常规类型参数" class="headerlink" title="非常规类型参数"></a>非常规类型参数</h3><p>如果参数类型不是上述两种情况，会发生什么呢？看看下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">replace</span>(<span class="number">0</span>,<span class="literal">null</span>); <span class="comment">//123null9800</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="number">0</span>,<span class="literal">undefined</span>); <span class="comment">//123null9800</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="number">0</span>,[]); <span class="comment">//1239800</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="number">0</span>,<span class="title class_">Array</span>); <span class="comment">//1230,3,123098009800</span></span><br><span class="line">b.<span class="title function_">replace</span>(&#123;&#125;,<span class="number">5</span>); <span class="comment">//123098005</span></span><br><span class="line">c.<span class="title function_">replace</span>(&#123;&#125;,<span class="number">5</span>); <span class="comment">//&#x27;12309800&#123;&#125;&#x27;</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="number">0</span>,&#123;&#125;); <span class="comment">//123[object Object]9800</span></span><br><span class="line">a.<span class="title function_">replace</span>(<span class="number">0</span>,<span class="title class_">Object</span>); <span class="comment">//12309800</span></span><br></pre></td></tr></table></figure>

<p>由上面的例子可以看出，如果非正则也非字符串，则有以下规则:<br>    <code>null</code>变量，则会转换成<code>&#39;null&#39;</code>字符串;<br>    <code>undefined</code>变量，则会转换成<code>&#39;undefined&#39;</code>字符串;<br>    <code>[]</code>变量，则会调用<code>join()</code>方法转换成字符串，默认以<code>,</code>分割，值得注意的是空数组将会被转换成空字符串（没有任何字符），通常会被匹配源字符串的开始位置（默认开始位置为空字符串）;<br>    <code>Array</code>变量，则会先转成成一个匹配的数组，形如<code>[完整匹配的字符串,$1,$2,...,$n,匹配的开始位置,原始字符串]</code>,然后对它调用<code>join()</code>方法转换成字符串，默认以<code>,</code>分割;<br>    <code>&#123;&#125;</code>变量，则会调用<code>Object.protype.toString.call()</code>方法把<code>&#123;&#125;</code>转换成<code>[object Object]</code>;<br>    <code>Object</code>变量，则貌似什么都没做</p>
<p>虽然可以传入这些非正常参数，但大多数情况下这些类型的参数对实际是毫无意义的，所以不建议传入以上类型的参数。同上面的<code>正则匹配分割规则</code>一样，为了方便使用称呼，姑且我把上面的转换规则称为<code>正则匹配参数转换规则</code></p>
<h2 id="match-rule-regex-substr"><a href="#match-rule-regex-substr" class="headerlink" title="match(rule[regex&#x2F;substr])"></a>match(rule[regex&#x2F;substr])</h2><p><code>match</code>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。<br>该方法类似<code>indexOf</code>和<code>lastIndexOf</code>，但是它返回指定的值，而不是字符串的位置；</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>参数的传递除了常规的正则和字符串以外，其余所有类型的参数都会按照上述的<code>正则匹配参数转换规则</code>转换成字符串形式来匹配。</p>
<h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回值根据传入的参数类型和规则的不同，返回的内容不同，但总体来说，它是返回一个对象，而不是索引，如果没匹配到任何符合条件的字符串，则返回<code>null</code>。</p>
<h3 id="非全局匹配正则"><a href="#非全局匹配正则" class="headerlink" title="非全局匹配正则"></a>非全局匹配正则</h3><p>如果匹配规则是一个非全局匹配规则，那么，它此时的返回值是一个伪数组对象(likeArr)，形如:[一个展开的匹配到的字符串数组, 匹配到的字符串位置， 原始字符串]，它有如下规律：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> likeArr = a.<span class="title function_">match</span>(regex);</span><br><span class="line">likeArr[<span class="number">0</span>] = 匹配到的字符串;</span><br><span class="line">likeArr[<span class="number">1.</span>..<span class="property">n</span>] = 正则匹配分割规则匹配的字符串;</span><br><span class="line">likeArr.<span class="property">index</span> = 匹配到字符串的位置</span><br><span class="line">likeArr.<span class="property">inupt</span> = 原始字符串</span><br></pre></td></tr></table></figure>

<p>看例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">match</span>(<span class="regexp">/[1-9]0+$/</span>); <span class="comment">//[0:&#x27;800&#x27;,index:5,input:&#x27;12309800&#x27;]</span></span><br><span class="line">a.<span class="title function_">match</span>(<span class="regexp">/([1-9])0+$/</span>); <span class="comment">//[0:&#x27;800&#x27;,1:&#x27;8&#x27;,index:5,input:&#x27;12309800&#x27;]</span></span><br><span class="line">a.<span class="title function_">match</span>(<span class="regexp">/[1-9](0+$)/</span>); <span class="comment">//[0:&#x27;800&#x27;,1:&#x27;00&#x27;,index:5,input:&#x27;12309800&#x27;]</span></span><br><span class="line">a.<span class="title function_">match</span>(<span class="regexp">/([1-9])(0+$)/</span>); <span class="comment">//[0:&#x27;800&#x27;,1:&#x27;8&#x27;,2:&#x27;00&#x27;,index:5,input:&#x27;12309800&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="全局匹配正则"><a href="#全局匹配正则" class="headerlink" title="全局匹配正则"></a>全局匹配正则</h3><p>如果匹配规则是一个全局匹配规则(正在携带有g标志)，那么，它此时的返回值是一个数组对象(arr)，形如:[匹配到的字符串数1,匹配到的字符串数2,匹配到的字符串数3];<br>看例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a.<span class="title function_">match</span>(<span class="regexp">/[1-9]0/</span>); <span class="comment">//[0:&#x27;30&#x27;,index:2,input:&#x27;12309800&#x27;]</span></span><br><span class="line">a.<span class="title function_">match</span>(<span class="regexp">/[1-9]0/g</span>); <span class="comment">//[0:&#x27;30&#x27;,1:&#x27;80&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="search-rule-regex-substr"><a href="#search-rule-regex-substr" class="headerlink" title="search(rule[regex&#x2F;substr])"></a>search(rule[regex&#x2F;substr])</h2><p><code>search</code>方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。<br><code>stringObject</code>中第一个与<code>rule</code>相匹配的子串的起始位置。如果没有找到任何匹配的子串，则返回<code>-1</code>。<br>注意:</p>
<ul>
<li><code>search</code>方法不执行全局匹配，它将忽略标志<code>g</code>。</li>
<li>忽略<code>regexp</code>的<code>lastIndex</code>属性，总是从字符串的开始进行检索，这意味着它总是返回<code>stringObject</code>的第一个匹配的位置</li>
</ul>
<p>同样，<code>search</code>可以传入任何参数类型，它会遵循<code>正则匹配参数转换规则</code>进行转换</p>
<h2 id="split-rule-regex-substr-len"><a href="#split-rule-regex-substr-len" class="headerlink" title="split(rule[regex&#x2F;substr],len)"></a>split(rule[regex&#x2F;substr],len)</h2><p>这个方法就不用多说，很常用的字符串分割方法。<br>第二个参数的作用就是限制返回值的长度，表示返回值的最大长度</p>
<p>当然，它依然可以传入任何参数类型，会遵循<code>正则匹配参数转换规则</code>进行转换</p>
<blockquote>
<p>有一段加密的后的密码，我们需要分离出字符串’12a344gg333tt445656ffa6778ii99’中的前三组数字，通过某种计算才能得出正确的密码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;12a344gg333tt445656ffa6778ii99&#x27;</span>.<span class="title function_">split</span>(<span class="regexp">/[a-zA-Z]+/g</span>,<span class="number">3</span>); <span class="comment">//[&#x27;12&#x27;,&#x27;334&#x27;,&#x27;333&#x27;]</span></span><br></pre></td></tr></table></figure>

<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>写了这么多，突然发现以前仅仅是在用这些方法，了解得很不够深入。越是学习才发现其中的奥秘！学无止境，与诸君共勉！<br>以上内容如有错误之处，希望诸君不吝指出！</p>
]]></content>
      <categories>
        <category>regex</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>regex</tag>
      </tags>
  </entry>
  <entry>
    <title>常用正则整理(持续收集)</title>
    <url>/2016-09-05/regex.html</url>
    <content><![CDATA[<blockquote>
<p>正则的魅力在于使用很简洁的方式解决一些比较复杂的方式，使代码变得更优雅，也使实现的过程变得更简单透明。本文搜集整理一些常用正则，记录以便查阅</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="variable language_">window</span>.<span class="property">regex</span> || (<span class="keyword">function</span> (<span class="params"><span class="variable language_">document</span>, $</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> _reg = &#123;&#125;;</span><br><span class="line">        <span class="comment">/* &#x27;pwd&#x27;:/^[\@A-Za-z0-9\!\#\$\%\^\&amp;\*\.\~]&#123;6,16&#125;$/,//密码 */</span></span><br><span class="line">        <span class="comment">//验证数字</span></span><br><span class="line">        $.<span class="title function_">extend</span>(_reg, &#123;</span><br><span class="line">            <span class="string">&#x27;num&#x27;</span>: <span class="regexp">/^\d+$/</span>, <span class="comment">//数字</span></span><br><span class="line">            <span class="string">&#x27;znum&#x27;</span>: <span class="regexp">/^[1-9](\d+)?$/</span>, <span class="comment">//  大于0的数字</span></span><br><span class="line">            <span class="string">&#x27;float&#x27;</span>: <span class="regexp">/^[-]&#123;0,1&#125;(\d+)[\.]+(\d+)$/</span>, <span class="comment">//浮点数</span></span><br><span class="line">            <span class="string">&#x27;money&#x27;</span>: <span class="regexp">/^\d&#123;1,12&#125;(?:\.\d&#123;1,3&#125;)?$/</span>, <span class="comment">// money</span></span><br><span class="line">            <span class="string">&#x27;idCard&#x27;</span>: <span class="regexp">/^\d&#123;15&#125;$|^\d&#123;18&#125;$|^\d&#123;17&#125;[xX]$/</span>, <span class="comment">//身份证</span></span><br><span class="line">            <span class="string">&#x27;idCardStrict&#x27;</span>:<span class="regexp">/^(\d&#123;6&#125;)([1-2])(\d&#123;3&#125;)((?:0[1-9])|(?:1[0-2]))((?:0[0-9])|(?:[1-2][0-9])|(?:3[0-1]))(\d&#123;3&#125;)(\d&#123;1&#125;)$/</span>,</span><br><span class="line">            <span class="string">&#x27;qq&#x27;</span>: <span class="regexp">/^[1-9]\d&#123;4,15&#125;$/</span>, <span class="comment">//QQ</span></span><br><span class="line">            <span class="string">&#x27;pwd&#x27;</span>: <span class="regexp">/^[\@A-Za-z0-9]&#123;6,16&#125;$/</span>, <span class="comment">//密码</span></span><br><span class="line">            <span class="string">&#x27;areacode&#x27;</span>: <span class="regexp">/^(0[1,2]&#123;1&#125;\d&#123;1&#125;)$|^(0[3-9]&#123;1&#125;\d&#123;2&#125;)$/</span>, <span class="comment">//区号</span></span><br><span class="line">            <span class="string">&#x27;tel&#x27;</span>: <span class="regexp">/^\d&#123;7,8&#125;$/</span>, <span class="comment">// 固话格式</span></span><br><span class="line">            <span class="string">&#x27;mobile&#x27;</span>: <span class="regexp">/^((\+86)|(\(\+86\)))?-?(13|14|15|18|17)[0-9]&#123;9&#125;$/</span>, <span class="comment">//验证手机号码</span></span><br><span class="line">            <span class="string">&#x27;telephone&#x27;</span>: <span class="regexp">/^(((\+)?86)|(\(\+86\)))?-?((((0)?[1,2]&#123;1&#125;\d&#123;1&#125;)?-?\d&#123;8&#125;)|((0[3-9]&#123;1&#125;\d&#123;2&#125;)?-?\d&#123;7,12&#125;))-?(\d&#123;1,8&#125;)?$/</span>, <span class="comment">//验证固定电话</span></span><br><span class="line">            <span class="string">&#x27;phone&#x27;</span>: <span class="regexp">/^((\+86)|(\(\+86\)))?-?(13|14|15|18|17)[0-9]&#123;9&#125;$|^((\+86)|(\(\+86\)))?-?(((0[1,2]&#123;1&#125;\d&#123;1&#125;)?-?\d&#123;8&#125;)|((0[3-9]&#123;1&#125;\d&#123;2&#125;)?-?\d&#123;7,8&#125;))$/</span>, <span class="comment">//手机号码和固定电话</span></span><br><span class="line">            <span class="string">&#x27;zipcode&#x27;</span>: <span class="regexp">/^\d&#123;6&#125;$/</span> <span class="comment">//验证邮编</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//验证字符串</span></span><br><span class="line">        $.<span class="title function_">extend</span>(_reg, &#123;</span><br><span class="line">            <span class="string">&#x27;email&#x27;</span>: <span class="regexp">/^\w&#123;1,16&#125;([-+.&#x27;]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span>, <span class="comment">//邮箱</span></span><br><span class="line">            <span class="string">&#x27;chinese&#x27;</span>: <span class="regexp">/^[\u4E00-\u9FA5]+$/</span>, <span class="comment">//仅汉字</span></span><br><span class="line">            <span class="string">&#x27;char&#x27;</span>: <span class="regexp">/^[A-Za-z]+$/</span>, <span class="comment">//仅仅是字母</span></span><br><span class="line">            <span class="string">&#x27;charn&#x27;</span>: <span class="regexp">/^[A-Za-z0-9]+$/</span>, <span class="comment">//数字加字母</span></span><br><span class="line">            <span class="string">&#x27;nospecial&#x27;</span>: <span class="regexp">/^[\u4E00-\u9FA5A-Za-z0-9]+$/</span>, <span class="comment">// 不包含特殊字符</span></span><br><span class="line">            <span class="string">&#x27;url&#x27;</span>: <span class="regexp">/^((http|https|ftp):\/\/)?(\w(\:\w)?@)?([0-9a-z_-]+\.)*?([a-z0-9-]+\.[a-z]&#123;2,6&#125;(\.[a-z]&#123;2&#125;)?(\:[0-9]&#123;2,6&#125;)?)((\/[^?#&lt;&gt;\/\\*&quot;:]*)+(\?[^#]*)?(#.*)?)?$/</span>,</span><br><span class="line">            <span class="string">&#x27;loginName&#x27;</span>: <span class="regexp">/^(13|14|15|18|17)[0-9]&#123;9&#125;$|^\w+([-+.&#x27;]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/</span>, <span class="comment">// 用户名</span></span><br><span class="line">            <span class="string">&#x27;userName&#x27;</span>: <span class="regexp">/^[\u4e00-\u9fa5]&#123;2`,4&#125;$|[a-zA-Z]&#123;4,20&#125;$/</span>, <span class="comment">//真实姓名</span></span><br><span class="line">            <span class="string">&#x27;nickName&#x27;</span>: <span class="regexp">/^([a-zA-Z\u4e00-\u9fa5]&#123;1&#125;[a-zA-Z0-9_\u4e00-\u9fa5]&#123;3,19&#125;)$/</span> <span class="comment">//昵称</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> _reg;</span><br><span class="line">    &#125;)(<span class="variable language_">document</span>, <span class="variable language_">window</span>.<span class="property">jQuery</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">regex</span> = regex;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu云服务器安装docker及docker-compose保姆级教程</title>
    <url>/2021-07-03/ubuntu%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85docker%E5%8F%8Adocker-compose%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B.html</url>
    <content><![CDATA[<blockquote>
<p>本文记录在ubuntu云服务器上安装docker和docker-compose的完整过程及踩坑</p>
</blockquote>
<p>为什么安装docker时会卡在添加秘钥这一步？<br>为什么安装docker-compose时，下载总是失败？<br>为什么安装的docker-compose不是最新版本？<br>…<br>且看下文，帮你解惑~</p>
<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>如果你的服务器上已经安装了docker或者docker-compose，你需要先进行卸载，为了避免出现一些奇奇怪怪的问题，最好使用以下步骤彻底卸载：</p>
<h3 id="停止并删除所有Docker容器和镜像"><a href="#停止并删除所有Docker容器和镜像" class="headerlink" title="停止并删除所有Docker容器和镜像"></a>停止并删除所有Docker容器和镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止所有正在运行的Docker容器</span></span><br><span class="line"><span class="built_in">sudo</span> docker stop $(<span class="built_in">sudo</span> docker ps -a -q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有Docker容器</span></span><br><span class="line"><span class="built_in">sudo</span> docker <span class="built_in">rm</span> $(<span class="built_in">sudo</span> docker ps -a -q)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除所有Docker镜像</span></span><br><span class="line"><span class="built_in">sudo</span> docker rmi $(<span class="built_in">sudo</span> docker images -q)</span><br></pre></td></tr></table></figure>

<h3 id="卸载Docker-Engine、CLI和containerd"><a href="#卸载Docker-Engine、CLI和containerd" class="headerlink" title="卸载Docker Engine、CLI和containerd"></a>卸载Docker Engine、CLI和containerd</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get purge -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h3 id="删除Docker相关文件和目录"><a href="#删除Docker相关文件和目录" class="headerlink" title="删除Docker相关文件和目录"></a>删除Docker相关文件和目录</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除Docker的默认工作目录</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /var/lib/docker</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除Docker的配置文件目录</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> -rf /etc/docker</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除Docker的systemd服务文件(如果有)</span></span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /etc/systemd/system/docker.service.d/override.conf</span><br></pre></td></tr></table></figure>

<h3 id="卸载Docker-Compose"><a href="#卸载Docker-Compose" class="headerlink" title="卸载Docker Compose"></a>卸载Docker Compose</h3><p>先尝试使用apt-get卸载</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get purge -y docker-compose</span><br></pre></td></tr></table></figure>

<p>再删除对于目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">rm</span> /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>如果使用pip安装了Docker Compose，还需要卸载pip版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pip uninstall docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="清理系统文件和配置"><a href="#清理系统文件和配置" class="headerlink" title="清理系统文件和配置"></a>清理系统文件和配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除Docker相关的依赖包</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get autoremove -y --purge docker-ce docker-ce-cli containerd.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清理apt缓存</span></span><br><span class="line"><span class="built_in">sudo</span> apt-get clean</span><br></pre></td></tr></table></figure>

<h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><p>清理完旧版本的docker和docker-compose后，接下来就是进入了安装过程。安装过程中主要会遇到以下问题：<br>1、ubuntu软件包管理器找不到对应docker及docker-compose安装包，需要添加APT仓库<br>2、在国内环境某些资源的下载可能会存在网络问题<br>3、docker-compose下载版本号问题</p>
<h3 id="更新系统软件包和依赖包"><a href="#更新系统软件包和依赖包" class="headerlink" title="更新系统软件包和依赖包"></a>更新系统软件包和依赖包</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新系统软件包</span></span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt upgrade</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装必要的依赖包</span></span><br><span class="line"><span class="built_in">sudo</span> apt install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>

<h3 id="添加Docker的官方GPG密钥"><a href="#添加Docker的官方GPG密钥" class="headerlink" title="添加Docker的官方GPG密钥"></a>添加Docker的官方GPG密钥</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings</span><br></pre></td></tr></table></figure>

<p>如果下载一直卡住，是网络问题，尝试换一个源，使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | <span class="built_in">sudo</span> gpg --dearmor -o /etc/apt/keyrings</span><br></pre></td></tr></table></figure>

<p>秘钥添下载到本地后，需要获取权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br></pre></td></tr></table></figure>

<h3 id="添加Docker的APT仓库"><a href="#添加Docker的APT仓库" class="headerlink" title="添加Docker的APT仓库"></a>添加Docker的APT仓库</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> \</span><br><span class="line"><span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string"><span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line"><span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure>

<h3 id="更新APT包索引"><a href="#更新APT包索引" class="headerlink" title="更新APT包索引"></a>更新APT包索引</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get update</span><br></pre></td></tr></table></figure>

<h3 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h3 id="验证Docker安装是否成功"><a href="#验证Docker安装是否成功" class="headerlink" title="验证Docker安装是否成功"></a>验证Docker安装是否成功</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> docker --version</span><br></pre></td></tr></table></figure>

<h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><p>如果直接使用apt-get来安装docker-compose，安装的docker-compose可能不是最新版本，想安装最新版，应该怎么做呢？可以参考以下步骤：</p>
<h3 id="获取最新版本compose下载链接"><a href="#获取最新版本compose下载链接" class="headerlink" title="获取最新版本compose下载链接"></a>获取最新版本compose下载链接</h3><p>访问<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3NlL3JlbGVhc2Vz">docker-compose的GitHub发布页面<i class="fa fa-external-link-alt"></i></span>，找到最新版本的下载链接。笔者写这篇文章时，是1.29.1版本。</p>
<h3 id="下载compose"><a href="#下载compose" class="headerlink" title="下载compose"></a>下载compose</h3><p>官方提供了可执行文件，下载下来后直接放到bin目录下，则可以通过命令来执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/1.29.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>ps：注意需要将上述版本号：1.29.1替换成你需要的版本号。</p>
<p>由于众所周知的原因，下载github releases时可能慢如龟速，简直不能忍，可以尝试使用自己的代理加速，笔者这里使用的免费的加速如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://gh.jiasu.in/https://github.com/docker/compose/releases/download/1.29.1/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p>ps：以上加速连接可能失效，可以通过油猴插件脚本进行获取。</p>
<p><font color="#ff0000">2024年9月3日23:02:53更新：</font><br><font color="#ff0000">1、从2.xx.xx开始，其版本号加了v，而网上很多教程（包括本文）还是基于1.xx.xx的，所以正确的下载应该使用如下命令（注意看数字版本前多了v）</font></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> curl -L <span class="string">&quot;https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-<span class="subst">$(uname -s)</span>-<span class="subst">$(uname -m)</span>&quot;</span> -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<p><font color="#ff0000">2、油猴现已改名篡改猴</font></p>
<h3 id="设置权限"><a href="#设置权限" class="headerlink" title="设置权限"></a>设置权限</h3><p>为所有用户添加执行权限，如果不进行这一步，docker-compose执行时会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">chmod</span> +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>

<h3 id="验证版本"><a href="#验证版本" class="headerlink" title="验证版本"></a>验证版本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure>

<p>通过以上步骤，你可以在Ubuntu云服务器上安装最新版本的docker-compose。这种方法直接从GitHub下载二进制文件，确保你获得的是最新版本。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL2luc3RhbGwvdWJ1bnR1LyNpbnN0YWxsLXVzaW5nLXRoZS1yZXBvc2l0b3J5">Install Docker Engine on Ubuntu | Docker Docs<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8yMzA5NTYy">最详细的ubuntu 安装 docker教程-腾讯云开发者社区-腾讯云<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>安装教程</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>ubuntu</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title>使用webpack + gulp构建项目</title>
    <url>/2016-09-24/use-gulp-and-webpack-to-bulid-resource.html</url>
    <content><![CDATA[<blockquote>
<p>有人说为什么会使用webpack+gulp呢？强大的webpack完全可以摒弃gulp了嘛？话虽如此，但个人觉得webpack配置太繁琐复杂，相对来说gulp更简单一点，并且gulp也能很好的完成我期望的任务。所以我想用webpack来处理js任务（因为它支持AMD和CMD，并且可以直接引入模块），用gulp处理images&#x2F;css&#x2F;html等资源</p>
</blockquote>
<p>ps: 平时在项目中使用它们的机会不多，以下都是自己项目之外的折腾，如果有错误之处，请不吝指出。</p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p>先上<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzJ1ZS9ndWxwLXdlYnBhY2stdGVtcGxhdGU=">DEMO<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h2><p>webpack的有很强大的配置选项，官方中英文文档都已经很详尽。<br><span class="exturl" data-url="aHR0cHM6Ly9kb2Mud2VicGFjay1jaGluYS5vcmcvY29uZmlndXJhdGlvbi8=">中文文档<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93ZWJwYWNrLmpzLm9yZy9jb25jZXB0cy8=">英文文档<i class="fa fa-external-link-alt"></i></span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> commonsPlugin = <span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">CommonsChunkPlugin</span>(<span class="string">&#x27;common.js&#x27;</span>); <span class="comment">//公共部分打包到common.js，输出路径为output中的path</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// devtool: &#x27;cheap-module-eval-source-map&#x27;, //配置生成Source Maps，选择合适的选项</span></span><br><span class="line">    <span class="comment">//插件项</span></span><br><span class="line">    <span class="attr">plugins</span>: [commonsPlugin],</span><br><span class="line">    <span class="comment">//页面入口文件配置</span></span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span> : <span class="string">&#x27;./src/js/page/app.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//入口文件输出配置</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;./dist/js/page&#x27;</span>, <span class="comment">//webpack启动时需要</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span> <span class="comment">//[name]指向entry中&#x27;app&#x27;,对应关系</span></span><br><span class="line">    &#125;,</span><br><span class="line">  	<span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">//加载器配置，另外还可以添加额外的css/images等加载器</span></span><br><span class="line">        <span class="attr">loaders</span>: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">&#x27;jsx-loader?harmony&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//其它解决方案配置</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.scss&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>上面的配置就是对js进行打包处理，当然webpack肯定也可以处理css和images等资源，webpack的强大毋庸置疑，但为什么不用webpack来处理css等任务呢？</p>
<ul>
<li>webpack处理css默认情况下会把css合并到js文件，这点很不爽</li>
<li>如果要把css文件独立处理，则需要额外的配置，有点烦，所以果断用gulp了</li>
</ul>
<p>执行<code>webpack</code>，看看效果，可以正常运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; webpackGulpDeom &#125;  » webpack</span><br><span class="line">  Hash: 4eeaff8e1f7bda682e10</span><br><span class="line">  Version: webpack 1.13.3</span><br><span class="line">  Time: 1141ms</span><br><span class="line">      Asset     Size  Chunks             Chunk Names</span><br><span class="line">     app.js   367 kB    0, 1  [emitted]  app</span><br><span class="line">  common.js  3.54 kB       1  [emitted]  common.js</span><br><span class="line">      + 5 hidden modules</span><br><span class="line">&#123; webpackGulpDeom &#125;  »</span><br></pre></td></tr></table></figure>

<h2 id="配置gulp"><a href="#配置gulp" class="headerlink" title="配置gulp"></a>配置gulp</h2><p>gulpfile.js同样，gulp的配置文档详情参考官方文档，这里以编译less文档并压缩css文档为例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>),</span><br><span class="line">    less = <span class="built_in">require</span>(<span class="string">&#x27;gulp-less&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isDev = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> entrySrc = <span class="string">&#x27;src/&#x27;</span></span><br><span class="line"><span class="keyword">var</span> pathSrc = isDev ? <span class="string">&#x27;dist/&#x27;</span> : <span class="string">&#x27;online/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发环境：编译less和css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;less&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">src</span>([entrySrc + <span class="string">&#x27;css/main.less&#x27;</span>, entrySrc + <span class="string">&#x27;css/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">less</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(pathSrc + <span class="string">&#x27;css/&#x27;</span>))</span><br><span class="line">        .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//上线发布：压缩合并css，有less和css，具体看情况</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;cssUglify&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">src</span>([entrySrc + <span class="string">&#x27;css/main.less&#x27;</span>, entrySrc + <span class="string">&#x27;css/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">less</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;style.min.css&#x27;</span>))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(pathSrc + <span class="string">&#x27;css/&#x27;</span>))</span><br><span class="line">        .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//开发环境</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watch&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">watch</span>(entrySrc + <span class="string">&#x27;css/*&#x27;</span>,[<span class="string">&#x27;less&#x27;</span>], <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File&#x27;</span> + event.<span class="property">path</span> + <span class="string">&#x27; was &#x27;</span> + event.<span class="property">type</span> + <span class="string">&#x27;, running tasks...&#x27;</span>);</span><br><span class="line">    &#125;).<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发，执行gulp</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;less&#x27;</span>,<span class="string">&#x27;watch&#x27;</span>]);</span><br><span class="line"><span class="comment">//发布，执行gulp dev</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;dev&#x27;</span>, [<span class="string">&#x27;cssUglify&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>ps：这里只列举了一个编译less的任务。</p>
<h2 id="在gulp里执行webpack任务"><a href="#在gulp里执行webpack任务" class="headerlink" title="在gulp里执行webpack任务"></a>在gulp里执行webpack任务</h2><p>到了这一步，gulp和webpack任务都编写完成了，如果单单是这样是没有意思的，因为每次启动都需要单独的执行两次命令：一次webpack，一次gulp命令，这样无疑是非常糟糕的。所以我们必须得想办法把gulp和webpack连接起来。怎么连接呢？具体的有两种办法：</p>
<ul>
<li>一种是使用gulp-webpack插件。</li>
<li>另一种是使用gulp-util插件。</li>
</ul>
<p>那么我们来重写gulpfile.js和webpack.config.js吧</p>
<h3 id="利用gulp-webpack插件"><a href="#利用gulp-webpack插件" class="headerlink" title="利用gulp-webpack插件"></a>利用gulp-webpack插件</h3><p>重写<code>gulpfile.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>),</span><br><span class="line">    less = <span class="built_in">require</span>(<span class="string">&#x27;gulp-less&#x27;</span>),</span><br><span class="line">    webpack = <span class="built_in">require</span>(<span class="string">&quot;gulp-webpack&quot;</span>),</span><br><span class="line">    webpackConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.config.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isDev = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> entrySrc = <span class="string">&#x27;src/&#x27;</span></span><br><span class="line"><span class="keyword">var</span> pathSrc = isDev ? <span class="string">&#x27;dist/&#x27;</span> : <span class="string">&#x27;online/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发环境：编译less和css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;less&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">src</span>([entrySrc + <span class="string">&#x27;css/main.less&#x27;</span>, entrySrc + <span class="string">&#x27;css/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">less</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(pathSrc + <span class="string">&#x27;css/&#x27;</span>))</span><br><span class="line">        .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上线发布：压缩合并css，有less和css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;cssUglify&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">src</span>([entrySrc + <span class="string">&#x27;css/main.less&#x27;</span>, entrySrc + <span class="string">&#x27;css/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">less</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;style.min.css&#x27;</span>))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(pathSrc + <span class="string">&#x27;css/&#x27;</span>))</span><br><span class="line">        .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//用gulp执行webpack.config.js</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;buildJs&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> myConfig = <span class="title class_">Object</span>.<span class="title function_">create</span>(webpackConfig);</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .<span class="title function_">src</span>([entrySrc + <span class="string">&#x27;js/page/*.js&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">webpack</span>(myConfig))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(<span class="string">&#x27;dist/js/page&#x27;</span>)); <span class="comment">//出口文件目录，此处配置之后在webpack.config.js中就必须去掉，不然会报错</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发环境</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watch&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">watch</span>(entrySrc + <span class="string">&#x27;*/*&#x27;</span>,[<span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;buildJs&#x27;</span>], <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File&#x27;</span> + event.<span class="property">path</span> + <span class="string">&#x27; was &#x27;</span> + event.<span class="property">type</span> + <span class="string">&#x27;, running tasks...&#x27;</span>);</span><br><span class="line">    &#125;).<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发，执行gulp</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;buildJs&#x27;</span>, <span class="string">&#x27;watch&#x27;</span>]);</span><br><span class="line"><span class="comment">//发布，执行gulp dev</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;dev&#x27;</span>, [<span class="string">&#x27;cssUglify&#x27;</span>, <span class="string">&#x27;buildJs&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p><code>gulpfile.js</code>的变化：</p>
<ul>
<li>增加了可以一个buildJs任务来执行webpack.config.js文件的配置</li>
<li>相应的监听对象扩大了</li>
</ul>
<p>现在来重写<code>webpack.config.js</code>，注释掉<code>output</code>项中的path就行了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> commonsPlugin = <span class="keyword">new</span> webpack.<span class="property">optimize</span>.<span class="title class_">CommonsChunkPlugin</span>(<span class="string">&#x27;common.js&#x27;</span>); <span class="comment">//公共部分打包到common.js，输出路径为output中的path</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// devtool: &#x27;cheap-module-eval-source-map&#x27;, //配置生成Source Maps，选择合适的选项</span></span><br><span class="line">    <span class="comment">//插件项</span></span><br><span class="line">    <span class="attr">plugins</span>: [commonsPlugin],</span><br><span class="line">    <span class="comment">//页面入口文件配置</span></span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;app&#x27;</span> : <span class="string">&#x27;./src/js/page/app.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//入口文件输出配置</span></span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="comment">//path: &#x27;./dist/js/page&#x27;, //webpack启动时需要</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span> <span class="comment">//[name]指向entry中&#x27;app&#x27;,对应关系</span></span><br><span class="line">    &#125;,</span><br><span class="line">  	<span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="comment">//加载器配置，另外还可以添加额外的css/images等加载器</span></span><br><span class="line">        <span class="attr">loaders</span>: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">loader</span>: <span class="string">&#x27;jsx-loader?harmony&#x27;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//其它解决方案配置</span></span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.scss&#x27;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>webpack.config.js</code>和<code>gulpfile.js</code>都配置好了,那么现在只要执行gulp的相关命令就可以了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123; webpackGulpDeom &#125;  » gulp</span><br><span class="line">[14:20:43] Using gulpfile D:\wamp64\www\webpackGulpDeom\gulpfile.js</span><br><span class="line">[14:20:43] Starting &#x27;webpack&#x27;...</span><br><span class="line">[14:20:45] Version: webpack 1.13.3</span><br><span class="line">    Asset     Size  Chunks             Chunk Names</span><br><span class="line">   app.js   367 kB    0, 1  [emitted]  app</span><br><span class="line">common.js  3.54 kB       1  [emitted]  common.js</span><br><span class="line">[14:20:45] Finished &#x27;webpack&#x27; after 1.37 s</span><br><span class="line">[14:20:45] Starting &#x27;default&#x27;...</span><br><span class="line">[14:20:45] Finished &#x27;default&#x27; after 34 μs</span><br><span class="line">&#123; webpackGulpDeom &#125;  »</span><br></pre></td></tr></table></figure>

<h3 id="利用gulp-util插件"><a href="#利用gulp-util插件" class="headerlink" title="利用gulp-util插件"></a>利用gulp-util插件</h3><blockquote>
<p>这种方案只需要修改gulpfile.js就行了，webpack.config.js理论上来说不需要任何变化</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>),</span><br><span class="line">    less = <span class="built_in">require</span>(<span class="string">&#x27;gulp-less&#x27;</span>),</span><br><span class="line">    gutil = <span class="built_in">require</span>(<span class="string">&#x27;gulp-util&#x27;</span>),</span><br><span class="line">    webpackConfig = <span class="built_in">require</span>(<span class="string">&quot;./webpack.config.js&quot;</span>),</span><br><span class="line">    myDevConfig = <span class="title class_">Object</span>.<span class="title function_">create</span>(webpackConfig),</span><br><span class="line">    devCompiler = <span class="title function_">webpack</span>(myDevConfig);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isDev = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> entrySrc = <span class="string">&#x27;src/&#x27;</span></span><br><span class="line"><span class="keyword">var</span> pathSrc = isDev ? <span class="string">&#x27;dist/&#x27;</span> : <span class="string">&#x27;online/&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发环境：编译less和css</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;less&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">src</span>([entrySrc + <span class="string">&#x27;css/main.less&#x27;</span>, entrySrc + <span class="string">&#x27;css/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">less</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(pathSrc + <span class="string">&#x27;css/&#x27;</span>))</span><br><span class="line">        .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//上线发布：压缩合并css，有less和css，具体看情况</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;cssUglify&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">src</span>([entrySrc + <span class="string">&#x27;css/main.less&#x27;</span>, entrySrc + <span class="string">&#x27;css/*.css&#x27;</span>])</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">less</span>())</span><br><span class="line">        .<span class="title function_">pipe</span>(<span class="title function_">concat</span>(<span class="string">&#x27;style.min.css&#x27;</span>))</span><br><span class="line">        .<span class="title function_">pipe</span>(gulp.<span class="title function_">dest</span>(pathSrc + <span class="string">&#x27;css/&#x27;</span>))</span><br><span class="line">        .<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引用webpack.config.js对js资源进行打包</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&quot;buildJs&quot;</span>, <span class="keyword">function</span>(<span class="params">callback</span>) &#123;</span><br><span class="line">    devCompiler.<span class="title function_">run</span>(<span class="keyword">function</span>(<span class="params">err, stats</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> gutil.<span class="title class_">PluginError</span>(<span class="string">&quot;webpack:buildJs&quot;</span>, err);</span><br><span class="line">        gutil.<span class="title function_">log</span>(<span class="string">&quot;[webpack:buildJs]&quot;</span>, stats.<span class="title function_">toString</span>(&#123;</span><br><span class="line">            <span class="attr">colors</span>: <span class="literal">true</span></span><br><span class="line">        &#125;));</span><br><span class="line">        <span class="title function_">callback</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发环境</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;watch&#x27;</span>, <span class="keyword">function</span> (<span class="params">done</span>) &#123;</span><br><span class="line">    gulp.<span class="title function_">watch</span>(entrySrc + <span class="string">&#x27;*/*&#x27;</span>,[<span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;buildJs&#x27;</span>], <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;File&#x27;</span> + event.<span class="property">path</span> + <span class="string">&#x27; was &#x27;</span> + event.<span class="property">type</span> + <span class="string">&#x27;, running tasks...&#x27;</span>);</span><br><span class="line">    &#125;).<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, done);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发，执行gulp</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;default&#x27;</span>, [<span class="string">&#x27;less&#x27;</span>, <span class="string">&#x27;buildJs&#x27;</span>, <span class="string">&#x27;watch&#x27;</span>]);</span><br><span class="line"><span class="comment">//发布，执行gulp dev</span></span><br><span class="line">gulp.<span class="title function_">task</span>(<span class="string">&#x27;dev&#x27;</span>, [<span class="string">&#x27;cssUglify&#x27;</span>, <span class="string">&#x27;buildJs&#x27;</span>]);</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123; webpackGulpDeom &#125;  » gulp</span><br><span class="line">[14:28:59] Using gulpfile D:\wamp64\www\webpackGulpDeom\gulpfile.js</span><br><span class="line">[14:28:59] Starting <span class="string">&#x27;buildJs&#x27;</span>...</span><br><span class="line">[14:29:00] [webpack:buildJs] Hash: 4eeaff8e1f7bda682e10</span><br><span class="line">Version: webpack 1.13.3</span><br><span class="line">Time: 1232ms</span><br><span class="line">    Asset     Size  Chunks             Chunk Names</span><br><span class="line">   app.js   367 kB    0, 1  [emitted]  app</span><br><span class="line">common.js  3.54 kB       1  [emitted]  common.js</span><br><span class="line">chunk    &#123;0&#125; app.js (app) 357 kB &#123;1&#125; [rendered]</span><br><span class="line">    [0] ./src/js/page/app.js 285 bytes &#123;0&#125; [built]</span><br><span class="line">    [1] ./src/js/common/jquery-1.9.1.min.js 92.6 kB &#123;0&#125; [built]</span><br><span class="line">    [2] (webpack)/buildin/amd-options.js 42 bytes &#123;0&#125; [built]</span><br><span class="line">    [3] ./~/vue/dist/vue.common.js 259 kB &#123;0&#125; [built]</span><br><span class="line">    [4] ./~/process/browser.js 5.3 kB &#123;0&#125; [built]</span><br><span class="line">chunk    &#123;1&#125; common.js (common.js) 0 bytes [rendered]</span><br><span class="line">[14:29:00] Finished <span class="string">&#x27;buildJs&#x27;</span> after 1.24 s</span><br><span class="line">[14:29:00] Starting <span class="string">&#x27;default&#x27;</span>...</span><br><span class="line">[14:29:00] Finished <span class="string">&#x27;default&#x27;</span> after 7.21 μs</span><br><span class="line">&#123; webpackGulpDeom &#125;  »</span><br></pre></td></tr></table></figure>

<h2 id="两种方案对比"><a href="#两种方案对比" class="headerlink" title="两种方案对比"></a>两种方案对比</h2><p>从以上输出结果可以看出：</p>
<h3 id="使用gulp-webpack"><a href="#使用gulp-webpack" class="headerlink" title="使用gulp-webpack"></a>使用gulp-webpack</h3><ul>
<li><code>gulpfile.js</code>与<code>webpack.config.js</code>都要修改</li>
<li>执行命令打印的信息更少</li>
<li>编译时间更多？</li>
</ul>
<h3 id="使用gulp-util"><a href="#使用gulp-util" class="headerlink" title="使用gulp-util"></a>使用gulp-util</h3><ul>
<li>只需要修改<code>gulpfile.js</code>,即使以后单独使用其中一个也不需要再做额外修改</li>
<li>打印信息更丰富</li>
<li>编译时间更短？</li>
</ul>
<p>关于编译时间多少这块，我也没弄太清楚，如果有错误，请读者指出。就个人而言是比较喜欢第二种方案的</p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>gulp</tag>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>使用vue框架造了一个日历控件</title>
    <url>/2017-01-05/vue-datapicker.html</url>
    <content><![CDATA[<blockquote>
<p>使用官方提供的vue-simple-template配置打包，写的一个简单的vue-datepicker。支持选择功能，功能比较简单，欢迎大家拍砖.</p>
</blockquote>
<h2 id="效果预览-demo"><a href="#效果预览-demo" class="headerlink" title="效果预览(demo)"></a>效果预览(<span class="exturl" data-url="aHR0cHM6Ly8ydWUuZ2l0aHViLmlvL3Z1ZS1kYXRlcGlja2Vy">demo<i class="fa fa-external-link-alt"></i></span>)</h2><p><img data-src="/images/posts/vue-datepicker2.gif" alt="vue-datepicker"></p>
<h2 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#全局安装vue,vue-cli,webpack，如以安装则跳过</span></span><br><span class="line">npm install -g vue vue-cli webpack</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行项目=&gt;localhost:8080</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多的构建信息请参考官网</span></span><br></pre></td></tr></table></figure>

<h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><p>2017-2-10 15:14:43</p>
<ul>
<li>修正选择日期后高亮错误问题</li>
<li>修正多出方法中计算时数字会被转化成字符串问题</li>
</ul>
<p>2016-12-9 10:12:58</p>
<ul>
<li>更新效果图</li>
<li>修正computed计算时数字会被转化成字符串问题<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> startNum = self.<span class="property">chooseType</span> ? +self.<span class="property">YearChangeSyboml</span> - <span class="number">4</span> : <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>2016-12-8 17:30:04</p>
<ul>
<li>增加输入框唤醒日历</li>
<li>增加选择功能</li>
</ul>
<p>2016-12-8 12:10:14</p>
<ul>
<li>上传日历，只有简单展示版本</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>待整理…</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>datepicker</tag>
      </tags>
  </entry>
  <entry>
    <title>vue中慎用style的scoped属性</title>
    <url>/2017-11-15/vue-style-scoped.html</url>
    <content><![CDATA[<blockquote>
<p>在vue组件中，在style标签上添加scoped属性，以表示它的样式作用于当下的模块，很好的实现了样式私有化的目的，这是一个非常好的机制。但是为什么要慎用呢？在实际业务中我们往往会对公共组件样式做细微的调整，如果添加了scoped属性，那么样式将会变得不易修改。初写这篇文章时，本人没有找到一个好的方法去解决这个问题，后来经过大伙的解答，才让我恍然大悟。</p>
</blockquote>
<h2 id="何为谨慎使用"><a href="#何为谨慎使用" class="headerlink" title="何为谨慎使用"></a>何为谨慎使用</h2><p>谨慎使用不是不用，而是持一种审视的目光去看待它。<code>scoped</code>肯定是解决了样式私有化的问题，但同时也引入了新的问题—样式不易（可）修改，而很多时候，我们是需要对公共组件的样式做微调的。所以我才说要谨慎使用</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>首先要说明的问题是，最开始我以为这是一个<code>BUG</code>或者说一个弊端(因为当时没有搞明白scoped的真正作用)，就很英勇的去提了一个<code>issue</code>，然后理所当然的被关闭了，关闭的理由是：<code>scoped</code>设计的初衷就是让样式变得私有，让它不会影响其他任何地方的样式。但是由于我在业务中经常遇到需要修改有<code>scoped</code>属性的组件，就写了一篇文章记录一下这个问题，希望大家谨慎的使用这个属性。<br>然而事实再一次证明了我的愚蠢，在<code>vue-loader</code>的文档中已经详细的对这个问题做了分析，并且对我遇到这种问题给出了解决方法：vue-loader的深度作用选择器。<br>因为我并没有去深入了解这些问题，所以注定这篇文章被大伙拍砖，😂😂😂😂😂😂</p>
<p>解决方案：<span class="exturl" data-url="aHR0cHM6Ly92dWUtbG9hZGVyLnZ1ZWpzLm9yZy96aC1jbi9mZWF0dXJlcy9zY29wZWQtY3NzLmh0bWw=">vue-loader之scoped-css<i class="fa fa-external-link-alt"></i></span></p>
<h3>鉴于此，虽然这篇文章没有什么价值，但为了提醒我自己深究的意义，我对后面的内容做了保留，以下内容是最开始文章的原文，请大家忽略，上面的内容才是正文，没错，正文就是这么少。</h3>

<p>——————————–<b>正文分割线，以下是无营养的内容</b>——————————–</p>
<hr>
<h2 id="scoped实现私有化样式的原理"><a href="#scoped实现私有化样式的原理" class="headerlink" title="scoped实现私有化样式的原理"></a>scoped实现私有化样式的原理</h2><p>为什么会说，会增加复杂度？那么我们先从的实现模块的原理说起。为了方便称呼，我们假设把这种组件叫做<code>模块私有组件</code>，其他的未加<code>scoped</code>的叫做<code>模块一般组件</code>。<br>通过查看<code>DOM</code>结构发现：<code>vue</code>通过在DOM结构以及<code>css</code>样式上加唯一不重复的标记，以保证唯一，达到样式私有化模块化的目的。具体的渲染结果是怎样的，通过一个例子来说明。</p>
<h3 id="公共组件button组件"><a href="#公共组件button组件" class="headerlink" title="公共组件button组件"></a>公共组件button组件</h3><p>一个公共组件<code>button</code>，为了样式模块化，给其加上<code>scoped</code>属性，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//button.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;button-warp&quot;&gt;</span><br><span class="line">        &lt;button class=&quot;button&quot;&gt;text&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">...</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .button-warp&#123;</span><br><span class="line">        display:inline-block;</span><br><span class="line">    &#125;</span><br><span class="line">    .button&#123;</span><br><span class="line">        padding: 5px 10px;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        border-radus: 2px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="浏览器渲染button组件"><a href="#浏览器渲染button组件" class="headerlink" title="浏览器渲染button组件"></a>浏览器渲染button组件</h3><p><code>button</code>组件在浏览器渲染出的<code>html</code>部分和<code>css</code>部分分别为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-2311c06a</span> <span class="attr">class</span>=<span class="string">&quot;button-warp&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-v-2311c06a</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button-warp</span><span class="selector-attr">[data-v-2311c06a]</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span><span class="selector-attr">[data-v-2311c06a]</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>-radus: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面的字可以看出，添加了<code>scoped</code>属性的组件，为了达到组件样式模块化，做了两个处理：</p>
<ul>
<li>给<code>HTML</code>的<code>DOM</code>节点加一个不重复<code>data</code>属性(形如：data-v-2311c06a)来表示他的唯一性</li>
<li>在每句<code>css</code>选择器的末尾（编译后的生成的css语句）加一个当前组件的<code>data</code>属性选择器（如[data-v-2311c06a]）来私有化样式</li>
</ul>
<p>大家都知道<code>css</code>样式有一个优先级的说法，<code>scoped</code>的这一操作，虽然达到了组件样式模块化的目的，但是会造成一种后果：每个样式的权重加重了：理论上我们要去修改这个样式，需要更高的权重去覆盖这个样式。这是增加复杂度的其中一个维度。</p>
<h2 id="其他组件引用button组件"><a href="#其他组件引用button组件" class="headerlink" title="其他组件引用button组件"></a>其他组件引用button组件</h2><p>上面分析了单个组件渲染后的结果,那么组件互相调用之后会出现什么样的结果呢？，具体分两种情况：模块一般组件引用模块私有组件（本质和模块私有组件引用模块一般组件一样）；模块私有组件引用模块私有组件。</p>
<p>举个例子：在组件<code>content.vue</code>中使用了<code>button</code>组件，那么<code>content.vue</code>组件是否添加<code>scoped</code>属性渲染出来的结果有什么区别呢？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//content.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;p class=&quot;title&quot;&gt;&lt;/p&gt;</span><br><span class="line">        &lt;!-- v-button假设是上面定义的组件 --&gt;</span><br><span class="line">        &lt;v-button&gt;&lt;/v-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">...</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .content&#123;</span><br><span class="line">        width: 1200px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">    .content .button&#123;</span><br><span class="line">        border-raduis: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="模块一般组件（未添加scoped）引用模块私有组件"><a href="#模块一般组件（未添加scoped）引用模块私有组件" class="headerlink" title="模块一般组件（未添加scoped）引用模块私有组件"></a>模块一般组件（未添加scoped）引用模块私有组件</h3><p>如果<code>style</code>上没有加<code>scoped</code>属性，那么渲染出来<code>html</code>和<code>css</code>分别就是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-button假设是上面定义的组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-2311c06a</span> <span class="attr">class</span>=<span class="string">&quot;button-warp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-v-2311c06a</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*button.vue渲染出来的css*/</span></span><br><span class="line"><span class="selector-class">.button-warp</span><span class="selector-attr">[data-v-2311c06a]</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span><span class="selector-attr">[data-v-2311c06a]</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>-radus: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*content.vue渲染出来的css*/</span></span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.button</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>-raduis: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，虽然在<code>content</code>组件中，修改了<code>button</code>的<code>border-raduis</code>属性，但是由于权重关系，生效的依然是组件内部的样式（此时是外部的样式被覆盖）。所以如果要达到修改样式的目的，就必须加重我们要修改样式的权重（增加选择器层级，ID选择器，并列选择器，impotant等）</p>
<h3 id="模块私有组件（添加scoped）引用模块私有组件"><a href="#模块私有组件（添加scoped）引用模块私有组件" class="headerlink" title="模块私有组件（添加scoped）引用模块私有组件"></a>模块私有组件（添加scoped）引用模块私有组件</h3><p>如果加了<code>scoped</code>属性呢？按照开始分析出来的规则（事实也是这么的）：<br>首先是在所有的<code>DOM</code>节点加上<code>data</code>属性<br>然后在css选择器尾部加上<code>data</code>属性选择器</p>
<p>那么渲染出来<code>html</code>和<code>css</code>分别就是：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-57bc25a0</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-v-57bc25a0</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- v-button假设是上面定义的组件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-v-57bc25a0</span> <span class="attr">data-v-2311c06a</span> <span class="attr">class</span>=<span class="string">&quot;button-warp&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-v-2311c06a</span> <span class="attr">class</span>=<span class="string">&quot;button&quot;</span>&gt;</span>text<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*button.vue渲染出来的css*/</span></span><br><span class="line"><span class="selector-class">.button-warp</span><span class="selector-attr">[data-v-2311c06a]</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span><span class="selector-attr">[data-v-2311c06a]</span>&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>-radus: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*content.vue渲染出来的css*/</span></span><br><span class="line"><span class="selector-class">.content</span><span class="selector-attr">[data-v-57bc25a0]</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.button</span><span class="selector-attr">[data-v-57bc25a0]</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>-raduis: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于上面的两种情况，可以明显看出来渲染后的结果大不相同。<br>虽然我们在<code>content</code>添加了想要修改<code>button</code>组件的样式的代码，但是仔细看，由于<code>.content .button</code>这句在末尾加的是<code>content</code>组件的<code>scoped</code>标记，最后这句其实根本作用不到我们想要的<code>DOM</code>节点上，所以这种情况我们在<code>content</code>内部写的任何样式都不会影响到<code>button.vue</code>组件，所以这就尴尬了。。。。<br>当然这个问题也是可以解决的，就是直接加全局样式可以修改到，但这势必会影响全部地方的组件；所以需要另外一种方法在<code>content.vue</code>组件内再加一个不带<code>scoped</code>属性的<code>style</code>标签，也就意味着要加两个<code>style</code>，一个用于私有样式，一个用于共有样式。这肯定是有点shit的，并且这两种解决方案都回避不了一个问题：权重！！！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//content.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;content&quot;&gt;</span><br><span class="line">        &lt;p class=&quot;title&quot;&gt;&lt;/p&gt;</span><br><span class="line">        &lt;!-- v-button假设是上面定义的组件 --&gt;</span><br><span class="line">        &lt;v-button&gt;&lt;/v-button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">...</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .content&#123;</span><br><span class="line">        width: 1200px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .content .button&#123;</span><br><span class="line">        border-raduis: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>这样符合规范么？貌似没看到不能这么写，并且这么写也确实生效了。。。但这样确实增加了思维的复杂度，有点苦恼啊。</p>
<h2 id="总结scoped的渲染规则"><a href="#总结scoped的渲染规则" class="headerlink" title="总结scoped的渲染规则"></a>总结scoped的渲染规则</h2><p>总结一下<code>scoped</code>三条渲染规则</p>
<ul>
<li>给<code>HTML</code>的<code>DOM</code>节点加一个不重复<code>data</code>属性(形如：data-v-2311c06a)来表示他的唯一性</li>
<li>在每句<code>css</code>选择器的末尾（编译后的生成的css语句）加一个当前组件的<code>data</code>属性选择器（如[data-v-2311c06a]）来私有化样式</li>
<li>如果组件内部包含有其他组件，只会给其他组件的最外层标签加上当前组件的data属性</li>
</ul>
<h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>对于引用的三方库，如果对方使用了<code>scoped</code>，我们无力改变什么，如果确实需要修改他的样式最能在不加<code>scoped</code>的组件中修改样式，或者全局样式直接修改，这很粗暴！<br>对于自己维护的组件，一定要想清楚，组件的样式能否满足所有的情况。如果确实需要加，无疑会增加使用这个组件的开发同学的工作！</p>
<p>当然对于这个问题，如果诸君有更好的解决方案，请诸君TELL ME一下下！</p>
<h2 id="趣事"><a href="#趣事" class="headerlink" title="趣事"></a>趣事</h2><p>在使用scoped一定要谨慎scoped的这个特性，本人以为这是一个BUG，就去提了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS9pc3N1ZXMvNzA2Nw==">issue<i class="fa fa-external-link-alt"></i></span> ，结果尤大很霸气的回复<br><code>scoped</code>设计的初衷就是不能让当前组件的样式修改其他任何地方的样式，因为设计如此。所以理所当然的这个<code>issue</code>已被干掉。。。😂😂😂😂😂😂</p>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Github Action自动化发布npm包</title>
    <url>/2024-04-20/%E4%BD%BF%E7%94%A8Github%20Action%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8F%91%E5%B8%83npm%E5%8C%85.html</url>
    <content><![CDATA[<blockquote>
<p>GitHub Actions 提供了一种强大的自动化构建和发布流程的方式，通过组合github action的方式形成了workflow，来实现CI&#x2F;CD。我们完全可以将 npm 包的发布流程集成到 GitHub workflow中，做到自动化发包，这可以可以提高效率并减少人为错误。以下是如何使用 GitHub Actions 实现自动化发布的详细指南。</p>
</blockquote>
<h2 id="0-原理解释"><a href="#0-原理解释" class="headerlink" title="0. 原理解释"></a>0. 原理解释</h2><p>github actions是一个github推出的CI&#x2F;CD工具，可以模拟平台（比如linux等）自动化执行一些操作。<br>npm可以通过token实现免登陆发布包，并且Github Secrets能很好的保护token不被泄露（后面会说简单说一下为什么），这样就避免了在登陆信息在CI&#x2F;CD时泄露</p>
<p>这是我编写的权限验证的一个包，支持vue，react以及函数式调用，同时使用github workflow实现的自动npm化发包。欢迎大家参考，同时提出优化意见：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzJ1ZS92YWxpZGF0ZS1wZXJtaXNzaW9uL3RyZWUvbWFpbi8uZ2l0aHViL3dvcmtmbG93cw==">validate-permission&#x2F;.github&#x2F;workflows at main · 2ue&#x2F;validate-permission · GitHub<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保：</p>
<ul>
<li>你有一个 GitHub 账户，并且已经创建了一个仓库。</li>
<li>你的项目中包含一个 <code>package.json</code> 文件。</li>
<li>你有一个 npm 账户，并且已经获取了 npm token。</li>
<li>你即将发布的包的包名没有被占用。</li>
</ul>
<h3 id="获取Access-Token"><a href="#获取Access-Token" class="headerlink" title="获取Access Token"></a>获取Access Token</h3><p>首先登陆npm官网，然后点击Access Tokens：</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files20240420164923-00c8fa57.png" alt="image.png"></p>
<p>然后进入access Tokens生成页面:</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files20240420165247-dd09ddfc.png" alt="image.png"></p>
<p>两者任选一个点击进入，两者都可以作为token在github actions中使用，只是Classic Token设置更简单，Granular Access Token设置更多，控制更精细化</p>
<p>点击Classic Token后：一定勾选publish，后面才能正常从github actions推送</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files20240420165358-eb4306d8.png" alt="image.png"></p>
<p>点击：Granular Access Token，红框勾选的三个必填：</p>
<ul>
<li>Token name：不必多说，token名字，起一个你喜欢的</li>
<li>Expiration：有效期，默认三十天，可以改得更长，过期后需要重新生成</li>
<li>Permissions：权限，即生成的token能做什么样的操作，同样需要选择 read &amp;&amp; write，不然github actions执行是无法推送</li>
<li>其余的选项可以根据需要适当勾选</li>
</ul>
<p>填写完成后，滑到底部点击Generate token按钮</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files20240420165954-939902ed.png" alt="image.png"></p>
<h2 id="2-如何免登陆发布npm包"><a href="#2-如何免登陆发布npm包" class="headerlink" title="2. 如何免登陆发布npm包"></a>2. 如何免登陆发布npm包</h2><h3 id="创建-npmrc文件"><a href="#创建-npmrc文件" class="headerlink" title="创建.npmrc文件"></a>创建.npmrc文件</h3><p>前面你已经生成了一个npm的具有publish或者write权限的access token。<br>那么你只需在项目根目录下创建 <code>.npmrc</code> 文件，写入以下内容这个文件将包含 npm registry 的授权信息。但要注意，因为access token具有你的npm账户读写权利，所有不应该将.npmrc文件提交到远程仓库，需要将该文件加入到.gitignore中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//registry.npmjs.org/:_authToken=你刚刚申请的token</span><br></pre></td></tr></table></figure>

<p>或者直接在项目根目录命令行执行，将会自动生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;//registry.npmjs.org/:_authToken=你刚刚申请的token&quot;</span> &gt; .npmrc</span><br></pre></td></tr></table></figure>

<p>然后，将 <code>.npmrc</code> 文件添加到你的版本控制系统中。</p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>将你准备发布的文件，编译好。假设你已经准备好了，那么就愉快的执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">logout</span></span><br><span class="line">npm publish</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将会输出下面类似字样，就是成功了</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># npm notice package size: 12.6 kB</span></span><br><span class="line"><span class="comment"># npm notice unpacked size: 84.1 kB</span></span><br><span class="line"><span class="comment"># npm notice shasum: d282cbe9374611e6d10d6fb30215f61bb6c95c89</span></span><br><span class="line"><span class="comment"># npm notice integrity: sha512-N4iu+YUebBPCP[...]21dOqKE6G43iQ==</span></span><br><span class="line"><span class="comment"># npm notice total files: 18</span></span><br><span class="line"><span class="comment"># npm notice</span></span><br><span class="line"><span class="comment"># npm notice Publishing to [https://registry.npmjs.org/](https://registry.npmjs.org/) with tag latest and default access</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>或者登陆npm官网，查看刚刚发布的包</p>
<h3 id="发布失败"><a href="#发布失败" class="headerlink" title="发布失败"></a>发布失败</h3><p>如果你没有成功，出现如下报错：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm ERR! need auth You need to authorize this machine using `npm adduser` [https://docs.npmjs.com/using-private-packages-in-a-ci-cd-workflow](https://docs.npmjs.com/using-private-packages-in-a-ci-cd-workflow)</span><br></pre></td></tr></table></figure>

<p>有三个可能原因：</p>
<ul>
<li>.npmrc配置问题：确保你的.npmrc文件路径，命名和内容正确</li>
<li>.npmrc：确保你的access token正确，或者具有publish或write权限</li>
<li>本地没有使用npm官方源：由于某些不可描述原因，你将本地npm的源设置为其他源，没有设置为<code>https://registry.npmjs.org</code>，比如腾讯源，阿里云云等，此时需要切换过来才能正确</li>
</ul>
<p>至此使用npm access token发布npm包的流程已经跑通了。</p>
<p>相信大家已经发现了，上面这种方式有一个问题：.npmrc只能放到本地，意味着每次换一个电脑写代码都要重新去复制access token，生成.npmrc，那有没有一种方式可以比较安全的管理它呢，答案肯定是有的：答案就在Github。<br>我们不但可以利用GitHub Secrets管理npm的access token，而且还可利用github actions能力实现自动化workflow，来自动化发包到npm。</p>
<h2 id="3-配置-GitHub-Secrets"><a href="#3-配置-GitHub-Secrets" class="headerlink" title="3. 配置 GitHub Secrets"></a>3. 配置 GitHub Secrets</h2><p>在 GitHub 仓库中添加 npm token：</p>
<ol>
<li>进入 GitHub 仓库的 “Settings” &gt; “Secrets”。</li>
<li>点击 “New repository secret”。</li>
<li>输入 <code>NPM_TOKEN</code> 作为名称，并粘贴你的 npm token 作为值。</li>
<li>保存秘密。<br><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240430102627-4d1071993a2ae740fc4de08018c3df7f-1714443988.png" alt="image.png"></li>
</ol>
<p>请注意，这里我们可以选择Secrets和Variables，他们都在我们编写的workflow中被读取到，其实都是变量，但是两者有区别：</p>
<table>
<thead>
<tr>
<th>变量类型</th>
<th>存储方式</th>
<th>界面是否可见</th>
<th>修改内容</th>
<th>修改变量名</th>
<th>workflow是否可见</th>
</tr>
</thead>
<tbody><tr>
<td>Secrets</td>
<td>加密</td>
<td>不可见</td>
<td>只能更新且更新时不能看到之前内容</td>
<td>无法修改</td>
<td>以***显示</td>
</tr>
<tr>
<td>Variables</td>
<td>明文</td>
<td>明文且可见</td>
<td>可自由更改且可以看到之前内容</td>
<td>可以修改</td>
<td>明文可见</td>
</tr>
<tr>
<td>从上面的比较可以看出为什么github Secrets能够有效的保护npm access token，当然万事不是绝对，如果非要追求百分百安全，那就使用最原始的方式吧，毕竟放在你本地的文件也可能因为中木马泄露出去。</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="4-编写-GitHub-Actions-Workflow"><a href="#4-编写-GitHub-Actions-Workflow" class="headerlink" title="4. 编写 GitHub Actions Workflow"></a>4. 编写 GitHub Actions Workflow</h2><p>至此我们就可以利用github actions来编写一个workflow。让我们捋一下思路：</p>
<ul>
<li>什么时候执行：在代码推送到某分支，或者打tag的时候，这里我们选择当代码推送时</li>
<li>执行流程<ul>
<li>拉取代码</li>
<li>设置时区：如果需要</li>
<li>设置node环境</li>
<li>安装pnpm，yarn等工具：如果需要</li>
<li>安装代码依赖，并打包</li>
<li>写入token到.npmrc</li>
<li>执行npm 发布<br>当然如果所有的操作都需要我们自己去实现，就比较复杂，好在有第三方action可以快速的让我们实现这些能力：</li>
</ul>
</li>
<li>run：可以执行脚本命令，让我们可以执行类似npm i这样的命令</li>
<li>actions&#x2F;checkout@v4：实现代码拉取</li>
<li>actions&#x2F;setup-node@v4：实现node环境，可以指定node版本</li>
</ul>
<p>那么我们就用这些能力创建一个workflow吧</p>
<p>在项目根目录下创建 <code>.github/workflows/npm-publish.yml</code> 文件，并添加以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># workflow名字</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Publish</span> <span class="string">to</span> <span class="string">npm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 触发条件：当 main 分支有 push 事件时触发</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">publish:</span></span><br><span class="line">    <span class="comment"># 在 Ubuntu 最新版本上运行作业</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">        <span class="comment"># 使用 actions/checkout 检出当前代码</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">code</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置 Node.js 环境</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">20.11</span><span class="number">.1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 安装项目依赖，并编译</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">	        <span class="string">npm</span> <span class="string">i</span></span><br><span class="line">	        <span class="string">npm</span> <span class="string">run</span> <span class="string">build</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 添加access token到.npmrc</span></span><br><span class="line">	  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Add</span> <span class="string">Npm</span> <span class="string">Token</span></span><br><span class="line">	    <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">			<span class="string">echo</span> <span class="string">&quot;//registry.npmjs.org/:_authToken=$<span class="template-variable">&#123;&#123; secrets.NPM_TOKEN &#125;&#125;</span>&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">./.npmrc</span></span><br><span class="line">		    <span class="string">ls</span> <span class="string">-al</span></span><br><span class="line">		    <span class="string">cat</span> <span class="string">./.npmrc</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment"># 发布到 npm registry</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Publish</span> <span class="string">to</span> <span class="string">npm</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">publish</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">	        <span class="comment"># 读取github的secrets变量，这里的NPM_TOKEN是前面设置的变量名</span></span><br><span class="line">          <span class="attr">NPM_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.NPM_TOKEN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<p>此 workflow 会在推送到 <code>main</code> 分支时触发。</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240430101044-08164a7b48e7051473021205bab4be4b-1714443044.png" alt="image.png"></p>
<h2 id="5-推送更改到-GitHub"><a href="#5-推送更改到-GitHub" class="headerlink" title="5. 推送更改到 GitHub"></a>5. 推送更改到 GitHub</h2><p>将你的更改推送到 GitHub 仓库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;Set up automated npm publishing with GitHub Actions&quot;</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<h2 id="6-测试-Workflow"><a href="#6-测试-Workflow" class="headerlink" title="6. 测试 Workflow"></a>6. 测试 Workflow</h2><p>一旦你推送了更改，GitHub Actions workflow 将会运行。你可以在 GitHub 仓库的 “Actions” 选项卡中查看 workflow 的状态。</p>
<h2 id="7-发布新版本"><a href="#7-发布新版本" class="headerlink" title="7. 发布新版本"></a>7. 发布新版本</h2><p>当你准备发布新版本时，更新 <code>package.json</code> 中的版本号，然后提交并推送这些更改到 <code>main</code> 分支。GitHub Actions 将自动处理剩余的发布流程。</p>
<h2 id="8-优化"><a href="#8-优化" class="headerlink" title="8.优化"></a>8.优化</h2><p>这个workflow脚本还有很多优化的空间，比如：</p>
<h3 id="优化触发时机"><a href="#优化触发时机" class="headerlink" title="优化触发时机"></a>优化触发时机</h3><p>如果我们推送代码就执行发包操作，在有些情况下可能不符合我们要求，所有我们可以更改触发条件：<br>正常情况我们想的是创建了一个v1.0.0这样的tag分支才触发，并且是修改了关键源码才触发</p>
<ul>
<li>设置当推送了tag分支并且需要tag符合某种格式才触发流水</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Npm</span> <span class="string">publish</span></span><br><span class="line">	<span class="attr">on:</span></span><br><span class="line">		<span class="attr">push:</span></span><br><span class="line">			<span class="attr">tags:</span></span><br><span class="line">				<span class="bullet">-</span> <span class="string">&quot;v*&quot;</span> <span class="comment"># 这段的意思是仅在出现名为 v 字符开头的tag时，触发此任务，如v1.2.1</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置修改了某些文件才执行发包</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">dorny/paths-filter@v3</span></span><br><span class="line"><span class="bullet">-</span>       <span class="comment">#必须设定ID，用于后面读取这一步的结果</span></span><br><span class="line">        <span class="attr">id:</span> <span class="string">changes</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">filters:</span> <span class="string">|</span></span><br><span class="line"><span class="string">            update:</span></span><br><span class="line"><span class="string">              - &#x27;main/**&#x27;</span></span><br><span class="line"><span class="string">              - &#x27;types/**&#x27;</span></span><br><span class="line"><span class="string">              - &#x27;utils/**&#x27;</span></span><br><span class="line"><span class="string">              - README.md</span></span><br><span class="line"><span class="string">              - package.json</span></span><br><span class="line"><span class="string">              - rollup.config.js</span></span><br><span class="line"><span class="string">              - tsconfig.json</span></span><br><span class="line"><span class="string">              - .babelrc</span></span><br><span class="line"><span class="string">              - .github/workflows/publish.yml</span></span><br><span class="line"><span class="string"></span><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">pnpm</span></span><br><span class="line"><span class="bullet">-</span>       <span class="comment"># 这里是当【changes】输出了update为true才执行执行编译等工作</span></span><br><span class="line">        <span class="attr">if:</span> <span class="string">steps.changes.outputs.update</span> <span class="string">==</span> <span class="string">&#x27;true&#x27;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">pnpm</span></span><br></pre></td></tr></table></figure>

<p><code>dorny/paths-filter@v3</code>是<code>github actions</code>市场的一个包，可以用来检查哪些文件有变动，如果有变动则输出一个变量update，为true时表示有变动，可以用steps.changes.outputs.update来读取这个变量</p>
<h2 id="自动化生成版本号"><a href="#自动化生成版本号" class="headerlink" title="自动化生成版本号"></a>自动化生成版本号</h2><p>每次改动需要发布npm包时，都需要修改package.json的版本号，无疑有点麻烦，那我们可以使用npm version <update_type>命令来做到自动化版本修改：</p>
<ul>
<li><code>&lt;update_type&gt;</code> 是语义化版本类型之一，如 <code>major</code>、<code>minor</code> 或 <code>patch</code>。</li>
<li>例如，运行 <code>npm version patch</code> 将会更新版本号为当前版本号的下一个补丁版本</li>
</ul>
<p>甚至你可以通过github workflow的<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYWN0aW9ucy9sZWFybi1naXRodWItYWN0aW9ucy92YXJpYWJsZXM=">内置变量<i class="fa fa-external-link-alt"></i></span>拿到tag名字，根据tag特征做到修改哪一个版本号</p>
<h2 id="自动化生成tag和release"><a href="#自动化生成tag和release" class="headerlink" title="自动化生成tag和release"></a>自动化生成tag和release</h2><p>如果你的commit比较规范，比如使用了@changesets&#x2F;cli等，那么可以利用github actions市场的三方包来自动化为你的发布生成changelog，tag，release等信息，比如semantic-release-action等</p>
<p>当然根据个人需求不同，可能还可以做更多的优化，这里就不一一述说了，毕竟本篇文章仅仅是一个穿针引线。</p>
<h2 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h2><h3 id="问题-1：权限问题"><a href="#问题-1：权限问题" class="headerlink" title="问题 1：权限问题"></a>问题 1：权限问题</h3><p>如果你的 npm token 没有足够的权限发布包，你可能会遇到权限错误。[参考](#获取Access Token)</p>
<p><strong>解决方案</strong>：确保你的 npm token 有发布包的权限。通常，这意味着你需要在 npm 网站上生成一个具有适当权限的 token。</p>
<h3 id="问题-2：网络问题"><a href="#问题-2：网络问题" class="headerlink" title="问题 2：网络问题"></a>问题 2：网络问题</h3><p>如果你的 CI&#x2F;CD 服务器无法访问 npm registry，发布可能会失败。一般在github上不会出现该问题，可能在本地使用了代理或者切换了npm源会出现这个问题。<a href="#%E5%8F%91%E5%B8%83%E5%A4%B1%E8%B4%A5">参考</a></p>
<p><strong>解决方案</strong>：检查你的 CI&#x2F;CD 服务器的网络设置，确保它可以无障碍地访问 <code>https://registry.npmjs.org/</code>。</p>
<h3 id="问题-3：Workflow-配置错误"><a href="#问题-3：Workflow-配置错误" class="headerlink" title="问题 3：Workflow 配置错误"></a>问题 3：Workflow 配置错误</h3><p>如果你的 workflow 配置有误，它可能不会按预期触发。</p>
<p><strong>解决方案</strong>：仔细检查 workflow 文件的语法和配置，特别是触发条件和 secret 的使用。</p>
<h3 id="问题-4：-npmrc问题"><a href="#问题-4：-npmrc问题" class="headerlink" title="问题 4：.npmrc问题"></a>问题 4：.npmrc问题</h3><p>如果你的 <code>.npmrc</code> 文件没有被正确地添加到项目根目录或内容不正确，那么可能导致发布失败。<a href="#%E5%88%9B%E5%BB%BA.npmrc%E6%96%87%E4%BB%B6">参考</a></p>
<p><strong>解决方案</strong>：确保 <code>.npmrc</code> 文件被正确添加到你的版本控制系统，并且格式正确无误。</p>
<p>通过以上步骤和解决方案，你可以确保 npm 包的自动化发布流程顺畅运行。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS91c2luZy1wcml2YXRlLXBhY2thZ2VzLWluLWEtY2ktY2Qtd29ya2Zsb3c=">Using private packages in a CI&#x2F;CD workflow | npm Docs<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vcGFja2FnZXMvd29ya2luZy13aXRoLWEtZ2l0aHViLXBhY2thZ2VzLXJlZ2lzdHJ5L3dvcmtpbmctd2l0aC10aGUtbnBtLXJlZ2lzdHJ5">Working with the npm registry - GitHub Docs<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vYWN0aW9ucy9sZWFybi1naXRodWItYWN0aW9ucy92YXJpYWJsZXM=">Variables - GitHub Docs<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>github/actions</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>CD</tag>
        <tag>CI</tag>
        <tag>action</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>使用conda快速初始化项目python</title>
    <url>/2024-03-07/%E4%BD%BF%E7%94%A8conda%E5%BF%AB%E9%80%9F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AEpython.html</url>
    <content><![CDATA[<blockquote>
<p>python的环境管理方案很多，社区有很多解决方案，本文介绍一种常用的、支持多版本python、多人协作的、方便快捷的环境管理方案：miniforge-conda</p>
</blockquote>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>如果你想使用conda来管理你的Python环境和依赖，你需要在你的机器上安装Anaconda或Miniconda。Anaconda包含了conda，Python和150+科学包及其依赖。而Miniconda只包含了conda和Python，可以参考[[python环境依赖管理方案]]</p>
<p>但是，由于Anaconda对于商业用户（大型实体、公司和一些研究机构）需要购买许可证，个人用户暂时免费，为了避免后续个人使用也收费需要再次切换，笔者现在已经切换到社区维护版本的<a href="https://github.com/conda-forge/miniforge"><code>miniforge</code></a>，两者都是使用conda作为包和环境管理工具，使用时命令几乎一样，能够做到无缝迁移</p>
<h2 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h2><p>为什么需要创建虚拟环境？<br>Python创建虚拟环境的目的是为了在同一台计算机上同时管理和运行多个独立的Python项目。虚拟环境提供了一个隔离的运行环境，使得每个项目可以拥有自己独立的Python解释器和依赖库，而不会相互干扰。</p>
<p>以下是创建虚拟环境的几个主要目的：</p>
<ol>
<li>隔离项目：每个项目都可以在自己的虚拟环境中运行，避免不同项目之间的依赖冲突。这样可以确保每个项目都能够独立地使用所需的特定Python版本和依赖库。</li>
<li>管理依赖：虚拟环境允许您为每个项目单独安装和管理所需的依赖库。这样可以确保每个项目都使用其特定版本的依赖库，而不会受其他项目的影响。</li>
<li>简化部署：使用虚拟环境可以更轻松地将项目部署到其他计算机或服务器上。您可以将虚拟环境与项目一起打包，并确保在不同环境中具有一致的运行结果。</li>
<li>提高可移植性：虚拟环境使得项目在不同操作系统和计算机上的移植更加容易。您可以在不同平台上创建相同的虚拟环境，并确保项目在各个环境中都能够正常运行。</li>
</ol>
<p>创建虚拟环境可以提供一个独立、隔离和可管理的Python运行环境，使得多个项目能够在同一台计算机上同时运行，而不会相互干扰。这为项目开发、依赖管理和部署提供了更大的灵活性和可靠性</p>
<p>注意在生成导出依赖项时，生成的记录文件类型一般是environment.yml或environment.txt，笔者这里是用的environment.yml</p>
<h2 id="创建全新的项目"><a href="#创建全新的项目" class="headerlink" title="创建全新的项目"></a>创建全新的项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建新项目</span></span><br><span class="line">mkdir test-python-project &amp;&amp; cd test-python-project</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择你需要的python版本来创建虚拟环境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">conda create --name &#123;envname&#125; python=&#123;version&#125;</span></span><br><span class="line">conda create --name myenv python=3.10</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">激活虚拟环境</span></span><br><span class="line">conda activate myenv</span><br></pre></td></tr></table></figure>

<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖: 假设安装request库</span></span><br><span class="line">conda install request</span><br></pre></td></tr></table></figure>

<h2 id="导出依赖及协同开发"><a href="#导出依赖及协同开发" class="headerlink" title="导出依赖及协同开发"></a>导出依赖及协同开发</h2><p>为什么需要导出依赖呢？其实只有一个目的：保证项目在其他机器上能够运行。如果你项目依赖了几十个包，都分散在代码各处，要在其他机器上将这个项目运行起来，是多么的费事！所有我们必须有一个集中的地方将依赖管理起来，conda提供的一些常用的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">不带--name参数默认为当前项目已经激活的环境</span></span><br><span class="line">conda env export &gt; environment.yml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定导出某个环境的依赖</span></span><br><span class="line">conda env export --name myenv &gt; environment.yml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个和项目完全一样的虚拟环境</span></span><br><span class="line">conda env create --file environment.yml</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装依赖</span></span><br><span class="line">conda install --file requirements.yml</span><br></pre></td></tr></table></figure>

<p>那么现在就可以愉快的编写代码了~</p>
]]></content>
      <categories>
        <category>python/Anaconda</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Anaconda</tag>
        <tag>conda</tag>
      </tags>
  </entry>
  <entry>
    <title>如何使用Github Actions实现自动化部署Hexo博客</title>
    <url>/2024-04-19/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Github%20Actions%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2.html</url>
    <content><![CDATA[<blockquote>
<p>Hexo 是一个基于 Node.js 的静态博客框架，它以简洁的速度和易用性受到许多开发者的青睐。如果你的博客部署在github上，那么这里有一种新的部署方式可能让摆脱频繁提交部署的苦恼！GitHub Actions 为自动化部署Hexo提供了一种解决方案，极大地简化了部署流程和节省了时间，可以让我们更多的专注到写作本身。</p>
</blockquote>
<h2 id="为什么使用Github-Actions"><a href="#为什么使用Github-Actions" class="headerlink" title="为什么使用Github Actions"></a>为什么使用Github Actions</h2><ul>
<li>将文章源文件和部署文件分离，有助于保护源文件中的隐私和你的草稿文件等</li>
<li>节省手动部署的时间，专注于写作本身</li>
<li>学习Github Actions相关知识，不折腾不作死发作了</li>
</ul>
<p>如果你符合以上任何一条，你都应该考虑往下看下去。</p>
<h2 id="什么是Github-Actions"><a href="#什么是Github-Actions" class="headerlink" title="什么是Github Actions"></a>什么是Github Actions</h2><p>GitHub Actions 是 GitHub 推出的一项强大的自动化工具，它允许用户在 GitHub 仓库中创建、编辑和运行自动化脚本，这些脚本被称为工作流程（workflows）。这些工作流程可以响应 GitHub 上的各种事件，例如代码被推送、issue 被创建、pull request 被打开或定期调度任务等。</p>
<p>GitHub Actions 的工作流程（workflow）由 YAML 文件定义，这些文件放在仓库的 <code>.github/workflows</code> 目录下。每个工作流程文件描述了一系列的作业（jobs）和步骤（steps），定义了运行环境、触发条件、要执行的任务等。</p>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><h3 id="创建两个仓库"><a href="#创建两个仓库" class="headerlink" title="创建两个仓库"></a>创建两个仓库</h3><h4 id="创建部署仓库"><a href="#创建部署仓库" class="headerlink" title="创建部署仓库"></a>创建部署仓库</h4><ul>
<li>建立名为 <code>&lt;你的 GitHub 用户名&gt;.github.io</code> 的公开储存库，若之前已将 Hexo 上传至其他储存库，将该储存库重命名即可</li>
<li>将 Hexo 文件夹中的文件 push 到储存库的默认分支，默认分支通常名为 <code>main</code>，旧一点的储存库可能名为 <code>master</code></li>
<li>开启Github Pages能力，使其可以 <code>https://&lt;你的 GitHub 用户名&gt;.github.io</code>访问</li>
</ul>
<p>比如笔者使用<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tLzJ1ZS8ydWUuZ2l0aHViLmlv">2ue.github.io<i class="fa fa-external-link-alt"></i></span>储存库用于存在文章编译后的代码，开启github pages后可通过<span class="exturl" data-url="aHR0cHM6Ly8ydWUuZ2l0aHViLmlvLw==">https://2ue.github.io<i class="fa fa-external-link-alt"></i></span>访问</p>
<h4 id="创建文章源码仓库"><a href="#创建文章源码仓库" class="headerlink" title="创建文章源码仓库"></a>创建文章源码仓库</h4><ul>
<li>创建一个私有仓库，用于储存文章源代码<br>比如，笔者使用myblog储存库存放文章的源文件</li>
</ul>
<p>至此两个仓库已经准备完了，后面所有的操作都在myblog上进行</p>
<h3 id="生成Personal-access-tokens"><a href="#生成Personal-access-tokens" class="headerlink" title="生成Personal access tokens"></a>生成Personal access tokens</h3><blockquote>
<p>github提供了access tokens的能力，可以在不登录的情况访问仓库和操作仓库等，所以我们可以通过相关能力来实现自动化部署，但同时也要保管好该token</p>
</blockquote>
<p>Personal access tokens申请地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucw==">Personal access tokens<i class="fa fa-external-link-alt"></i></span></p>
<p>打开网址后，点击  Generate new token -&gt;   Generate new token (classic)</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240419143829-c5ca633b608e5de79cd1a4ea6146e170-1713508710.png" alt="image.png"></p>
<p>然后依次填写</p>
<ul>
<li>Note: 注释或者名字，按自己喜欢填写符合规则的名字</li>
<li>Expiration：过期时间，可以选择合适的时间，这里我选择的是永不过期，No Expiration</li>
<li>Select scopes：选择权限，勾上repo和workflow，这里的作用是使得这个token具有读写repo的权限和通过github Action更新的能力</li>
</ul>
<p>拖到页面最底部，点击生成按钮</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240419144151-6e76b29403c768c8ceb7b0ba4dd75021-1713508912.png" alt="image.png"></p>
<p>token生成后，会在这里展示刚刚生成的token。<br>注意：新生成的token只会在创建时显示一次，刷新之后就会消失，记得备份保存，如果忘记了，删除重新生成即可</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240419144538-8eec2758015555bfb3cca76b2f6b5f31-1713509139.png" alt="image.png"></p>
<h3 id="Token填写到myblog仓库"><a href="#Token填写到myblog仓库" class="headerlink" title="Token填写到myblog仓库"></a>Token填写到myblog仓库</h3><p>点击：New repository secret ，将刚刚申请的token填入：</p>
<ul>
<li>Name：尽量按规范使用大写，多个单词用_分割</li>
<li>Secret：填入刚刚申请的Token</li>
</ul>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240419145201-801e8d7f766901aab5a57018667cfe05-1713509522.png" alt="image.png"><br><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240419145944-a199879fd60a8c0efc8a9de8946050df-1713509985.png" alt="image.png"></p>
<h2 id="部署脚本编写"><a href="#部署脚本编写" class="headerlink" title="部署脚本编写"></a>部署脚本编写</h2><p>将myblog仓库代码克隆到本地，新增.github&#x2F;workflow文件夹，然后再新增一个.yml的文件，假设这里叫hexo-deploy.yml，然后将以下代码复制到文件中，保存后使用git提交到myblog仓库</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploying</span> <span class="string">Hexo</span> <span class="string">project</span> <span class="string">to</span> <span class="string">GitHub</span> <span class="string">pages</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span> <span class="comment"># 分支有 push 行为时就触发这个 action</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">GITHUB_USER:</span> <span class="string">2ue</span></span><br><span class="line">      <span class="comment"># GitHub Pages仓库 即博客部署需要用到的仓库</span></span><br><span class="line">      <span class="attr">DEPLOY_REPO:</span> <span class="string">2ue.github.io</span></span><br><span class="line">      <span class="attr">DEPLOY_BRANCH:</span> <span class="string">main</span></span><br><span class="line">      <span class="attr">GIT_USER:</span> <span class="string">2ue</span></span><br><span class="line">      <span class="attr">GIT_EMAIL:</span> <span class="string">xxxx@xxx.com</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">submodules:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">fetch-depth:</span> <span class="number">0</span></span><br><span class="line">      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">timezone</span> <span class="string">to</span> <span class="string">Asia/Shanghai</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">szenius/set-timezone@v1.0</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 设置执行环境的时区为 Linux 上海时区</span></span><br><span class="line">          <span class="attr">timezoneLinux:</span> <span class="string">&quot;Asia/Shanghai&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Echo</span> <span class="string">current</span> <span class="string">time</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">timedatectl</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">16.15</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Generate</span> <span class="string">pages</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          export TZ=&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"><span class="string">          npm install -g hexo-cli hexo</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string">          hexo clean &amp;&amp; hexo g</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Git</span> <span class="string">config</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git config --global user.name &quot;$&#123;&#123;GIT_USER&#125;&#125;&quot;</span></span><br><span class="line"><span class="string">          git config --global user.email &quot;$&#123;&#123;GIT_EMAIL&#125;&#125;&quot;</span></span><br><span class="line"><span class="string"></span>      </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Pull</span> <span class="string">blog</span> <span class="string">repo</span> <span class="string">&amp;&amp;</span> <span class="string">Copy</span> <span class="string">files</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          git clone https://github.com/$&#123;&#123;GITHUB_USER&#125;&#125;/$&#123;&#123;DEPLOY_REPO&#125;&#125;.git</span></span><br><span class="line"><span class="string">          rm -rf $&#123;&#123;DEPLOY_REPO&#125;&#125;/*</span></span><br><span class="line"><span class="string">          cp -r ./public/* ./$&#123;&#123;DEPLOY_REPO&#125;&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">blog</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          echo &#x27;&gt;_ Enter repo: $&#123;&#123;GITHUB_USER&#125;&#125;/$&#123;&#123;DEPLOY_REPO&#125;&#125; ...&#x27;</span></span><br><span class="line"><span class="string">          cd $&#123;&#123;DEPLOY_REPO&#125;&#125;</span></span><br><span class="line"><span class="string">          echo &#x27;&gt;_ Pwd current dir ...&#x27;</span></span><br><span class="line"><span class="string">          pwd</span></span><br><span class="line"><span class="string">          echo &#x27;&gt;_ Show files ...&#x27;</span></span><br><span class="line"><span class="string">          ls -al</span></span><br><span class="line"><span class="string">          echo &#x27;&gt;_ Set remote git ...&#x27;</span></span><br><span class="line"><span class="string">          rm -rf .git</span></span><br><span class="line"><span class="string">          git init</span></span><br><span class="line"><span class="string">          git remote add origin https://$&#123;&#123;secrets.DEPLOY_TOKEN&#125;&#125;@github.com/$&#123;&#123;GITHUB_USER&#125;&#125;/$&#123;&#123;DEPLOY_REPO&#125;&#125;.git</span></span><br><span class="line"><span class="string">          git branch -M $&#123;&#123;DEPLOY_BRANCH&#125;&#125;</span></span><br><span class="line"><span class="string">          git add .</span></span><br><span class="line"><span class="string">          echo &#x27;&gt;_ Start Commit ...&#x27;</span></span><br><span class="line"><span class="string">          git commit --allow-empty -m &quot;Github Action Automated Deployment $(date +&#x27;%Y-%m-%d %H:%M:%S&#x27;)&quot;</span></span><br><span class="line"><span class="string">          echo &#x27;&gt;_ Start Push ...&#x27;</span></span><br><span class="line"><span class="string">          git push -u origin $&#123;&#123;DEPLOY_BRANCH&#125;&#125; --force</span></span><br></pre></td></tr></table></figure>

<p>至此Hexo利用Github Actions自动化部署就实现了</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>将代码提交到github后，打开github的myblog仓库（你自己的文章源文件仓库），点击：Actions可以看到有任务正在执行，以下是执行成功后的界面:</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240419163021-3e80c235f091f6952ab717c161ecde58-1713515423.png" alt="image.png"></p>
<p>如果有失败，可以点击对应的步骤，查询详细情况：</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240419164020-573d96344da97acee02d1a2977a59efd-1713516021.png" alt="image.png"></p>
<p>当然如果你使用的vscode，也可以安装Github Actions插件，然后再vscode中直接查看执行过程，不过在插件中没有办法查看失败信息，但是可以点击直接跳转到对应页面查看详细信息</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files/20240419164234-e99b28d3fe4f0d12695d5a783510a23d-1713516155.png" alt="image.png"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><span class="exturl" data-url="aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3MvZ2l0aHViLXBhZ2Vz">在 GitHub Pages 上部署 Hexo | Hexo<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vemgvYWN0aW9ucw==">GitHub Actions 文档 - GitHub 文档<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>hexo</category>
        <category>github</category>
      </categories>
      <tags>
        <tag>action</tag>
        <tag>github</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Npm Token免登陆发包</title>
    <url>/2019-10-12/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Npm%20Token%E5%85%8D%E7%99%BB%E9%99%86%E5%8F%91%E5%8C%85.html</url>
    <content><![CDATA[<blockquote>
<p>在使用 npm 包管理器进行包的发布时，通常需要手动登录 npm 账户，并且我们在本地使用npm时因为某些不可抗原因，使用了非npm官方源，导致我们每次发布都需要切换到官方源，显得非常繁琐。现在，通过使用 npm Token，可以避免手动登录，切换源等步骤，实现自动化发布流程，特别是在持续集成&#x2F;持续部署（CI&#x2F;CD）环境中。</p>
</blockquote>
<h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>在开始之前，请确保：</p>
<ul>
<li>你的项目中包含一个 <code>package.json</code> 文件。</li>
<li>你有一个 npm 账户，并且已经获取了 npm token。</li>
<li>你即将发布的包的包名没有被占用。</li>
</ul>
<h3 id="获取Access-Token"><a href="#获取Access-Token" class="headerlink" title="获取Access Token"></a>获取Access Token</h3><h4 id="通过登陆官网获取"><a href="#通过登陆官网获取" class="headerlink" title="通过登陆官网获取"></a>通过登陆官网获取</h4><blockquote>
<p>确保记录下生成的 Token，因为它只会在创建的时候显示一次，刷新后不会再次显示，如果忘记就只能重新申请</p>
</blockquote>
<p>首先登陆npm官网，然后点击Access Tokens：</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files20240420164923-00c8fa57.png" alt="image.png"></p>
<p>然后进入access Tokens生成页面:</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files20240420165247-dd09ddfc.png" alt="image.png"></p>
<p>两者任选一个点击进入，两者都可以作为token在github actions中使用，只是Classic Token设置更简单，Granular Access Token设置更多，控制更精细化</p>
<p>点击Classic Token后：一定勾选publish，后面才能正常从github actions推送</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files20240420165358-eb4306d8.png" alt="image.png"></p>
<p>点击：Granular Access Token，红框勾选的三个必填：</p>
<ul>
<li>Token name：不必多说，token名字，起一个你喜欢的</li>
<li>Expiration：有效期，默认三十天，可以改得更长，过期后需要重新生成</li>
<li>Permissions：权限，即生成的token能做什么样的操作，同样需要选择 read &amp;&amp; write，不然github actions执行是无法推送</li>
<li>其余的选项可以根据需要适当勾选</li>
</ul>
<p>填写完成后，滑到底部点击Generate token按钮</p>
<p><img data-src="https://raw.githubusercontent.com/2ue/post-files/main/files20240420165954-939902ed.png" alt="image.png"></p>
<h4 id="通过命令行获取"><a href="#通过命令行获取" class="headerlink" title="通过命令行获取"></a>通过命令行获取</h4><p>需要现在本地执行npm login登陆，然后调用文档的命令生产token，具体可以看下官方文档：<br><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9jcmVhdGluZy1hbmQtdmlld2luZy1hY2Nlc3MtdG9rZW5z">Creating and viewing access tokens | npm Docs<i class="fa fa-external-link-alt"></i></span></p>
<h2 id="2-如何免登陆发布npm包"><a href="#2-如何免登陆发布npm包" class="headerlink" title="2. 如何免登陆发布npm包"></a>2. 如何免登陆发布npm包</h2><h3 id="创建-npmrc文件"><a href="#创建-npmrc文件" class="headerlink" title="创建.npmrc文件"></a>创建.npmrc文件</h3><p>前面你已经生成了一个npm的具有publish或者write权限的access token。<br>那么你只需在项目根目录下创建 <code>.npmrc</code> 文件，写入以下内容这个文件将包含 npm registry 的授权信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//registry.npmjs.org/:_authToken=你刚刚申请的token</span><br></pre></td></tr></table></figure>

<p>或者直接在项目根目录命令行执行，将会自动生成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;//registry.npmjs.org/:_authToken=你刚刚申请的token&quot;</span> &gt; .npmrc</span><br></pre></td></tr></table></figure>

<p>然后，将 <code>.npmrc</code> 文件添加到你的版本控制系统中。</p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><p>将你准备发布的文件，编译好。假设你已经准备好了，那么就愉快的执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">logout</span></span><br><span class="line">npm publish</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将会输出下面类似字样，就是成功了</span></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="comment"># npm notice package size: 12.6 kB</span></span><br><span class="line"><span class="comment"># npm notice unpacked size: 84.1 kB</span></span><br><span class="line"><span class="comment"># npm notice shasum: d282cbe9374611e6d10d6fb30215f61bb6c95c89</span></span><br><span class="line"><span class="comment"># npm notice integrity: sha512-N4iu+YUebBPCP[...]21dOqKE6G43iQ==</span></span><br><span class="line"><span class="comment"># npm notice total files: 18</span></span><br><span class="line"><span class="comment"># npm notice</span></span><br><span class="line"><span class="comment"># npm notice Publishing to [https://registry.npmjs.org/](https://registry.npmjs.org/) with tag latest and default access</span></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure>

<p>或者登陆npm官网，查看刚刚发布的包</p>
<p>如果你没有成功，出现如下报错：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm ERR! need auth You need to authorize this machine using `npm adduser` [https://docs.npmjs.com/using-private-packages-in-a-ci-cd-workflow](https://docs.npmjs.com/using-private-packages-in-a-ci-cd-workflow)</span><br></pre></td></tr></table></figure>

<p>有三个可能原因：</p>
<ul>
<li>确保你的.npmrc文件路径，命名和内容正确</li>
<li>确保你的access token正确，或者具有publish或write权限</li>
<li>由于某些不可描述原因，你将本地npm的源设置为其他源，没有设置为<span class="exturl" data-url="aHR0cHM6Ly9yZWdpc3RyeS5ucG1qcy5vcmcs5q+U5aaC6IW+6K6v5rqQLOmYv+mHjOS6keS6keetiSzmraTml7bpnIDopoHliIfmjaLov4fmnaXmiY3og73mraPnoa4v">https://registry.npmjs.org，比如腾讯源，阿里云云等，此时需要切换过来才能正确<i class="fa fa-external-link-alt"></i></span></li>
</ul>
<p>至此，你已经做到免登陆发布包了，但别急，这还没完。</p>
<h3 id="这样安全吗？"><a href="#这样安全吗？" class="headerlink" title="这样安全吗？"></a>这样安全吗？</h3><p>如果你真像上面这样做了，那你npm仓库的安全就没有了。</p>
<p>为什么呢，因为你刚刚申请的access token有读写仓库的权限，你如果随着你的代码提交到仓库，就会将他暴露出去，造成损失，那么怎么做才安全呢？下面会将</p>
<h2 id="更安全的免登陆发包"><a href="#更安全的免登陆发包" class="headerlink" title="更安全的免登陆发包"></a>更安全的免登陆发包</h2><h3 id="忽略-npmrc"><a href="#忽略-npmrc" class="headerlink" title="忽略.npmrc"></a>忽略.npmrc</h3><p>将.npmrc加入到.gitignore文件中，不提交到代码仓库，只在你本地使用</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="在-npmrc使用变量"><a href="#在-npmrc使用变量" class="headerlink" title="在.npmrc使用变量"></a>在.npmrc使用变量</h4><p>将.npmrc改成如下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//registry.npmjs.org/:_authToken=$&#123;NPM_PUBLISH_TOKEN&#125;</span><br></pre></td></tr></table></figure>

<p>NPM_PUBLISH_TOKEN是我们后面要设置的全局变量</p>
<h4 id="设置全局变量"><a href="#设置全局变量" class="headerlink" title="设置全局变量"></a>设置全局变量</h4><p>在全局变量（环境变量）中设置NPM_PUBLISH_TOKEN为你刚刚申请的token</p>
<p>不同的平台设置方式不一样：</p>
<p>linux和mac平台可以通过编辑.bashrc或者.zshrc文件实现：</p>
<ul>
<li>打开.bashrc或者.zshrc编辑</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vi ~/.bashrc</span><br></pre></td></tr></table></figure>

<ul>
<li>在文件内容末尾追加：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NPM_PUBLISH_TOKEN=你刚刚申请的token</span><br></pre></td></tr></table></figure>

<ul>
<li>然后执行source命令使其生效</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>如果提示没有权限加上sudo</p>
<p>window平台可以直接打开高级属性界面设置</p>
<h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><p>当然可以看出在本地使用token还是有很多限制，没有彻底解放生产力，后续我会出一篇文章讲述如何结合CI&#x2F;CD去实现自动化发包</p>
<h2 id="重要"><a href="#重要" class="headerlink" title="重要"></a>重要</h2><p>任何时候都不要将access token相关的信息暴露到公网上，以免造成不必要损失</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1.<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9jcmVhdGluZy1hbmQtdmlld2luZy1hY2Nlc3MtdG9rZW5z">Creating and viewing access tokens | npm Docs<i class="fa fa-external-link-alt"></i></span><br>2.<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS91c2luZy1wcml2YXRlLXBhY2thZ2VzLWluLWEtY2ktY2Qtd29ya2Zsb3c=">Using private packages in a CI&#x2F;CD workflow | npm Docs<i class="fa fa-external-link-alt"></i></span><br>3.<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmdpdGh1Yi5jb20vZW4vcGFja2FnZXMvd29ya2luZy13aXRoLWEtZ2l0aHViLXBhY2thZ2VzLXJlZ2lzdHJ5L3dvcmtpbmctd2l0aC10aGUtbnBtLXJlZ2lzdHJ5">Working with the npm registry - GitHub Docs<i class="fa fa-external-link-alt"></i></span></p>
]]></content>
      <categories>
        <category>npm</category>
      </categories>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
</search>
